# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby27 < Parser::Base


  def version
    27
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-686,-107,587,213,214,587,-113,-686,-686,-686,-695,-105,-686,-686,-686',
'834,-686,276,-113,1032,-112,834,213,214,-686,-686,-686,-686,-686,630',
'649,-108,1092,-106,731,-106,-686,-686,-695,-686,-686,-686,-686,-686',
'-110,730,224,587,587,875,587,587,-105,276,594,224,213,214,223,771,118',
'1085,771,-107,224,117,-686,-686,-686,-686,-686,-686,-686,-686,-686,-686',
'-686,-686,-686,-686,-109,-111,-686,-686,-686,-108,831,-686,-110,-108',
'-686,883,766,-686,-686,629,-686,224,-686,224,-686,1033,-686,-686,275',
'-686,-686,-686,-686,-686,-112,-686,-686,-686,1093,-104,224,271,-111',
'-107,118,-109,-99,118,-107,117,912,-686,117,-105,-686,-686,-686,-686',
'-105,-686,-113,-686,-112,-686,275,-113,-686,-112,-97,-109,-686,-686',
'-686,-108,224,-106,-686,-686,-108,-686,-106,-682,-683,932,628,-96,-110',
'-686,-686,118,118,-110,118,118,117,117,-98,117,117,-686,-686,276,-686',
'-686,-686,-686,-686,-683,96,97,-682,-101,-99,-100,532,-98,276,725,-99',
'615,118,-101,-109,-111,882,117,-695,-109,-111,-686,-686,-686,-686,-686',
'-686,-686,-686,-686,-686,-686,-686,-686,-686,-103,538,-686,-686,-686',
'615,655,627,-102,-99,-686,-100,-99,-686,213,214,224,834,-686,224,-686',
'221,-686,-686,-99,-686,-686,-686,-686,-686,-112,-686,-686,-686,-101',
'-682,-100,271,-98,615,617,616,613,98,99,275,1038,-686,933,219,-686,-686',
'615,-686,-588,-686,269,1100,615,-686,275,-588,-686,-483,1037,-109,-686',
'-686,-686,617,616,-695,-686,-686,-101,-686,-100,-101,-98,-100,-113,-98',
'615,-686,-686,816,1100,118,714,-101,-303,-100,117,-98,757,-686,-686',
'-303,-686,-686,-686,-686,-686,617,616,613,-303,-107,118,96,97,224,758',
'117,220,461,617,616,622,-588,711,-596,617,616,631,-686,-686,-686,-686',
'-686,-686,-686,-686,-686,-686,-686,-686,-686,-686,-595,650,-686,-686',
'-686,-107,655,617,616,830,-686,615,-587,-686,615,829,-303,802,-686,-587',
'-686,-91,-686,-686,615,-686,-686,-686,-686,-686,-581,-686,-686,-686',
'689,-113,-596,-581,-581,-581,224,-106,-581,-581,-581,219,-581,-686,98',
'99,-686,-686,642,-100,-581,-686,-581,-581,-581,-105,-110,640,-686,847',
'848,-109,-581,-581,-110,-581,-581,-581,-581,-581,-108,617,616,-587,617',
'616,618,615,875,-97,594,800,408,-586,617,616,613,410,409,224,-586,-106',
'-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581',
'220,219,-581,-581,-581,224,-581,-581,534,-91,-581,600,615,-581,-581',
'853,-581,459,-581,118,-581,-77,-581,-581,117,-581,-581,-581,-581,-581',
'600,-581,-584,-581,601,617,616,620,-595,-584,-584,-584,-586,224,-584',
'-584,-584,-581,-584,118,-581,-581,-581,-581,117,-581,-584,-581,-584',
'-584,-584,545,-581,600,547,-581,220,853,-584,-584,650,-584,-584,-584',
'-584,-584,617,616,626,-302,959,-589,219,-592,863,-96,-302,-590,-589',
'269,-592,-683,965,545,-590,-302,544,-105,-584,-584,-584,-584,-584,-584',
'-584,-584,-584,-584,-584,-584,-584,-584,245,950,-584,-584,-584,-101',
'-584,-584,583,582,-584,575,-591,-584,-584,725,-584,-110,-584,-591,-584',
'545,-584,-584,547,-584,-584,-584,-584,-584,-302,-584,-302,-584,-589',
'220,-592,-302,-302,-302,-590,245,545,-302,-302,547,-302,-584,982,576',
'-584,-584,-584,-584,-302,-584,-584,-584,245,840,-275,958,-584,-584,836',
'-584,-302,-302,837,-302,-302,-302,-302,-302,986,649,990,-591,567,-303',
'564,563,562,572,565,-581,-303,224,991,118,1122,740,-581,575,117,-303',
'-302,-302,-302,-302,-302,-302,-302,-302,-302,-302,-302,-302,-302,-302',
'758,532,-302,-302,-302,570,654,907,875,993,-302,-584,-99,-302,580,579',
'583,582,-302,995,-302,576,-302,-302,-108,-302,-302,-302,-302,-302,-302',
'-302,997,-302,-303,816,999,-302,-302,-302,-581,999,-302,-302,-302,224',
'-302,-302,-103,245,-302,-302,82,-102,-302,-302,-302,-302,-302,1006,-112',
'924,-302,221,83,-111,-302,-302,1008,-302,-302,-302,-302,-302,84,1083',
'1084,-293,659,219,213,214,-98,271,-293,1073,1117,564,563,562,648,565',
'1016,-293,-107,1115,-302,-302,-302,-302,-302,-302,-302,-302,-302,-302',
'-302,-302,-302,-302,-104,1017,-302,-302,-302,647,832,-302,213,214,-302',
'1020,-113,-302,-302,224,-302,224,-302,1025,-302,-278,-302,-302,224,-302',
'-302,-302,-302,-302,-302,-302,-293,-302,220,907,875,-302,-302,-302,643',
'265,638,-302,-302,224,-302,-302,245,224,-302,-302,-302,-302,-302,-302',
'-275,-302,1031,636,1034,219,-302,635,224,-111,-302,-302,525,-302,-302',
'-302,-302,-302,224,219,224,523,224,-594,242,632,603,607,244,243,-594',
'240,241,1046,740,605,740,1050,1052,-594,-302,-302,-302,-302,-302,-302',
'-302,-302,-302,-302,-302,-302,-302,-302,1054,1056,-302,-302,-302,224',
'654,1058,-593,245,-302,599,598,-302,400,-593,220,594,-302,507,-302,549',
'-302,-302,-593,-302,-302,-302,-302,-302,220,-302,1079,-302,-594,1080',
'-302,548,1089,789,834,242,-340,-302,950,244,243,-302,-683,-340,-302',
'-302,-302,-302,575,-302,219,1091,-340,224,1094,245,-302,458,834,-111',
'298,72,73,74,9,60,459,-593,535,66,67,529,271,224,70,-680,68,69,71,30',
'31,75,76,280,526,1110,576,519,77,28,27,106,105,107,108,-302,518,19,958',
'1113,224,-340,-76,8,48,300,10,110,109,111,100,59,102,101,103,220,104',
'112,113,219,96,97,44,45,43,219,1112,-584,127,219,262,263,1112,1118,-584',
'605,218,1119,1120,-680,1123,605,999,-584,40,216,999,33,999,507,61,62',
'219,505,63,503,35,492,223,597,47,1135,-680,463,245,462,261,260,595,20',
'1138,740,1140,1142,94,82,85,86,1144,87,89,88,90,1146,220,1146,460,83',
'93,411,220,730,-584,398,220,65,242,84,98,99,244,243,41,42,298,72,73',
'74,9,60,224,1080,325,66,67,1161,324,220,70,-679,68,69,71,30,31,75,76',
'1138,1138,572,265,215,77,28,27,106,105,107,108,575,1073,19,564,563,562',
'212,565,8,48,300,10,110,109,111,100,59,102,101,103,572,104,112,113,-683',
'96,97,44,45,43,575,-682,-581,583,582,224,794,795,576,-581,796,112,113',
'211,-679,210,127,999,-581,40,1138,1173,302,1146,1146,61,62,1146,114',
'63,1146,35,639,583,582,47,861,-679,576,567,863,564,563,562,20,565,865',
'505,507,94,82,85,86,856,87,89,88,90,855,725,224,852,83,93,271,271,725',
'-581,245,835,65,875,84,98,99,834,750,41,42,298,72,73,74,9,60,754,224',
'224,66,67,492,492,817,70,-686,68,69,71,30,31,75,76,121,122,123,124,125',
'77,28,27,106,105,107,108,-276,567,19,564,563,562,804,565,8,48,300,10',
'110,109,111,100,59,102,101,103,803,104,112,113,901,96,97,44,45,43,902',
'567,-686,564,563,562,224,565,750,-686,875,909,910,799,-682,224,789,754',
'-686,40,772,768,33,767,762,61,62,224,760,63,567,35,564,563,562,47,565',
'-686,750,567,759,564,563,562,20,565,920,754,748,94,82,85,86,746,87,89',
'88,90,744,742,-277,740,83,93,224,740,737,-686,733,224,65,,84,98,99,',
'750,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,237',
',,,,77,28,27,106,105,107,108,,,19,121,122,123,124,125,8,48,300,10,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250',
'251,252,262,263,257,258,253,254,,238,239,,,255,256,,40,,,33,,,61,62',
',,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,259,,,,,65,,84,98,99,,,41,42,298,72,73,74',
'9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,121,122,123,124,125,77,28',
'27,106,105,107,108,,,19,,,,,644,8,48,300,10,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,245,249,250,251,252,262,263,257,258',
'253,254,,238,239,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244',
'243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',259,,-249,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,',
'68,69,71,30,31,75,76,121,122,123,124,125,77,28,27,106,105,107,108,,',
'19,,,,,644,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,',
'96,97,44,45,43,245,249,250,251,252,262,263,257,258,253,254,,238,239',
',,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261',
'260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,259,,,,,65,,84',
'98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250,251,252,262',
'263,257,258,253,254,,238,239,,,255,256,,40,,,302,,,61,62,,,63,,35,242',
',248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,259,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,',
'8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,245,249,250,251,252,262,263,257,258,253,254,,238,239,,,255,256,,40',
',,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,259,,,,,65,,84,98,99,,,41,42',
'298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103',
',104,112,113,,96,97,44,45,43,245,249,250,251,252,262,263,257,258,253',
'254,,238,239,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243',
',240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,259',
',,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250',
'251,252,262,263,257,258,253,254,,238,239,,,255,256,,40,,,33,,,61,62',
',,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,224,259,,,,,65,,84,98,99,,,41,42,298,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,245,249,250,251,252,262,263,257,258,253,254,,238,239',
',,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261',
'260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,259,,,,,65,,84',
'98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250,251,252,262',
'263,257,258,253,254,,-708,-708,,,255,256,,40,,,33,,,61,62,,245,63,,35',
'242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89',
'88,90,,,242,,83,93,244,243,,240,241,,65,,84,98,99,,,41,42,298,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,245,249,250,251,252,262,263,257,258,253,254,,-708,-708',
',,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261',
'260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,567,,564,563,562',
'65,565,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,750,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250',
'251,252,262,263,257,258,253,254,,-708,-708,,,255,256,,40,,,33,,,61,62',
',,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,567,,564,563,562,65,565,84,98,99,,,41,42',
'298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,750,,,,,77,28',
'27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,245,249,250,251,252,262,263,257,258',
'253,254,,-708,-708,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244',
'243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,-708,-708',
'-708,-708,262,263,,,-708,-708,,,,,,255,256,,40,,,33,,,61,62,,,63,,35',
'242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,',
'8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,245,-708,-708,-708,-708,262,263,,,-708,-708,,,,,,255,256,,40,,,33',
',,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298,72',
'73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105',
'107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112',
'113,,96,97,44,45,43,245,-708,-708,-708,-708,262,263,,,-708,-708,,,,',
',255,256,,40,,,302,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261',
'260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98',
'99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,',
',,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,245,-708,-708,-708,-708,262',
'263,,,-708,-708,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244',
'243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,41,42,5,72,73,74,9,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,7,10,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,-708,-708,-708',
'-708,262,263,,,-708,-708,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242',
',248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,',
',,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8',
'48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
'245,-708,-708,-708,-708,262,263,,,-708,-708,,,,,,255,256,,40,,,33,,',
'61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,245,249,250,251,252,262,263,,,253,254,,,,,,255,256,',
'40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20',
'247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42',
'298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103',
',104,112,113,,96,97,44,45,43,245,249,250,251,252,262,263,257,,253,254',
',,,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241',
'261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,245,,,,,,,,,,,,,,,,255,256',
',40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,,,246,20,247',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298',
'72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106',
'105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104',
'112,113,,96,97,44,45,43,245,,,,,,,,,,,,,,,,255,256,,40,,,33,,,61,62',
',,63,,35,242,,248,47,244,243,,240,241,,,246,20,247,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66',
'67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,',
',,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,245,,,,,,,,,,,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248',
'47,244,243,,240,241,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,',
',,,65,,84,98,99,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,,,,,,,,,,,,',
',,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,,',
',20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42',
'298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103',
',104,112,113,,96,97,44,45,43,245,,,,,,,,,,,,,,,,255,256,,40,,,33,,,61',
'62,,,63,,35,242,,,47,244,243,,240,241,,,,20,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,5,72,73,74,9,60,,,,66,67,,,',
'70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48',
'7,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,',
',,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41',
'42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,416,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,-418,,41,42,',
',,-418,-418,-418,,,-418,-418,-418,,-418,,,,,,,,-418,-418,-418,-418,',
',,,,,,,-418,-418,,-418,-418,-418,-418,-418,,,,,,,,,,,,,,,,,,,,,,,-418',
'-418,-418,-418,-418,-418,-418,-418,-418,-418,-418,-418,-418,-418,,,-418',
'-418,-418,,,-418,,271,-418,,,-418,-418,,-418,,-418,,-418,,-418,-418',
',-418,-418,-418,-418,-418,-309,-418,-418,-418,,,,-309,-309,-309,,,-309',
'-309,-309,,-309,-418,,,-418,-418,,-418,-309,-418,-309,-309,,,,,-418',
',,,-309,-309,,-309,-309,-309,-309,-309,,,,,,,,,,,,,,,,,,,,,,,-309,-309',
'-309,-309,-309,-309,-309,-309,-309,-309,-309,-309,-309,-309,,,-309,-309',
'-309,,,-309,,280,-309,,,-309,-309,,-309,,-309,,-309,,-309,-309,,-309',
'-309,-309,-309,-309,,-309,,-309,,,,,,,,,,,,,,-309,,,-309,-309,,-309',
',-309,72,73,74,,60,,-309,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77',
'28,27,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103',
'292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,289,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,',
'83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59',
'102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,289,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,,48,,,110,109',
'111,100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,',
',,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293,,,,,,234,,,,,94,290',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,',
',,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41',
'42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
'41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,',
'236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,-294,,41,42',
',,,-294,-294,-294,,,-294,-294,-294,,-294,,,,,,,,-294,,-294,-294,-294',
',,,106,105,107,108,-294,-294,,-294,-294,-294,-294,-294,,,,,110,109,111',
',,,,,,,,,,96,97,,,321,-294,-294,-294,-294,-294,-294,-294,-294,-294,-294',
'-294,-294,-294,-294,,,-294,-294,-294,,,-294,,,-294,,,-294,-294,,-294',
',-294,,-294,,-294,-294,,-294,-294,-294,-294,-294,,-294,,-294,,94,82',
'85,86,,87,89,88,90,,,,-294,83,93,-294,-294,-294,-294,,-294,688,-294',
'84,98,99,,-294,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,',
',,,77,28,27,106,105,107,108,,,19,,,,,,8,48,,10,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61',
'62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235',
',,61,62,,,63,,289,,,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229',
',,235,,,61,62,,,63,,,,,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88',
'90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235',
',,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
'118,,,,,117,65,,84,98,99,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,7,10,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,400,65,,84,98,99,,,41,42,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,',
',,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41',
'42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,',
',,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,',
',,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48',
',,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,',
',,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,',
'110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,72,73,74,9,60,,,,66',
'67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,',
',,,8,48,,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
'41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293',
',,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,416,,,,47,,,',
',,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,416,,,,47,,,',
',,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108',
',,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
'41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293',
',,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,',
',,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108',
',,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,224,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236',
',,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293',
',,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,494,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287',
',47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73',
'74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,292',
'104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63',
',289,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93',
'224,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,',
',,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,',
'33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,538,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235',
',,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235',
',,61,62,,,63,,,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,-258,,41,42,,,,-258,-258,-258,,,-258,-258',
'-258,,-258,,,,,,,,-258,-258,-258,-258,,,,,,,,,-258,-258,,-258,-258,-258',
'-258,-258,,,,,,,,,,,,,,,,,,,,,,,-258,-258,-258,-258,-258,-258,-258,-258',
'-258,-258,-258,-258,-258,-258,,,-258,-258,-258,,,-258,,271,-258,,,-258',
'-258,,-258,,-258,,-258,,-258,-258,,-258,-258,-258,-258,-258,,-258,-258',
'-258,567,,564,563,562,572,565,,,,,,,-258,,575,-258,-258,-687,-258,,-258',
',,,-687,-687,-687,-258,,-687,-687,-687,,-687,,,570,,,,,-687,-687,-687',
'-687,-687,,583,582,,,,576,-687,-687,,-687,-687,-687,-687,-687,,,,,,',
',,,,,,,,,,,,,,,,-687,-687,-687,-687,-687,-687,-687,-687,-687,-687,-687',
'-687,-687,-687,,,-687,-687,-687,,,-687,,,-687,,,-687,-687,,-687,,-687',
',-687,,-687,-687,,-687,-687,-687,-687,-687,,-687,-687,-687,,,,,,,,,',
',,,,-687,,,-687,-687,-687,-687,,-687,-688,-687,,,,,-687,-688,-688,-688',
',,-688,-688,-688,,-688,,,,,,,,-688,-688,-688,-688,-688,,,,,,,,-688,-688',
',-688,-688,-688,-688,-688,,,,,,,,,,,,,,,,,,,,,,,-688,-688,-688,-688',
'-688,-688,-688,-688,-688,-688,-688,-688,-688,-688,,,-688,-688,-688,',
',-688,,,-688,,,-688,-688,,-688,,-688,,-688,,-688,-688,,-688,-688,-688',
'-688,-688,,-688,-688,-688,,,,,,,,,,,,,,-688,,,-688,-688,-688,-688,,-688',
',-688,,72,73,74,-688,60,,,,66,67,,,,70,,68,69,71,317,318,75,76,,,,,',
'77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,708,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,',
',,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,',
',77,28,27,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61',
'62,,,63,,289,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,7,10',
'110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69',
'71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,-258,,41,42,,,,-258,-258,-258',
',,-258,-258,-258,567,-258,564,563,562,572,565,,,-258,-258,-258,,,,575',
',,,,,-258,-258,,-258,-258,-258,-258,-258,567,,564,563,562,572,565,567',
'570,564,563,562,572,565,,575,,580,579,583,582,,575,,576,,567,,564,563',
'562,572,565,-258,,,,570,,,-258,575,,,570,271,-258,,583,582,224,,,576',
',583,582,,,,576,,,570,,,,,-258,-258,,,580,579,583,582,,,,576,,,,-258',
',,-258,,72,73,74,-258,60,,,,66,67,-258,,,70,,68,69,71,317,318,75,76',
',,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235',
',,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76',
',,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59',
'102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,708,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69',
'71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110',
'109,111,100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,',
',,,,,,,,,,229,,,235,,,61,62,,,63,,,,287,,47,,,293,,,,,,234,,,,,94,290',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,',
',,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,72,73,74',
'9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,',
',,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,400,65,,84,98,99',
',,41,42,72,73,74,,60,,,,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,292',
'104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63',
',289,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,',
',,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,',
'61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,',
',,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,',
'104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63',
',,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73',
'74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314',
'320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103',
'292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62',
',,63,,708,,,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76',
',,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59',
'102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88',
'90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317',
'318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111',
'100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229',
',,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,289,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100',
'59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229',
',,235,,,61,62,,,63,,289,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,,48,,,110,109',
'111,100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,',
',,,,,,229,,,235,,,61,62,,,63,,289,,287,,47,,,293,,,,,,234,,,,,94,290',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,',
',,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,41,42,72,73,74',
'9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,8,48,,10,110,109,111,100,59,102,101,103,,104,112,113,',
'96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,',
',,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,42,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,808,,,,47',
',,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60',
'84,98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105',
'107,108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,',
',,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,41,42,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,236,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,289,,287',
',47,,,293,,,,,,234,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,,,,65',
',84,98,99,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,,10,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33',
',,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76',
',,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,,,235',
',,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69,71,317,318,75,76',
',,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110,109,111,100,59',
'102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,229,',
',235,,,61,62,,,63,,708,,287,,47,,,293,,,,,,234,,,,,94,290,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42,,70,,68,69',
'71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,48,,,110',
'109,111,100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,',
',,,,,,,,,,229,,,235,,,61,62,,,63,,,,287,,47,,,293,,,,,,234,,,,,94,290',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,',
'48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,',
'48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,',
'48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,236,,,,,,',
'48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,229,,,235,,,61,62,,,63,,,,,,47,,,,,,,,,234,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,41,42',
',70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,',
',,,,315,,,110,109,111,365,59,102,101,366,,104,112,113,,96,97,,,321,',
',,,,,,,,,,,,,,,372,,,367,,,235,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70',
',68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,',
'315,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,',
',,,,,,,,,,,,,,311,,,307,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69',
'71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,',
',,,,311,,,235,,,61,62,,,63,,,567,,564,563,562,572,565,,,,,,,,,575,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,323,,570,65,,84,98,99,72,73,74,,60',
'583,582,,66,67,576,,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106',
'105,107,108,,,236,,,,,,,315,,,110,109,111,100,59,102,101,103,,104,112',
'113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311,,,307,,,61,62,,,63,,,,,,,,,',
',,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,236,,,,,,,315,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
',,321,,,,,,,,,,,,,,,,,,,,311,,,307,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,',
'70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,',
',,,315,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,',
',,,,,,,,,,,,,,,,,1060,,,235,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68',
'69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315',
',,110,109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,',
',,,,,,,,,,360,,,33,,,61,62,,,63,,35,,,,,,,,,,,,,,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71',
'317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,',
',,,,1066,,,235,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110,109,111',
'100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,1060',
',,235,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75,76,,',
',,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311,,,235,,,61',
'62,,,63,,,567,,564,563,562,572,565,,,,,,,,,575,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,521,,570,65,,84,98,99,72,73,74,,60,583,582,,66,67,576',
',,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,',
',,,,,315,,,110,109,111,365,59,102,101,366,,104,112,113,,96,97,,,321',
',,,,,,,,,,,,,,,,,,,367,,,235,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68',
'69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315',
',,110,109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,',
',,,,,,,,,,311,,,307,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71',
'317,318,75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,',
',,,,311,,,307,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,236,,,,,,,315,,,110,109,111',
'100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311',
',,307,,,61,62,,,63,,306,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,,,,65,,84,98,99,177,188,178,201,174,194,184,183,204,205,199',
'182,181,176,202,206,207,186,175,189,193,195,187,180,,,,196,203,198,197',
'190,200,185,173,192,191,,,,,,172,179,170,171,167,168,169,130,132,,,131',
',,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150',
'151,,,,,,,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159',
'138,,,166,94,,,,,,,,,,,,,,93,177,188,178,201,174,194,184,183,204,205',
'199,182,181,176,202,206,207,186,175,189,193,195,187,180,,,,196,203,198',
'197,190,200,185,173,192,191,,,,,,172,179,170,171,167,168,169,130,132',
',,131,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164',
'150,151,,,,,,,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137',
'159,138,,,166,94,,,,,,,,,,,,,,93,177,188,178,201,174,194,184,183,204',
'205,199,182,181,176,202,206,207,186,175,189,193,195,187,180,,,,196,203',
'198,197,190,200,185,173,192,191,,,,,,172,179,170,171,167,168,169,130',
'132,129,,131,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,',
',,163,164,150,151,,,,,,,,,,,,,,155,154,,139,160,157,156,165,152,153',
'147,145,137,159,138,,,166,94,,,,,,,,,,,,,,93,177,188,178,201,174,194',
'184,183,204,205,199,182,181,176,202,206,207,186,175,189,193,195,187',
'180,,,,196,203,198,197,190,200,185,173,192,191,,,,,,172,179,170,171',
'167,168,169,130,132,,,131,,,,,,,,161,162,,158,140,141,142,149,146,148',
',,143,144,,,,163,164,150,151,,,,,,,,,,,,,,155,154,,139,160,157,156,165',
'152,153,147,145,137,159,138,,,166,94,106,105,107,108,,,,,,,,,,93,,,110',
'109,111,689,,,567,692,564,563,562,572,565,96,97,,,321,,,,575,,,,,,,',
',,,,,,,,691,,,673,,,570,671,,,672,,,,,580,579,583,582,,,,576,,,,690',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84,98,99',
',,677,678,,110,109,111,689,,,567,692,564,563,562,572,565,96,97,,,321',
',,,575,,,,,,,,,,,,,,,,691,,,673,,,570,671,,,672,,,,,,,583,582,,,,576',
',,,690,,,,94,82,85,86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,',
'84,98,99,,,677,678,,110,109,111,689,,,567,692,564,563,562,572,565,96',
'97,,,321,,,,575,,,,,,,,,,,,,,,,691,,,673,,,570,671,,,672,,944,,,580',
'579,583,582,,,,576,,,,690,,,,94,82,85,86,,87,89,88,90,,,,,83,93,106',
'105,107,108,,,688,,84,98,99,,,677,678,,110,109,111,689,,,567,692,564',
'563,562,572,565,96,97,,,321,,,,575,,,,,,,,,,,,,,,,691,,,673,,,570,671',
',,672,,1030,,,,,583,582,,,,576,,,,690,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,106,105,107,108,,,688,,84,98,99,,,677,678,,110,109,111,689,',
',567,692,564,563,562,572,565,96,97,,,321,,,,575,,,,,,,,,,,,,,,,691,',
',673,,,570,671,,,672,,,,,580,579,583,582,,,,576,,,,690,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84,98,99,,,677,678,,110',
'109,111,689,,,567,692,564,563,562,572,565,96,97,,,321,,,,575,,,,,,,',
',,,,,,,,691,,,673,,,570,671,,,672,,,,,580,579,583,582,,,,576,,,,690',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84,98,99',
',,677,678,,110,109,111,689,,,,692,950,,,,,96,97,,,321,575,,,,,,,,,,',
',,,,,,,,691,,,673,,,,671,,,672,,944,,,,,,,576,,,,,,,690,,,,94,951,85',
'86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84,98,99,,,677,678',
',110,109,111,689,,,567,692,564,563,562,572,565,96,97,,,321,,,,575,,',
',,,,,,,,,,,,,691,,,673,,,570,671,,,672,,,,,580,579,583,582,,,,576,,',
',690,,,,94,82,85,86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84',
'98,99,,,677,678,,110,109,111,689,,,,692,950,,,,,96,97,,,321,575,,,,',
',,,,,,,,,,,,,,691,,,673,,,,671,,,672,,944,,,,,,,576,,,,,,,690,,,,94',
'951,85,86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84,98,99,,,677',
'678,,110,109,111,689,,,567,692,564,563,562,572,565,96,97,,,321,,,,575',
',,,,,,,,,,,,,,,691,,,673,,,570,671,,,672,,944,,,,,583,582,,,,576,,,',
'690,,,,94,82,85,86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84',
'98,99,,,677,678,,110,109,111,689,,,,692,950,,,,,96,97,,,321,575,,,,',
',,,,,,,,,,,,,,691,,,673,,,,671,,,672,,944,,,,,,,576,,,,,,,690,,,,94',
'951,85,86,,87,89,88,90,,,,,83,93,,,,,,,688,,84,98,99,,,677,678,177,188',
'178,201,174,194,184,183,204,205,199,182,181,176,202,206,207,186,175',
'189,193,195,187,180,,,,196,203,198,197,190,200,185,173,192,191,,,,,',
'172,179,170,171,167,168,169,130,132,,,131,,,,,,,,161,162,,158,140,141',
'142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,,,,,,,,,155,154,,139',
'160,157,156,165,152,153,147,145,137,159,138,,,166,106,105,107,108,,',
'567,,564,563,562,572,565,,,,110,109,111,689,,575,,692,,,,,,96,97,,,321',
',,,,,,,,,570,,,,,,,,,,691,583,582,673,,,576,671,,,672,,,,,,,,,,,,,,',
',690,,,,94,82,85,86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84',
'98,99,,,677,678,,110,109,111,689,,,567,692,564,563,562,572,565,96,97',
',,321,,,,575,,,,,,,,,,,,,,,,691,,,673,,,570,671,,,672,,,,,580,579,583',
'582,,,,576,,,,690,,,,94,82,85,86,,87,89,88,90,,,,,83,93,106,105,107',
'108,,,688,,84,98,99,,,677,678,,110,109,111,689,,,567,692,564,563,562',
'572,565,96,97,,,321,,,,575,,,,,,,,,,,,,,,,691,,,673,,,570,671,,,672',
',,,,580,579,583,582,,,,576,,,,690,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,106,105,107,108,,,688,,84,98,99,,,677,678,,110,109,111,689,,,567',
'692,564,563,562,572,565,96,97,,,321,,,,575,,,,,,,,,,,,,,,,691,,,673',
',,570,671,,,672,,,,,,,583,582,,,,576,,,,690,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,688,,84,98,99,,,677,678,177,188,178,201,174,194,184',
'183,204,205,199,182,181,176,202,206,207,186,175,189,193,195,187,180',
',,,196,203,198,383,382,384,381,173,192,191,,,,,,172,179,170,171,378',
'379,380,376,132,102,101,377,,104,,,,,,161,162,,158,140,141,142,149,146',
'148,,,143,144,,,,163,164,150,151,,,,,,388,,,,,,,,155,154,,139,160,157',
'156,165,152,153,147,145,137,159,138,,,166,106,105,107,108,,,,567,,564',
'563,562,572,565,,,110,109,111,,,,575,,,,,,,96,97,,,321,106,105,107,108',
',,,,,,570,552,,,,,110,109,111,580,579,583,582,,,,576,,,96,97,,,321,',
',,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,688,,84,98,99',
',,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,106,105,107,108,,,688,,84',
'98,99,,,,,,110,109,111,490,442,,,491,,,,,,96,97,161,162,321,158,140',
'141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,,,,,,,,,155,154',
',139,160,157,156,165,152,153,147,145,137,159,138,,,166,94,82,85,86,',
'87,89,88,90,,,,,83,93,813,449,,,812,,688,,84,98,99,,161,162,,158,140',
'141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155',
'154,,139,160,157,156,165,152,153,147,145,137,159,138,660,442,166,,661',
',,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150',
'151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137',
'159,138,662,449,166,,663,,,,,,,,161,162,,158,140,141,142,149,146,148',
',,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156',
'165,152,153,147,145,137,159,138,775,442,166,,776,,,,,,,,161,162,,158',
'140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,',
',155,154,,139,160,157,156,165,152,153,147,145,137,159,138,777,449,166',
',778,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164',
'150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145',
'137,159,138,780,449,166,,781,,,,,,,,161,162,,158,140,141,142,149,146',
'148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157',
'156,165,152,153,147,145,137,159,138,490,442,166,,491,,,,,,,,161,162',
',158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,',
',,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138,1150',
'449,166,,1149,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144',
',,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152',
'153,147,145,137,159,138,1153,442,166,,1154,,,,,,,,161,162,,158,140,141',
'142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154',
',139,160,157,156,165,152,153,147,145,137,159,138,438,442,166,,439,,',
',,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151',
',,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159',
'138,445,449,166,,444,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143',
'144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165',
'152,153,147,145,137,159,138,1155,449,166,,1156,,,,,,,,161,162,,158,140',
'141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155',
'154,,139,160,157,156,165,152,153,147,145,137,159,138,718,442,166,,719',
',,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150',
'151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137',
'159,138,721,449,166,,722,,,,,,,,161,162,,158,140,141,142,149,146,148',
',,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156',
'165,152,153,147,145,137,159,138,660,442,166,,661,,,,,,,,161,162,,158',
'140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,',
',155,154,,139,160,157,156,165,152,153,147,145,137,159,138,662,449,166',
',663,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164',
'150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145',
'137,159,138,810,442,166,,811,,,,,,,,161,162,,158,140,141,142,149,146',
'148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157',
'156,165,152,153,147,145,137,159,138,,,166' ]
        racc_action_table = arr = ::Array.new(27149, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'662,1168,985,454,454,773,361,662,662,662,837,1063,662,662,662,1011,662',
'697,1067,944,1118,960,612,612,662,662,662,662,662,396,810,1153,1030',
'1064,540,358,662,662,672,662,662,662,662,662,1154,539,837,1007,350,1160',
'349,1009,357,26,592,672,728,728,19,1160,296,1011,592,914,960,296,662',
'662,662,662,662,662,662,662,662,662,662,662,662,662,1155,1156,662,662',
'662,775,662,662,776,810,662,735,589,662,662,396,662,454,662,19,662,944',
'662,662,697,662,662,662,662,662,598,662,662,662,1030,361,612,26,778',
'1168,985,777,718,773,1168,985,773,662,773,1063,662,662,662,662,1063',
'662,1067,662,1118,813,26,1067,662,1118,358,662,813,813,813,1153,728',
'1064,813,813,1153,813,1064,1155,1156,818,395,357,1154,813,813,1007,350',
'1154,349,1009,1007,350,914,349,1009,813,813,64,813,813,813,813,813,778',
'43,43,777,719,718,721,460,870,316,530,775,1036,589,776,1155,1156,735',
'589,671,1155,1156,813,813,813,813,813,813,813,813,813,813,813,813,813',
'813,598,527,813,813,813,1043,813,395,778,718,813,777,718,813,608,608',
'522,938,813,671,813,423,813,813,718,813,813,813,813,813,460,813,813',
'813,719,721,721,316,870,509,1036,1036,1036,43,43,64,952,813,833,386',
'813,813,393,813,384,813,386,1036,397,445,316,384,813,938,952,813,445',
'445,445,1043,1043,836,445,445,719,445,721,719,870,721,423,870,625,445',
'445,929,1043,925,520,719,526,721,925,870,577,445,445,526,445,445,445',
'445,445,509,509,509,526,833,608,321,321,836,577,608,386,230,393,393',
'393,384,509,228,397,397,397,445,445,445,445,445,445,445,445,445,445',
'445,445,445,445,227,811,445,445,445,929,445,625,625,661,445,623,383',
'445,391,660,526,625,445,383,445,517,445,445,390,445,445,445,445,445',
'100,445,445,445,834,230,39,100,100,100,516,228,100,100,100,422,100,445',
'321,321,445,445,422,445,100,445,100,100,100,227,811,422,445,674,674',
'445,100,100,661,100,100,100,100,100,660,623,623,383,391,391,391,392',
'1015,39,1015,623,129,382,390,390,390,129,129,500,382,39,100,100,100',
'100,100,100,100,100,100,100,100,100,100,100,422,326,100,100,100,496',
'100,100,326,713,100,691,394,100,100,691,100,326,100,354,100,713,100',
'100,354,100,100,100,100,100,367,100,103,100,367,392,392,392,38,103,103',
'103,382,495,103,103,103,100,103,918,100,100,100,100,918,100,103,100',
'103,103,103,343,100,840,343,100,326,840,103,103,439,103,103,103,103',
'103,394,394,394,781,845,381,24,380,857,38,781,379,381,24,380,781,860',
'339,379,781,339,38,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,472,843,103,103,103,439,103,103,740,740,103,843,378,103,103,869',
'103,439,103,378,103,340,103,103,340,103,103,103,103,103,444,103,781',
'103,381,24,380,444,444,444,379,471,734,444,444,734,444,103,873,843,103',
'103,103,103,444,103,377,103,470,670,876,843,103,377,670,103,444,444',
'670,444,444,444,444,444,877,438,884,378,789,601,789,789,789,789,789',
'376,601,1071,885,3,1071,886,376,789,3,601,444,444,444,444,444,444,444',
'444,444,444,444,444,444,444,888,325,444,444,444,789,444,1129,1129,891',
'444,377,438,444,789,789,789,789,444,892,444,789,444,444,438,444,444',
'444,444,444,663,444,894,444,601,645,895,663,663,663,376,897,663,663',
'663,900,663,444,325,469,444,444,80,444,663,444,663,663,663,905,325,789',
'444,17,80,444,663,663,908,663,663,663,663,663,80,1010,1010,312,456,1065',
'348,348,645,446,312,990,1065,990,990,990,437,990,915,312,645,1065,663',
'663,663,663,663,663,663,663,663,663,663,663,663,663,17,917,663,663,663',
'436,663,663,14,14,663,921,17,663,663,922,663,923,663,927,663,928,663',
'663,434,663,663,663,663,663,812,663,312,663,1065,761,761,812,812,812',
'424,696,417,812,812,939,812,663,483,940,663,663,663,663,812,663,415',
'663,943,414,945,310,663,412,953,663,812,812,310,812,812,812,812,812',
'954,369,956,310,957,309,483,406,369,371,483,483,309,483,483,966,967',
'369,968,970,971,309,812,812,812,812,812,812,812,812,812,812,812,812',
'812,812,972,974,812,812,812,975,812,976,308,468,812,362,360,812,356',
'308,310,355,812,344,812,342,812,812,308,812,812,812,812,812,369,812',
'1004,812,309,1005,722,341,1019,1024,1028,468,49,722,1034,468,468,812',
'722,49,812,812,722,812,1034,812,226,1029,49,337,1032,331,812,226,1035',
'812,875,875,875,875,875,875,226,308,329,875,875,322,320,315,875,366',
'875,875,875,875,875,875,875,314,311,1057,1034,305,875,875,875,875,875',
'875,875,722,304,875,1034,1060,303,49,301,875,875,875,875,875,875,875',
'875,875,875,875,875,226,875,875,875,1059,875,875,875,875,875,1111,1059',
'366,300,16,46,46,1111,1066,366,1059,16,1069,1070,366,1075,1111,1076',
'366,875,16,1077,875,1078,288,875,875,359,285,875,284,875,270,236,359',
'875,1092,366,232,467,231,46,46,359,875,1095,1101,1104,1105,875,875,875',
'875,1106,875,875,875,875,1107,1059,1109,229,875,875,208,1111,1114,366',
'114,16,875,467,875,875,875,467,467,875,875,307,307,307,307,307,307,48',
'1128,40,307,307,1134,37,359,307,365,307,307,307,307,307,307,307,1136',
'1137,1046,22,15,307,307,307,307,307,307,307,1046,1122,307,1122,1122',
'1122,13,1122,307,307,307,307,307,307,307,307,307,307,307,307,737,307',
'307,307,1149,307,307,307,307,307,737,1150,365,1046,1046,1152,616,616',
'1046,365,616,616,616,12,365,10,7,1158,365,307,1162,1164,307,1165,1166',
'307,307,1167,1,307,1178,307,420,737,737,307,701,365,737,570,702,570',
'570,570,307,570,703,705,707,307,307,307,307,694,307,307,307,307,693',
'715,717,690,307,307,720,723,724,365,727,667,307,729,307,307,307,665',
'570,307,307,913,913,913,913,913,913,570,664,736,913,913,656,651,646',
'913,780,913,913,913,913,913,913,913,299,299,299,299,299,913,913,913',
'913,913,913,913,637,901,913,901,901,901,630,901,913,913,913,913,913',
'913,913,913,913,913,913,913,628,913,913,913,752,913,913,913,913,913',
'753,750,780,750,750,750,755,750,901,780,763,769,770,620,780,774,610',
'901,780,913,593,591,913,590,586,913,913,783,584,913,754,913,754,754',
'754,913,754,780,750,902,581,902,902,902,913,902,787,750,569,913,913',
'913,913,560,913,913,913,913,559,558,807,556,913,913,809,555,554,780',
'542,541,913,,913,913,913,,902,913,913,988,988,988,988,988,988,,,,988',
'988,,,,988,,988,988,988,988,988,988,988,21,,,,,988,988,988,988,988,988',
'988,,,988,6,6,6,6,6,988,988,988,988,988,988,988,988,988,988,988,988',
',988,988,988,,988,988,988,988,988,21,21,21,21,21,21,21,21,21,21,21,',
'21,21,,,21,21,,988,,,988,,,988,988,,,988,,988,21,,21,988,21,21,,21,21',
'21,21,21,988,21,,,,988,988,988,988,,988,988,988,988,,,,,988,988,,21',
',,,,988,,988,988,988,,,988,988,779,779,779,779,779,779,,,,779,779,,',
',779,,779,779,779,779,779,779,779,336,336,336,336,336,779,779,779,779',
'779,779,779,,,779,,,,,427,779,779,779,779,779,779,779,779,779,779,779',
'779,,779,779,779,,779,779,779,779,779,427,427,427,427,427,427,427,427',
'427,427,427,,427,427,,,427,427,,779,,,779,,,779,779,,,779,,779,427,',
'427,779,427,427,,427,427,427,427,427,779,427,,,,779,779,779,779,,779',
'779,779,779,,,,,779,779,,427,,427,,,779,,779,779,779,,,779,779,1062',
'1062,1062,1062,1062,1062,,,,1062,1062,,,,1062,,1062,1062,1062,1062,1062',
'1062,1062,514,514,514,514,514,1062,1062,1062,1062,1062,1062,1062,,,1062',
',,,,433,1062,1062,1062,1062,1062,1062,1062,1062,1062,1062,1062,1062',
',1062,1062,1062,,1062,1062,1062,1062,1062,433,433,433,433,433,433,433',
'433,433,433,433,,433,433,,,433,433,,1062,,,1062,,,1062,1062,,,1062,',
'1062,433,,433,1062,433,433,,433,433,433,433,433,1062,433,,,,1062,1062',
'1062,1062,,1062,1062,1062,1062,,,,,1062,1062,,433,,,,,1062,,1062,1062',
'1062,,,1062,1062,302,302,302,302,302,302,,,,302,302,,,,302,,302,302',
'302,302,302,302,302,,,,,,302,302,302,302,302,302,302,,,302,,,,,,302',
'302,302,302,302,302,302,302,302,302,302,302,,302,302,302,,302,302,302',
'302,302,537,537,537,537,537,537,537,537,537,537,537,,537,537,,,537,537',
',302,,,302,,,302,302,,,302,,302,537,,537,302,537,537,,537,537,537,537',
'537,302,537,,,,302,302,302,302,,302,302,302,302,,,,,302,302,,537,,,',
',302,,302,302,302,,,302,302,1081,1081,1081,1081,1081,1081,,,,1081,1081',
',,,1081,,1081,1081,1081,1081,1081,1081,1081,,,,,,1081,1081,1081,1081',
'1081,1081,1081,,,1081,,,,,,1081,1081,1081,1081,1081,1081,1081,1081,1081',
'1081,1081,1081,,1081,1081,1081,,1081,1081,1081,1081,1081,963,963,963',
'963,963,963,963,963,963,963,963,,963,963,,,963,963,,1081,,,1081,,,1081',
'1081,,,1081,,1081,963,,963,1081,963,963,,963,963,963,963,963,1081,963',
',,,1081,1081,1081,1081,,1081,1081,1081,1081,,,,,1081,1081,,963,,,,,1081',
',1081,1081,1081,,,1081,1081,1090,1090,1090,1090,1090,1090,,,,1090,1090',
',,,1090,,1090,1090,1090,1090,1090,1090,1090,,,,,,1090,1090,1090,1090',
'1090,1090,1090,,,1090,,,,,,1090,1090,1090,1090,1090,1090,1090,1090,1090',
'1090,1090,1090,,1090,1090,1090,,1090,1090,1090,1090,1090,282,282,282',
'282,282,282,282,282,282,282,282,,282,282,,,282,282,,1090,,,1090,,,1090',
'1090,,,1090,,1090,282,,282,1090,282,282,,282,282,282,282,282,1090,282',
',,,1090,1090,1090,1090,,1090,1090,1090,1090,,,,,1090,1090,,282,,,,,1090',
',1090,1090,1090,,,1090,1090,235,235,235,235,235,235,,,,235,235,,,,235',
',235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235',
',,,,,235,235,235,235,235,235,235,235,235,235,235,235,,235,235,235,,235',
'235,235,235,235,486,486,486,486,486,486,486,486,486,486,486,,486,486',
',,486,486,,235,,,235,,,235,235,,,235,,235,486,,486,235,486,486,,486',
'486,486,486,486,235,486,,,,235,235,235,235,,235,235,235,235,,,,,235',
'235,486,486,,,,,235,,235,235,235,,,235,235,1130,1130,1130,1130,1130',
'1130,,,,1130,1130,,,,1130,,1130,1130,1130,1130,1130,1130,1130,,,,,,1130',
'1130,1130,1130,1130,1130,1130,,,1130,,,,,,1130,1130,1130,1130,1130,1130',
'1130,1130,1130,1130,1130,1130,,1130,1130,1130,,1130,1130,1130,1130,1130',
'815,815,815,815,815,815,815,815,815,815,815,,815,815,,,815,815,,1130',
',,1130,,,1130,1130,,,1130,,1130,815,,815,1130,815,815,,815,815,815,815',
'815,1130,815,,,,1130,1130,1130,1130,,1130,1130,1130,1130,,,,,1130,1130',
',815,,,,,1130,,1130,1130,1130,,,1130,1130,798,798,798,798,798,798,,',
',798,798,,,,798,,798,798,798,798,798,798,798,,,,,,798,798,798,798,798',
'798,798,,,798,,,,,,798,798,798,798,798,798,798,798,798,798,798,798,',
'798,798,798,,798,798,798,798,798,465,465,465,465,465,465,465,465,465',
'465,465,,465,465,,,465,465,,798,,,798,,,798,798,,482,798,,798,465,,465',
'798,465,465,,465,465,465,465,465,798,465,,,,798,798,798,798,,798,798',
'798,798,,,482,,798,798,482,482,,482,482,,798,,798,798,798,,,798,798',
'210,210,210,210,210,210,,,,210,210,,,,210,,210,210,210,210,210,210,210',
',,,,,210,210,210,210,210,210,210,,,210,,,,,,210,210,210,210,210,210',
'210,210,210,210,210,210,,210,210,210,,210,210,210,210,210,327,327,327',
'327,327,327,327,327,327,327,327,,327,327,,,327,327,,210,,,210,,,210',
'210,,,210,,210,327,,327,210,327,327,,327,327,327,327,327,210,327,,,',
'210,210,210,210,,210,210,210,210,,,,,210,210,,1080,,1080,1080,1080,210',
'1080,210,210,210,,,210,210,588,588,588,588,588,588,,,,588,588,,,,588',
',588,588,588,588,588,588,588,1080,,,,,588,588,588,588,588,588,588,,',
'588,,,,,,588,588,588,588,588,588,588,588,588,588,588,588,,588,588,588',
',588,588,588,588,588,328,328,328,328,328,328,328,328,328,328,328,,328',
'328,,,328,328,,588,,,588,,,588,588,,,588,,588,328,,328,588,328,328,',
'328,328,328,328,328,588,328,,,,588,588,588,588,,588,588,588,588,,,,',
'588,588,,1079,,1079,1079,1079,588,1079,588,588,588,,,588,588,585,585',
'585,585,585,585,,,,585,585,,,,585,,585,585,585,585,585,585,585,1079',
',,,,585,585,585,585,585,585,585,,,585,,,,,,585,585,585,585,585,585,585',
'585,585,585,585,585,,585,585,585,,585,585,585,585,585,466,466,466,466',
'466,466,466,466,466,466,466,,466,466,,,466,466,,585,,,585,,,585,585',
',,585,,585,466,,466,585,466,466,,466,466,466,466,466,585,466,,,,585',
'585,585,585,,585,585,585,585,,,,,585,585,,,,,,,585,,585,585,585,,,585',
'585,784,784,784,784,784,784,,,,784,784,,,,784,,784,784,784,784,784,784',
'784,,,,,,784,784,784,784,784,784,784,,,784,,,,,,784,784,784,784,784',
'784,784,784,784,784,784,784,,784,784,784,,784,784,784,784,784,476,476',
'476,476,476,476,476,,,476,476,,,,,,476,476,,784,,,784,,,784,784,,,784',
',784,476,,476,784,476,476,,476,476,476,476,476,784,476,,,,784,784,784',
'784,,784,784,784,784,,,,,784,784,,,,,,,784,,784,784,784,,,784,784,788',
'788,788,788,788,788,,,,788,788,,,,788,,788,788,788,788,788,788,788,',
',,,,788,788,788,788,788,788,788,,,788,,,,,,788,788,788,788,788,788,788',
'788,788,788,788,788,,788,788,788,,788,788,788,788,788,477,477,477,477',
'477,477,477,,,477,477,,,,,,477,477,,788,,,788,,,788,788,,,788,,788,477',
',477,788,477,477,,477,477,477,477,477,788,477,,,,788,788,788,788,,788',
'788,788,788,,,,,788,788,,,,,,,788,,788,788,788,,,788,788,33,33,33,33',
'33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33',
',,33,,,,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33,,33,33,33,33',
'33,478,478,478,478,478,478,478,,,478,478,,,,,,478,478,,33,,,33,,,33',
'33,,,33,,33,478,,478,33,478,478,,478,478,478,478,478,33,478,,,,33,33',
'33,33,,33,33,33,33,,,,,33,33,,,,,,,33,,33,33,33,,,33,33,989,989,989',
'989,989,989,,,,989,989,,,,989,,989,989,989,989,989,989,989,,,,,,989',
'989,989,989,989,989,989,,,989,,,,,,989,989,989,989,989,989,989,989,989',
'989,989,989,,989,989,989,,989,989,989,989,989,479,479,479,479,479,479',
'479,,,479,479,,,,,,479,479,,989,,,989,,,989,989,,,989,,989,479,,479',
'989,479,479,,479,479,479,479,479,989,479,,,,989,989,989,989,,989,989',
'989,989,,,,,989,989,,,,,,,989,,989,989,989,,,989,989,127,127,127,127',
'127,127,,,,127,127,,,,127,,127,127,127,127,127,127,127,,,,,,127,127',
'127,127,127,127,127,,,127,,,,,,127,127,127,127,127,127,127,127,127,127',
'127,127,,127,127,127,,127,127,127,127,127,480,480,480,480,480,480,480',
',,480,480,,,,,,480,480,,127,,,127,,,127,127,,,127,,127,480,,480,127',
'480,480,,480,480,480,480,480,127,480,,,,127,127,127,127,,127,127,127',
'127,,,,,127,127,,,,,,,127,,127,127,127,,,127,127,919,919,919,919,919',
'919,,,,919,919,,,,919,,919,919,919,919,919,919,919,,,,,,919,919,919',
'919,919,919,919,,,919,,,,,,919,919,919,919,919,919,919,919,919,919,919',
'919,,919,919,919,,919,919,919,919,919,481,481,481,481,481,481,481,,',
'481,481,,,,,,481,481,,919,,,919,,,919,919,,,919,,919,481,,481,919,481',
'481,,481,481,481,481,481,919,481,,,,919,919,919,919,,919,919,919,919',
',,,,919,919,,,,,,,919,,919,919,919,,,919,919,964,964,964,964,964,964',
',,,964,964,,,,964,,964,964,964,964,964,964,964,,,,,,964,964,964,964',
'964,964,964,,,964,,,,,,964,964,964,964,964,964,964,964,964,964,964,964',
',964,964,964,,964,964,964,964,964,484,484,484,484,484,484,484,,,484',
'484,,,,,,484,484,,964,,,964,,,964,964,,,964,,964,484,,484,964,484,484',
',484,484,484,484,484,964,484,,,,964,964,964,964,,964,964,964,964,,,',
',964,964,,,,,,,964,,964,964,964,,,964,964,353,353,353,353,353,353,,',
',353,353,,,,353,,353,353,353,353,353,353,353,,,,,,353,353,353,353,353',
'353,353,,,353,,,,,,353,353,353,353,353,353,353,353,353,353,353,353,',
'353,353,353,,353,353,353,353,353,485,485,485,485,485,485,485,485,,485',
'485,,,,,,485,485,,353,,,353,,,353,353,,,353,,353,485,,485,353,485,485',
',485,485,485,485,485,353,485,,,,353,353,353,353,,353,353,353,353,,,',
',353,353,,,,,,,353,,353,353,353,,,353,353,982,982,982,982,982,982,,',
',982,982,,,,982,,982,982,982,982,982,982,982,,,,,,982,982,982,982,982',
'982,982,,,982,,,,,,982,982,982,982,982,982,982,982,982,982,982,982,',
'982,982,982,,982,982,982,982,982,487,,,,,,,,,,,,,,,,487,487,,982,,,982',
',,982,982,,,982,,982,487,,487,982,487,487,,487,487,,,487,982,487,,,',
'982,982,982,982,,982,982,982,982,,,,,982,982,,,,,,,982,,982,982,982',
',,982,982,352,352,352,352,352,352,,,,352,352,,,,352,,352,352,352,352',
'352,352,352,,,,,,352,352,352,352,352,352,352,,,352,,,,,,352,352,352',
'352,352,352,352,352,352,352,352,352,,352,352,352,,352,352,352,352,352',
'536,,,,,,,,,,,,,,,,536,536,,352,,,352,,,352,352,,,352,,352,536,,536',
'352,536,536,,536,536,,,536,352,536,,,,352,352,352,352,,352,352,352,352',
',,,,352,352,,,,,,,352,,352,352,352,,,352,352,335,335,335,335,335,335',
',,,335,335,,,,335,,335,335,335,335,335,335,335,,,,,,335,335,335,335',
'335,335,335,,,335,,,,,,335,335,335,335,335,335,335,335,335,335,335,335',
',335,335,335,,335,335,335,335,335,474,,,,,,,,,,,,,,,,474,474,,335,,',
'335,,,335,335,,,335,,335,474,,474,335,474,474,,474,474,,,,335,,,,,335',
'335,335,335,,335,335,335,335,,,,,335,335,,,,,,,335,,335,335,335,,,335',
'335,864,864,864,864,864,864,,,,864,864,,,,864,,864,864,864,864,864,864',
'864,,,,,,864,864,864,864,864,864,864,,,864,,,,,,864,864,864,864,864',
'864,864,864,864,864,864,864,,864,864,864,,864,864,864,864,864,473,,',
',,,,,,,,,,,,,473,473,,864,,,864,,,864,864,,,864,,864,473,,473,864,473',
'473,,473,473,,,,864,,,,,864,864,864,864,,864,864,864,864,,,,,864,864',
',,,,,,864,,864,864,864,,,864,864,609,609,609,609,609,609,,,,609,609',
',,,609,,609,609,609,609,609,609,609,,,,,,609,609,609,609,609,609,609',
',,609,,,,,,609,609,609,609,609,609,609,609,609,609,609,609,,609,609',
'609,,609,609,609,609,609,475,,,,,,,,,,,,,,,,475,475,,609,,,609,,,609',
'609,,,609,,609,475,,,609,475,475,,475,475,,,,609,,,,,609,609,609,609',
',609,609,609,609,,,,,609,609,,,,,,,609,,609,609,609,,,609,609,0,0,0',
'0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0',
'0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,0,,,0,,,0,0,,,0',
',0,,,,0,,,,,,,,,0,,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,,,239,239,239,0,239',
'0,0,0,239,239,0,0,,239,,239,239,239,239,239,239,239,,,,,,239,239,239',
'239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239',
'239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239',
',,239,,,,,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,',
'239,239,,,,730,730,730,239,730,239,239,239,730,730,239,239,,730,,730',
'730,730,730,730,730,730,,,,,,730,730,730,730,730,730,730,,,730,,,,,',
',730,,,730,730,730,730,730,730,730,730,,730,730,730,,730,730,730,730',
'730,,,,,,,,,,,,,,,,,,,,730,,,730,,,730,730,,,730,,730,,,,730,,,,,,,',
',730,,,,,730,730,730,730,,730,730,730,730,,,,,730,730,,,,711,711,711',
'730,711,730,730,730,711,711,730,730,,711,,711,711,711,711,711,711,711',
',,,,,711,711,711,711,711,711,711,,,711,,,,,,,711,,,711,711,711,711,711',
'711,711,711,,711,711,711,,711,711,711,711,711,,,,,,,,,,,,,,,,,,,,711',
',,711,,,711,711,,,711,,,,,,711,,,,,,,,,711,,,,,711,711,711,711,,711',
'711,711,711,,,,,711,711,,,,708,708,708,711,708,711,711,711,708,708,711',
'711,,708,,708,708,708,708,708,708,708,,,,,,708,708,708,708,708,708,708',
',,708,,,,,,,708,,,708,708,708,708,708,708,708,708,,708,708,708,,708',
'708,708,708,708,,,,,,,,,,,,,,,,,,,,708,,,708,,,708,708,,,708,,,,,,708',
',,,,,,,,708,,,,,708,708,708,708,,708,708,708,708,,,,,708,708,,,,20,20',
'20,708,20,708,708,708,20,20,708,708,,20,,20,20,20,20,20,20,20,,,,,,20',
'20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20',
',20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,',
',,,,20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,,,,20,,20,20,20,27',
',20,20,,,,27,27,27,,,27,27,27,,27,,,,,,,,27,27,27,27,,,,,,,,,27,27,',
'27,27,27,27,27,,,,,,,,,,,,,,,,,,,,,,,27,27,27,27,27,27,27,27,27,27,27',
'27,27,27,,,27,27,27,,,27,,27,27,,,27,27,,27,,27,,27,,27,27,,27,27,27',
'27,27,28,27,27,27,,,,28,28,28,,,28,28,28,,28,27,,,27,27,,27,28,27,28',
'28,,,,,27,,,,28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28',
',28,,28,28,,28,28,28,28,28,,28,,28,,,,,,,,,,,,,,28,,,28,28,,28,,28,29',
'29,29,,29,,28,,29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29',
'29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29',
'29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,',
'29,,,,,29,29,29,29,,29,29,29,29,,,,,29,29,,,,30,30,30,29,30,29,29,29',
'30,30,29,29,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30',
',,,,,,30,,,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,',
',,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30',
'30,30,,30,30,30,30,,,,,30,30,,,,31,31,31,30,31,30,30,30,31,31,30,30',
',31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,',
'31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,',
',,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31',
'31,31,31,,,,,31,31,,,,41,41,41,31,41,31,31,31,41,41,31,31,,41,,41,41',
'41,41,41,41,41,,,,,,41,41,41,41,41,41,41,,,41,,,,,,,41,,,41,41,41,41',
'41,41,41,41,,41,41,41,,41,41,41,41,41,,,,,,,,,,,,,,,,,,,,41,,,41,,,41',
'41,,,41,,,,,,41,,,,,,,,,41,,,,,41,41,41,41,,41,41,41,41,,,,,41,41,,',
',42,42,42,41,42,41,41,41,42,42,41,41,,42,,42,42,42,42,42,42,42,,,,,',
'42,42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42',
'42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,',
',,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,,,44,44,44,42,44,42',
'42,42,44,44,42,42,,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44',
',,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44,44,44,44,,',
',,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44,44',
'44,,44,44,44,44,,,,,44,44,,,,45,45,45,44,45,44,44,44,45,45,44,44,,45',
',45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45',
'45,45,45,45,45,45,,45,45,45,,45,45,45,45,45,,,,,,,,,,,,,,,,,,,,45,,',
'45,,,45,45,,,45,,,,,,45,,,,,,,,,45,,,,,45,45,45,45,,45,45,45,45,,,,',
'45,45,,,,47,47,47,45,47,45,45,45,47,47,45,45,,47,,47,47,47,47,47,47',
'47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47',
',47,47,47,,47,47,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,',
',,,47,,,,,,,,,47,,,,,47,47,47,47,,47,47,47,47,,,,,47,47,,,,,,,47,,47',
'47,47,59,,47,47,,,,59,59,59,,,59,59,59,,59,,,,,,,,59,,59,59,59,,,,847',
'847,847,847,59,59,,59,59,59,59,59,,,,,847,847,847,,,,,,,,,,,847,847',
',,847,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,,59,,,59',
',,59,59,,59,,59,,59,,59,59,,59,59,59,59,59,,59,,59,,847,847,847,847',
',847,847,847,847,,,,59,847,847,59,59,59,59,,59,847,59,847,847,847,,59',
'61,61,61,61,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61,61',
'61,61,61,,,61,,,,,,61,61,,61,61,61,61,61,61,61,61,61,,61,61,61,,61,61',
'61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,61,,,,61,,,,,,,,,61',
',,,,61,61,61,61,,61,61,61,61,,,,,61,61,,,,62,62,62,61,62,61,61,61,62',
'62,61,61,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,',
',,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,62,62,62,,,,,,,',
',,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,62,,,,,,62,,,,,62,62,62',
'62,,62,62,62,62,,,,,62,62,,,,63,63,63,62,63,62,62,62,63,63,62,62,,63',
',63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63',
'63,63,63,63,63,63,63,63,63,63,,63,63,63,63,63,,,,,,,,,,,,,,,,,,,,63',
',,63,,,63,63,,,63,,,,,,63,,,63,,,,,,63,,,,,63,63,63,63,,63,63,63,63',
',,,,63,63,,,,66,66,66,63,66,63,63,63,66,66,63,63,,66,,66,66,66,66,66',
'66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66',
'66,,66,66,66,,66,66,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66',
',,,,,66,,,,,,,,,66,,,,,66,66,66,66,,66,66,66,66,,,,,66,66,,,,67,67,67',
'66,67,66,66,66,67,67,66,66,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67',
'67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,67',
'67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,',
',67,67,67,67,,67,67,67,67,,,,,67,67,,,,70,70,70,67,70,67,67,67,70,70',
'67,67,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,',
',70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,70,70,70,,,,,,,,,,,,',
',,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,,70,,,,,70,70,70,70,,70,70',
'70,70,,,,,70,70,70,,,,,70,70,,70,70,70,,,70,70,116,116,116,116,116,',
',,116,116,,,,116,,116,116,116,116,116,116,116,,,,,,116,116,116,116,116',
'116,116,,,116,,,,,,116,116,116,116,116,116,116,116,116,116,116,116,',
'116,116,116,,116,116,116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116',
'116,,,116,,116,,,,116,,,,,,,,,116,,,,,116,116,116,116,,116,116,116,116',
',,,,116,116,,,,,,116,116,,116,116,116,,,116,116,121,121,121,,121,,,',
'121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121',
'121,121,,,121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121',
',121,121,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,',
',,,121,,,,,,,,,121,,,,,121,121,121,121,,121,121,121,121,,,,,121,121',
',,,122,122,122,121,122,121,121,121,122,122,121,121,,122,,122,122,122',
'122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,,122,,,122',
'122,122,122,122,122,122,122,,122,122,122,,122,122,122,122,122,,,,,,',
',,,,,,,,,,,,,122,,,122,,,122,122,,,122,,,,,,122,,,,,,,,,122,,,,,122',
'122,122,122,,122,122,122,122,,,,,122,122,,,,123,123,123,122,123,122',
'122,122,123,123,122,122,,123,,123,123,123,123,123,123,123,,,,,,123,123',
'123,123,123,123,123,,,123,,,,,,,123,,,123,123,123,123,123,123,123,123',
',123,123,123,,123,123,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123',
'123,,,123,,,,,,123,,,,,,,,,123,,,,,123,123,123,123,,123,123,123,123',
',,,,123,123,,,,124,124,124,123,124,123,123,123,124,124,123,123,,124',
',124,124,124,124,124,124,124,,,,,,124,124,124,124,124,124,124,,,124',
',,,,,,124,,,124,124,124,124,124,124,124,124,,124,124,124,,124,124,124',
'124,124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124,124,,,124,,,,,,124,,,,,,',
',,124,,,,,124,124,124,124,,124,124,124,124,,,,,124,124,,,,,,,124,,124',
'124,124,,,124,124,125,125,125,125,125,,,,125,125,,,,125,,125,125,125',
'125,125,125,125,,,,,,125,125,125,125,125,125,125,,,125,,,,,,125,125',
',125,125,125,125,125,125,125,125,125,,125,125,125,,125,125,125,125,125',
',,,,,,,,,,,,,,,,,,,125,,,125,,,125,125,,,125,,125,,,,125,,,,,,,,,125',
',,,,125,125,125,125,,125,125,125,125,,,,,125,125,,,,1115,1115,1115,125',
'1115,125,125,125,1115,1115,125,125,,1115,,1115,1115,1115,1115,1115,1115',
'1115,,,,,,1115,1115,1115,1115,1115,1115,1115,,,1115,,,,,,,1115,,,1115',
'1115,1115,1115,1115,1115,1115,1115,1115,1115,1115,1115,,1115,1115,1115',
'1115,1115,,,,,,,,,,,,,,,,,,,,1115,,,1115,,,1115,1115,,,1115,,1115,,1115',
',1115,,,1115,,,,,,1115,,,,,1115,1115,1115,1115,,1115,1115,1115,1115',
',,,,1115,1115,,,,211,211,211,1115,211,1115,1115,1115,211,211,1115,1115',
',211,,211,211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,',
',211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211',
'211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,211,,,,211',
',,,,,,,,211,,,,,211,211,211,211,,211,211,211,211,,,,,211,211,,,,212',
'212,212,211,212,211,211,211,212,212,211,211,,212,,212,212,212,212,212',
'212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212',
'212,212,212,212,212,,212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,',
',,,,,212,,,212,,,212,212,,,212,,212,,,,212,,,,,,,,,212,,,,,212,212,212',
'212,,212,212,212,212,,,,,212,212,,,,213,213,213,212,213,212,212,212',
'213,213,212,212,,213,,213,213,213,213,213,213,213,,,,,,213,213,213,213',
'213,213,213,,,213,,,,,,,213,,,213,213,213,213,213,213,213,213,,213,213',
'213,,213,213,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213',
',,,,,213,,,,,,,,,213,,,,,213,213,213,213,,213,213,213,213,,,,,213,213',
',,,214,214,214,213,214,213,213,213,214,214,213,213,,214,,214,214,214',
'214,214,214,214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214',
'214,214,214,214,214,214,214,,214,214,214,,214,214,214,214,214,,,,,,',
',,,,,,,,,,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214',
'214,214,214,,214,214,214,214,,,,,214,214,,,,215,215,215,214,215,214',
'214,214,215,215,214,214,,215,,215,215,215,215,215,215,215,,,,,,215,215',
'215,215,215,215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215',
',215,215,215,,215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215',
'215,,,215,,,,,,215,,,,,,,,,215,,,,,215,215,215,215,,215,215,215,215',
',,,,215,215,,,,216,216,216,215,216,215,215,215,216,216,215,215,,216',
',216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,,216',
',,,,,,216,,,216,216,216,216,216,216,216,216,216,216,216,216,,216,216',
'216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,216,,216,',
'216,,,216,,,,,,216,,,,,216,216,216,216,,216,216,216,216,,,,,216,216',
',,,221,221,221,216,221,216,216,216,221,221,216,216,,221,,221,221,221',
'221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221',
'221,221,221,221,221,221,221,,221,221,221,,221,221,221,221,221,,,,,,',
',,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,,221,,,,,221',
'221,221,221,,221,221,221,221,,,,,221,221,,,,222,222,222,221,222,221',
'221,221,222,222,221,221,,222,,222,222,222,222,222,222,222,,,,,,222,222',
'222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222',
',222,222,222,,222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222',
'222,,,222,,,,,,222,,,,,,,,,222,,,,,222,222,222,222,,222,222,222,222',
',,,,222,222,,,,223,223,223,222,223,222,222,222,223,223,222,222,,223',
',223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223',
',,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,,223,223,223',
'223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,',
',,223,,,,,223,223,223,223,,223,223,223,223,,,,,223,223,223,,,234,234',
'234,223,234,223,223,223,234,234,223,223,,234,,234,234,234,234,234,234',
'234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234',
'234,234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,',
',234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234,234',
',234,234,234,234,,,,,234,234,,,,238,238,238,234,238,234,234,234,238',
'238,234,234,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238',
'238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238',
',238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,',
',,,238,,,,,,,,,238,,,,,238,238,238,238,,238,238,238,238,,,,,238,238',
',,,240,240,240,238,240,238,238,238,240,240,238,238,,240,,240,240,240',
'240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240',
'240,240,240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,',
',,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240',
'240,240,240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240',
'240,240,241,241,240,240,,241,,241,241,241,241,241,241,241,,,,,,241,241',
'241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241',
',241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241',
'241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241',
',,,,241,241,,,,242,242,242,241,242,241,241,241,242,242,241,241,,242',
',242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242',
',,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242',
'242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,',
',,242,,,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,243,243,243',
'242,243,242,242,242,243,243,242,242,,243,,243,243,243,243,243,243,243',
',,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243',
'243,243,243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243',
',,243,,,243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243',
'243,243,243,,,,,243,243,,,,244,244,244,243,244,243,243,243,244,244,243',
'243,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244',
',,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,,244',
'244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244',
',,,,,,,,244,,,,,244,244,244,244,,244,244,244,244,,,,,244,244,,,,245',
'245,245,244,245,244,244,244,245,245,244,244,,245,,245,245,245,245,245',
'245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245',
'245,245,245,245,245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,',
',,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245',
'245,,245,245,245,245,,,,,245,245,,,,246,246,246,245,246,245,245,245',
'246,246,245,245,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246',
'246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246',
'246,,246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246',
',,,,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246',
',,,247,247,247,246,247,246,246,246,247,247,246,246,,247,,247,247,247',
'247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247',
'247,247,247,247,247,247,247,,247,247,247,,247,247,247,247,247,,,,,,',
',,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247',
'247,247,247,,247,247,247,247,,,,,247,247,,,,248,248,248,247,248,247',
'247,247,248,248,247,247,,248,,248,248,248,248,248,248,248,,,,,,248,248',
'248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248',
',248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248',
'248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248,248',
',,,,248,248,,,,249,249,249,248,249,248,248,248,249,249,248,248,,249',
',249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249',
',,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,249',
'249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,',
',,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249,,,,250,250,250',
'249,250,249,249,249,250,250,249,249,,250,,250,250,250,250,250,250,250',
',,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250',
'250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250',
',,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250',
'250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250,251,251,250',
'250,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251',
',,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251',
'251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251',
',,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251,,,,252',
'252,252,251,252,251,251,251,252,252,251,251,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,',
',,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252',
'252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252',
'253,253,252,252,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253',
'253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253',
'253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253',
',,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253',
',,,254,254,254,253,254,253,253,253,254,254,253,253,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,',
',,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254',
'254,254,254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254',
'254,254,255,255,254,254,,255,,255,255,255,255,255,255,255,,,,,,255,255',
'255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255',
',255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255',
'255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255',
',,,,255,255,,,,256,256,256,255,256,255,255,255,256,256,255,255,,256',
',256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256',
',,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,256',
'256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,',
',,256,,,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,257,257,257',
'256,257,256,256,256,257,257,256,256,,257,,257,257,257,257,257,257,257',
',,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257',
'257,257,257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257',
',,257,,,257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257',
'257,257,257,,,,,257,257,,,,258,258,258,257,258,257,257,257,258,258,257',
'257,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258',
',,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258',
'258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258',
',,,,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,259',
'259,259,258,259,258,258,258,259,259,258,258,,259,,259,259,259,259,259',
'259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259',
'259,259,259,259,259,,259,259,259,,259,259,259,259,259,,,,,,,,,,,,,,',
',,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,,259,,,,,259,259,259',
'259,,259,259,259,259,,,,,259,259,,,,264,264,264,259,264,259,259,259',
'264,264,259,259,,264,,264,264,264,264,264,264,264,,,,,,264,264,264,264',
'264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264,264',
'264,,264,264,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264',
',,,,,264,,,,,,,,,264,,,,,264,264,264,264,,264,264,264,264,,,,,264,264',
',,,271,271,271,264,271,264,264,264,271,271,264,264,,271,,271,271,271',
'271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271',
'271,271,271,271,271,271,271,271,271,271,271,,271,271,271,271,271,,,',
',,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,271,,271,,271,,,271,,,,,',
'271,,,,,271,271,271,271,,271,271,271,271,,,,,271,271,,,,272,272,272',
'271,272,271,271,271,272,272,271,271,,272,,272,272,272,272,272,272,272',
',,,,,272,272,272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272',
'272,272,272,272,272,272,272,,272,272,272,272,272,,,,,,,,,,,,,,,,,,,',
'272,,,272,,,272,272,,,272,,272,,272,,272,,,272,,,,,,272,,,,,272,272',
'272,272,,272,272,272,272,,,,,272,272,,,,280,280,280,272,280,272,272',
'272,280,280,272,272,,280,,280,280,280,280,280,280,280,,,,,,280,280,280',
'280,280,280,280,,,280,,,,,,,280,,,280,280,280,280,280,280,280,280,280',
'280,280,280,,280,280,280,280,280,,,,,,,,,,,,,,,,,,,,280,,,280,,,280',
'280,,,280,,280,,280,,280,,,280,,,,,,280,,,,,280,280,280,280,,280,280',
'280,280,,,,,280,280,280,,,1084,1084,1084,280,1084,280,280,280,1084,1084',
'280,280,,1084,,1084,1084,1084,1084,1084,1084,1084,,,,,,1084,1084,1084',
'1084,1084,1084,1084,,,1084,,,,,,,1084,,,1084,1084,1084,1084,1084,1084',
'1084,1084,,1084,1084,1084,,1084,1084,1084,1084,1084,,,,,,,,,,,,,,,,',
',,,1084,,,1084,,,1084,1084,,,1084,,,,,,1084,,,,,,,,,1084,,,,,1084,1084',
'1084,1084,,1084,1084,1084,1084,,,,,1084,1084,,,,1083,1083,1083,1084',
'1083,1084,1084,1084,1083,1083,1084,1084,,1083,,1083,1083,1083,1083,1083',
'1083,1083,,,,,,1083,1083,1083,1083,1083,1083,1083,,,1083,,,,,,,1083',
',,1083,1083,1083,1083,1083,1083,1083,1083,,1083,1083,1083,,1083,1083',
'1083,1083,1083,,,,,,,,,,,,,,,,,,,,1083,,,1083,,,1083,1083,,,1083,,,',
',,1083,,,,,,,,,1083,,,,,1083,1083,1083,1083,,1083,1083,1083,1083,,,',
',1083,1083,,,,287,287,287,1083,287,1083,1083,1083,287,287,1083,1083',
',287,,287,287,287,287,287,287,287,,,,,,287,287,287,287,287,287,287,',
',287,,,,,,,287,,,287,287,287,287,287,287,287,287,,287,287,287,,287,287',
'287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287,,',
',,,,,,287,,,,,287,287,287,287,,287,287,287,287,,,,,287,287,,,,289,289',
'289,287,289,287,287,287,289,289,287,287,,289,,289,289,289,289,289,289',
'289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289,,,289,289,289,289',
'289,289,289,289,,289,289,289,,289,289,289,289,289,,,,,,,,,,,,,,,,,,',
',289,,,289,,,289,289,,,289,,,,,,289,,,,,,,,,289,,,,,289,289,289,289',
',289,289,289,289,,,,,289,289,,,,292,292,292,289,292,289,289,289,292',
'292,289,289,,292,,292,292,292,292,292,292,292,,,,,,292,292,292,292,292',
'292,292,,,292,,,,,,,292,,,292,292,292,292,292,292,292,292,,292,292,292',
',292,292,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292,,',
',,,292,,,,,,,,,292,,,,,292,292,292,292,,292,292,292,292,,,,,292,292',
',,,293,293,293,292,293,292,292,292,293,293,292,292,,293,,293,293,293',
'293,293,293,293,,,,,,293,293,293,293,293,293,293,,,293,,,,,,,293,,,293',
'293,293,293,293,293,293,293,,293,293,293,,293,293,293,293,293,,,,,,',
',,,,,,,,,,,,,293,,,293,,,293,293,,,293,,,,,,293,,,,,,,,,293,,,,,293',
'293,293,293,,293,293,293,293,,,,,293,293,,,,,,,293,,293,293,293,,,293',
'293,298,298,298,298,298,,,,298,298,,,,298,,298,298,298,298,298,298,298',
',,,,,298,298,298,298,298,298,298,,,298,,,,,,298,298,,298,298,298,298',
'298,298,298,298,298,,298,298,298,,298,298,298,298,298,,,,,,,,,,,,,,',
',,,,,298,,,298,,,298,298,,,298,,298,,,,298,,,,,,,,,298,,,,,298,298,298',
'298,,298,298,298,298,,,,,298,298,,,,332,332,332,298,332,298,298,298',
'332,332,298,298,,332,,332,332,332,332,332,332,332,,,,,,332,332,332,332',
'332,332,332,,,332,,,,,,,332,,,332,332,332,332,332,332,332,332,,332,332',
'332,,332,332,332,332,332,,,,,,,,,,,,,,,,,,,,332,,,332,,,332,332,,,332',
',,,,,332,,,,,,,,,332,,,,,332,332,332,332,,332,332,332,332,,,,,332,332',
',,,334,334,334,332,334,332,332,332,334,334,332,332,,334,,334,334,334',
'334,334,334,334,,,,,,334,334,334,334,334,334,334,,,334,,,,,,,334,,,334',
'334,334,334,334,334,334,334,,334,334,334,,334,334,334,334,334,,,,,,',
',,,,,,,,,,,,,334,,,334,334,,334,334,,,334,,,,,,334,,,,,,,,,334,,,,,334',
'334,334,334,,334,334,334,334,,,,,334,334,,,,351,351,351,334,351,334',
'334,334,351,351,334,334,,351,,351,351,351,351,351,351,351,,,,,,351,351',
'351,351,351,351,351,,,351,,,,,,,351,,,351,351,351,351,351,351,351,351',
',351,351,351,,351,351,351,351,351,,,,,,,,,,,,,,,,,,,,351,,,351,,,351',
'351,,,351,,,,,,351,,,,,,,,,351,,,,,351,351,351,351,,351,351,351,351',
',,,,351,351,,,,372,372,372,351,372,351,351,351,372,372,351,351,,372',
',372,372,372,372,372,372,372,,,,,,372,372,372,372,372,372,372,,,372',
',,,,,,372,,,372,372,372,372,372,372,372,372,,372,372,372,,372,372,372',
'372,372,,,,,,,,,,,,,,,,,,,,372,,,372,,,372,372,,,372,,,,,,372,,,,,,',
',,372,,,,,372,372,372,372,,372,372,372,372,,,,,372,372,,,,388,388,388',
'372,388,372,372,372,388,388,372,372,,388,,388,388,388,388,388,388,388',
',,,,,388,388,388,388,388,388,388,,,388,,,,,,,388,,,388,388,388,388,388',
'388,388,388,,388,388,388,,388,388,388,388,388,,,,,,,,,,,,,,,,,,,,388',
',,388,,,388,388,,,388,,,,,,388,,,,,,,,,388,,,,,388,388,388,388,,388',
'388,388,388,,,,,388,388,,,,416,416,416,388,416,388,388,388,416,416,388',
'388,,416,,416,416,416,416,416,416,416,,,,,,416,416,416,416,416,416,416',
',,416,,,,,,,416,,,416,416,416,416,416,416,416,416,,416,416,416,,416',
'416,416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416,,,,,,416',
',,,,,,,,416,,,,,416,416,416,416,,416,416,416,416,,,,,416,416,,,,933',
'933,933,416,933,416,416,416,933,933,416,416,,933,,933,933,933,933,933',
'933,933,,,,,,933,933,933,933,933,933,933,,,933,,,,,,,933,,,933,933,933',
'933,933,933,933,933,,933,933,933,,933,933,933,933,933,,,,,,,,,,,,,,',
',,,,,933,,,933,,,933,933,,,933,,,,,,933,,,,,,,,,933,,,,,933,933,933',
'933,,933,933,933,933,,,,,933,933,,,,932,932,932,933,932,933,933,933',
'932,932,933,933,,932,,932,932,932,932,932,932,932,,,,,,932,932,932,932',
'932,932,932,,,932,,,,,,,932,,,932,932,932,932,932,932,932,932,932,932',
'932,932,,932,932,932,932,932,,,,,,,,,,,,,,,,,,,,932,,,932,,,932,932',
',,932,,,,932,,932,,,932,,,,,,932,,,,,932,932,932,932,,932,932,932,932',
',,,,932,932,,,,,,,932,,932,932,932,440,,932,932,,,,440,440,440,,,440',
'440,440,,440,,,,,,,,440,440,440,440,,,,,,,,,440,440,,440,440,440,440',
'440,,,,,,,,,,,,,,,,,,,,,,,440,440,440,440,440,440,440,440,440,440,440',
'440,440,440,,,440,440,440,,,440,,440,440,,,440,440,,440,,440,,440,,440',
'440,,440,440,440,440,440,,440,440,440,1123,,1123,1123,1123,1123,1123',
',,,,,,440,,1123,440,440,449,440,,440,,,,449,449,449,440,,449,449,449',
',449,,,1123,,,,,449,449,449,449,449,,1123,1123,,,,1123,449,449,,449',
'449,449,449,449,,,,,,,,,,,,,,,,,,,,,,,449,449,449,449,449,449,449,449',
'449,449,449,449,449,449,,,449,449,449,,,449,,,449,,,449,449,,449,,449',
',449,,449,449,,449,449,449,449,449,,449,449,449,,,,,,,,,,,,,,449,,,449',
'449,449,449,,449,450,449,,,,,449,450,450,450,,,450,450,450,,450,,,,',
',,,450,450,450,450,450,,,,,,,,450,450,,450,450,450,450,450,,,,,,,,,',
',,,,,,,,,,,,,450,450,450,450,450,450,450,450,450,450,450,450,450,450',
',,450,450,450,,,450,,,450,,,450,450,,450,,450,,450,,450,450,,450,450',
'450,450,450,,450,450,450,,,,,,,,,,,,,,450,,,450,450,450,450,,450,,450',
',912,912,912,450,912,,,,912,912,,,,912,,912,912,912,912,912,912,912',
',,,,,912,912,912,912,912,912,912,,,912,,,,,,,912,,,912,912,912,912,912',
'912,912,912,,912,912,912,,912,912,912,912,912,,,,,,,,,,,,,,,,,,,,912',
',,912,,,912,912,,,912,,912,,,,912,,,,,,,,,912,,,,,912,912,912,912,,912',
'912,912,912,,,,,912,912,,,,459,459,459,912,459,912,912,912,459,459,912',
'912,,459,,459,459,459,459,459,459,459,,,,,,459,459,459,459,459,459,459',
',,459,,,,,,,459,,,459,459,459,459,459,459,459,459,459,459,459,459,,459',
'459,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459,,,459,459,,,459,,459,,459',
',459,,,459,,,,,,459,,,,,459,459,459,459,,459,459,459,459,,,,,459,459',
',,,461,461,461,459,461,459,459,459,461,461,459,459,,461,,461,461,461',
'461,461,461,461,,,,,,461,461,461,461,461,461,461,,,461,,,,,,,461,,,461',
'461,461,461,461,461,461,461,,461,461,461,,461,461,461,461,461,,,,,,',
',,,,,,,,,,,,,461,,,461,,,461,461,,,461,,,,,,461,,,,,,,,,461,,,,,461',
'461,461,461,,461,461,461,461,,,,,461,461,,,,462,462,462,461,462,461',
'461,461,462,462,461,461,,462,,462,462,462,462,462,462,462,,,,,,462,462',
'462,462,462,462,462,,,462,,,,,,,462,,,462,462,462,462,462,462,462,462',
',462,462,462,,462,462,462,462,462,,,,,,,,,,,,,,,,,,,,462,,,462,,,462',
'462,,,462,,,,,,462,,,,,,,,,462,,,,,462,462,462,462,,462,462,462,462',
',,,,462,462,,,,463,463,463,462,463,462,462,462,463,463,462,462,,463',
',463,463,463,463,463,463,463,,,,,,463,463,463,463,463,463,463,,,463',
',,,,,,463,,,463,463,463,463,463,463,463,463,,463,463,463,,463,463,463',
'463,463,,,,,,,,,,,,,,,,,,,,463,,,463,,,463,463,,,463,,,,,,463,,,,,,',
',,463,,,,,463,463,463,463,,463,463,463,463,,,,,463,463,,,,,,,463,,463',
'463,463,,,463,463,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5',
'5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,',
',,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5',
'5,,,,907,907,907,5,907,5,5,5,907,907,5,5,,907,,907,907,907,907,907,907',
'907,,,,,,907,907,907,907,907,907,907,,,907,,,,,,,907,,,907,907,907,907',
'907,907,907,907,,907,907,907,,907,907,907,907,907,,,,,,,,,,,,,,,,,,',
',907,,,907,,,907,907,,,907,,,,,,907,,,,,,,,,907,,,,,907,907,907,907',
',907,907,907,907,,,,,907,907,,,,855,855,855,907,855,907,907,907,855',
'855,907,907,,855,,855,855,855,855,855,855,855,,,,,,855,855,855,855,855',
'855,855,,,855,,,,,,,855,,,855,855,855,855,855,855,855,855,,855,855,855',
',855,855,855,855,855,,,,,,,,,,,,,,,,,,,,855,,,855,,,855,855,,,855,,',
',,,855,,,,,,,,,855,,,,,855,855,855,855,,855,855,855,855,,,,,855,855',
',,,,,,855,,855,855,855,489,,855,855,,,,489,489,489,,,489,489,489,863',
'489,863,863,863,863,863,,,489,489,489,,,,863,,,,,,489,489,,489,489,489',
'489,489,997,,997,997,997,997,997,746,863,746,746,746,746,746,,997,,863',
'863,863,863,,746,,863,,790,,790,790,790,790,790,489,,,,997,,,489,790',
',,746,489,489,,997,997,863,,,997,,746,746,,,,746,,,790,,,,,489,489,',
',790,790,790,790,,,,790,,,,489,,,489,,494,494,494,489,494,,,,494,494',
'489,,,494,,494,494,494,494,494,494,494,,,,,,494,494,494,494,494,494',
'494,,,494,,,,,,,494,,,494,494,494,494,494,494,494,494,,494,494,494,',
'494,494,494,494,494,,,,,,,,,,,,,,,,,,,,494,,,494,,,494,494,,,494,,,',
',,494,,,,,,,,,494,,,,,494,494,494,494,,494,494,494,494,,,,,494,494,',
',,503,503,503,494,503,494,494,494,503,503,494,494,,503,,503,503,503',
'503,503,503,503,,,,,,503,503,503,503,503,503,503,,,503,,,,,,,503,,,503',
'503,503,503,503,503,503,503,503,503,503,503,,503,503,503,503,503,,,',
',,,,,,,,,,,,,,,,503,,,503,,,503,503,,,503,,503,,503,,503,,,503,,,,,',
'503,,,,,503,503,503,503,,503,503,503,503,,,,,503,503,,,,505,505,505',
'503,505,503,503,503,505,505,503,503,,505,,505,505,505,505,505,505,505',
',,,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505,505,505,505',
'505,505,505,505,505,505,505,,505,505,505,505,505,,,,,,,,,,,,,,,,,,,',
'505,,,505,,,505,505,,,505,,,,505,,505,,,505,,,,,,505,,,,,505,505,505',
'505,,505,505,505,505,,,,,505,505,,,,507,507,507,505,507,505,505,505',
'507,507,505,505,,507,,507,507,507,507,507,507,507,,,,,,507,507,507,507',
'507,507,507,,,507,,,,,,,507,,,507,507,507,507,507,507,507,507,,507,507',
'507,,507,507,507,507,507,,,,,,,,,,,,,,,,,,,,507,,,507,,,507,507,,,507',
',,,,,507,,,,,,,,,507,,,,,507,507,507,507,,507,507,507,507,,,,,507,507',
',,,,,,507,,507,507,507,,,507,507,513,513,513,513,513,,,,513,513,,,,513',
',513,513,513,513,513,513,513,,,,,,513,513,513,513,513,513,513,,,513',
',,,,,513,513,513,513,513,513,513,513,513,513,513,513,,513,513,513,,513',
'513,513,513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513,,,513,,513,,',
',513,,,,,,,,,513,,,,,513,513,513,513,,513,513,513,513,,,,,513,513,,',
',,,513,513,,513,513,513,,,513,513,832,832,832,,832,,,,832,832,,,,832',
',832,832,832,832,832,832,832,,,,,,832,832,832,832,832,832,832,,,832',
',,,,,,832,,,832,832,832,832,832,832,832,832,,832,832,832,,832,832,832',
'832,832,,,,,,,,,,,,,,,,,,,,832,,,832,,,832,832,,,832,,,,,,832,,,,,,',
',,832,,,,,832,832,832,832,,832,832,832,832,,,,,832,832,,,,831,831,831',
'832,831,832,832,832,831,831,832,832,,831,,831,831,831,831,831,831,831',
',,,,,831,831,831,831,831,831,831,,,831,,,,,,,831,,,831,831,831,831,831',
'831,831,831,,831,831,831,,831,831,831,831,831,,,,,,,,,,,,,,,,,,,,831',
',,831,,,831,831,,,831,,,,,,831,,,,,,,,,831,,,,,831,831,831,831,,831',
'831,831,831,,,,,831,831,,,,523,523,523,831,523,831,831,831,523,523,831',
'831,,523,,523,523,523,523,523,523,523,,,,,,523,523,523,523,523,523,523',
',,523,,,,,,,523,,,523,523,523,523,523,523,523,523,523,523,523,523,,523',
'523,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523,523,,,523,,523,,523',
',523,,,523,,,,,,523,,,,,523,523,523,523,,523,523,523,523,,,,,523,523',
',,,830,830,830,523,830,523,523,523,830,830,523,523,,830,,830,830,830',
'830,830,830,830,,,,,,830,830,830,830,830,830,830,,,830,,,,,,,830,,,830',
'830,830,830,830,830,830,830,,830,830,830,,830,830,830,830,830,,,,,,',
',,,,,,,,,,,,,830,,,830,,,830,830,,,830,,,,,,830,,,,,,,,,830,,,,,830',
'830,830,830,,830,830,830,830,,,,,830,830,,,,829,829,829,830,829,830',
'830,830,829,829,830,830,,829,,829,829,829,829,829,829,829,,,,,,829,829',
'829,829,829,829,829,,,829,,,,,,,829,,,829,829,829,829,829,829,829,829',
',829,829,829,,829,829,829,829,829,,,,,,,,,,,,,,,,,,,,829,,,829,,,829',
'829,,,829,,,,,,829,,,,,,,,,829,,,,,829,829,829,829,,829,829,829,829',
',,,,829,829,,,,532,532,532,829,532,829,829,829,532,532,829,829,,532',
',532,532,532,532,532,532,532,,,,,,532,532,532,532,532,532,532,,,532',
',,,,,,532,,,532,532,532,532,532,532,532,532,,532,532,532,,532,532,532',
'532,532,,,,,,,,,,,,,,,,,,,,532,,,532,,,532,532,,,532,,,,,,532,,,,,,',
',,532,,,,,532,532,532,532,,532,532,532,532,,,,,532,532,,,,535,535,535',
'532,535,532,532,532,535,535,532,532,,535,,535,535,535,535,535,535,535',
',,,,,535,535,535,535,535,535,535,,,535,,,,,,,535,,,535,535,535,535,535',
'535,535,535,,535,535,535,,535,535,535,535,535,,,,,,,,,,,,,,,,,,,,535',
',,535,,,535,535,,,535,,,,,,535,,,,,,,,,535,,,,,535,535,535,535,,535',
'535,535,535,,,,,535,535,,,,538,538,538,535,538,535,535,535,538,538,535',
'535,,538,,538,538,538,538,538,538,538,,,,,,538,538,538,538,538,538,538',
',,538,,,,,,,538,,,538,538,538,538,538,538,538,538,,538,538,538,,538',
'538,538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538,,,538,,,,,,538',
',,,,,,,,538,,,,,538,538,538,538,,538,538,538,538,,,,,538,538,,,,816',
'816,816,538,816,538,538,538,816,816,538,538,,816,,816,816,816,816,816',
'816,816,,,,,,816,816,816,816,816,816,816,,,816,,,,,,,816,,,816,816,816',
'816,816,816,816,816,,816,816,816,,816,816,816,816,816,,,,,,,,,,,,,,',
',,,,,816,,,816,,,816,816,,,816,,,,,,816,,,,,,,,,816,,,,,816,816,816',
'816,,816,816,816,816,,,,,816,816,,,,544,544,544,816,544,816,816,816',
'544,544,816,816,,544,,544,544,544,544,544,544,544,,,,,,544,544,544,544',
'544,544,544,,,544,,,,,,,544,,,544,544,544,544,544,544,544,544,544,544',
'544,544,,544,544,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544',
',,544,,544,,,,544,,,544,,,,,,544,,,,,544,544,544,544,,544,544,544,544',
',,,,544,544,,,,547,547,547,544,547,544,544,544,547,547,544,544,,547',
',547,547,547,547,547,547,547,,,,,,547,547,547,547,547,547,547,,,547',
',,,,,,547,,,547,547,547,547,547,547,547,547,547,547,547,547,,547,547',
'547,547,547,,,,,,,,,,,,,,,,,,,,547,,,547,,,547,547,,,547,,,,,,547,,',
'547,,,,,,547,,,,,547,547,547,547,,547,547,547,547,,,,,547,547,,,,808',
'808,808,547,808,547,547,547,808,808,547,547,,808,,808,808,808,808,808',
'808,808,,,,,,808,808,808,808,808,808,808,,,808,,,,,,,808,,,808,808,808',
'808,808,808,808,808,,808,808,808,,808,808,808,808,808,,,,,,,,,,,,,,',
',,,,,808,,,808,,,808,808,,,808,,,,,,808,,,,,,,,,808,,,,,808,808,808',
'808,,808,808,808,808,,,,,808,808,,,,573,573,573,808,573,808,808,808',
'573,573,808,808,,573,,573,573,573,573,573,573,573,,,,,,573,573,573,573',
'573,573,573,,,573,,,,,,,573,,,573,573,573,573,573,573,573,573,,573,573',
'573,,573,573,573,573,573,,,,,,,,,,,,,,,,,,,,573,,,573,,,573,573,,,573',
',,,,,573,,,,,,,,,573,,,,,573,573,573,573,,573,573,573,573,,,,,573,573',
',,,785,785,785,573,785,573,573,573,785,785,573,573,,785,,785,785,785',
'785,785,785,785,,,,,,785,785,785,785,785,785,785,,,785,,,,,,,785,,,785',
'785,785,785,785,785,785,785,,785,785,785,,785,785,785,785,785,,,,,,',
',,,,,,,,,,,,,785,,,785,,,785,785,,,785,,,,,,785,,,,,,,,,785,,,,,785',
'785,785,785,,785,785,785,785,,,,,785,785,,,,594,594,594,785,594,785',
'785,785,594,594,785,785,,594,,594,594,594,594,594,594,594,,,,,,594,594',
'594,594,594,594,594,,,594,,,,,,,594,,,594,594,594,594,594,594,594,594',
',594,594,594,,594,594,594,594,594,,,,,,,,,,,,,,,,,,,,594,,,594,,,594',
'594,,,594,,594,,,,594,,,,,,,,,594,,,,,594,594,594,594,,594,594,594,594',
',,,,594,594,,,,595,595,595,594,595,594,594,594,595,595,594,594,,595',
',595,595,595,595,595,595,595,,,,,,595,595,595,595,595,595,595,,,595',
',,,,,,595,,,595,595,595,595,595,595,595,595,595,595,595,595,,595,595',
'595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,,595,,595,,595,',
'595,,,595,,,,,,595,,,,,595,595,595,595,,595,595,595,595,,,,,595,595',
',,,605,605,605,595,605,595,595,595,605,605,595,595,,605,,605,605,605',
'605,605,605,605,,,,,,605,605,605,605,605,605,605,,,605,,,,,,,605,,,605',
'605,605,605,605,605,605,605,605,605,605,605,,605,605,605,605,605,,,',
',,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605,,605,,605,,605,,,605,,,,,',
'605,,,,,605,605,605,605,,605,605,605,605,,,,,605,605,,,,748,748,748',
'605,748,605,605,605,748,748,605,605,,748,,748,748,748,748,748,748,748',
',,,,,748,748,748,748,748,748,748,,,748,,,,,,,748,,,748,748,748,748,748',
'748,748,748,,748,748,748,,748,748,748,748,748,,,,,,,,,,,,,,,,,,,,748',
',,748,,,748,748,,,748,,,,,,748,,,,,,,,,748,,,,,748,748,748,748,,748',
'748,748,748,,,,,748,748,,,,,,,748,,748,748,748,,,748,748,636,636,636',
'636,636,,,,636,636,,,,636,,636,636,636,636,636,636,636,,,,,,636,636',
'636,636,636,636,636,,,636,,,,,,636,636,,636,636,636,636,636,636,636',
'636,636,,636,636,636,,636,636,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636',
',,636,636,,,636,,636,,,,636,,,,,,,,,636,,,,,636,636,636,636,,636,636',
'636,636,,,,,636,636,,,,638,638,638,636,638,636,636,636,638,638,636,636',
',638,,638,638,638,638,638,638,638,,,,,,638,638,638,638,638,638,638,',
',638,,,,,,,638,,,638,638,638,638,638,638,638,638,,638,638,638,,638,638',
'638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,638,,,,638',
',,,,,,,,638,,,,,638,638,638,638,,638,638,638,638,,,,,638,638,,,,639',
'639,639,638,639,638,638,638,639,639,638,638,,639,,639,639,639,639,639',
'639,639,,,,,,639,639,639,639,639,639,639,,,639,,,,,,,639,,,639,639,639',
'639,639,639,639,639,,639,639,639,,639,639,639,639,639,,,,,,,,,,,,,,',
',,,,,639,,,639,,,639,639,,,639,,,,,,639,,,,,,,,,639,,,,,639,639,639',
'639,,639,639,639,639,,,,,639,639,,,,640,640,640,639,640,639,639,639',
'640,640,639,639,,640,,640,640,640,640,640,640,640,,,,,,640,640,640,640',
'640,640,640,,,640,,,,,,,640,,,640,640,640,640,640,640,640,640,640,640',
'640,640,,640,640,640,640,640,,,,,,,,,,,,,,,,,,,,640,,,640,,,640,640',
',,640,,640,,640,,640,,,640,,,,,,640,,,,,640,640,640,640,,640,640,640',
'640,,,,,640,640,,,,,,,640,,640,640,640,,,640,640,643,643,643,643,643',
',,,643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643,643,643,643',
'643,643,643,,,643,,,,,,643,643,,643,643,643,643,643,643,643,643,643',
',643,643,643,,643,643,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643',
'643,,,643,,643,,,,643,,,,,,,,,643,,,,,643,643,643,643,,643,643,643,643',
',,,,643,643,,,,644,644,644,643,644,643,643,643,644,644,643,643,,644',
',644,644,644,644,644,644,644,,,,,,644,644,644,644,644,644,644,,,644',
',,,,,,644,,,644,644,644,644,644,644,644,644,,644,644,644,,644,644,644',
'644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,,,,,644,,,,,,',
',,644,,,,,644,644,644,644,,644,644,644,644,,,,,644,644,,,,647,647,647',
'644,647,644,644,644,647,647,644,644,,647,,647,647,647,647,647,647,647',
',,,,,647,647,647,647,647,647,647,,,647,,,,,,,647,,,647,647,647,647,647',
'647,647,647,647,647,647,647,,647,647,647,647,647,,,,,,,,,,,,,,,,,,,',
'647,,,647,,,647,647,,,647,,647,,647,,647,,,647,,,,,,647,,,,,647,647',
'647,647,,647,647,647,647,,,,,647,647,,,,648,648,648,647,648,647,647',
'647,648,648,647,647,,648,,648,648,648,648,648,648,648,,,,,,648,648,648',
'648,648,648,648,,,648,,,,,,,648,,,648,648,648,648,648,648,648,648,648',
'648,648,648,,648,648,648,648,648,,,,,,,,,,,,,,,,,,,,648,,,648,,,648',
'648,,,648,,,,648,,648,,,648,,,,,,648,,,,,648,648,648,648,,648,648,648',
'648,,,,,648,648,,,,649,649,649,648,649,648,648,648,649,649,648,648,',
'649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649,649,,',
'649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,,649,649',
'649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,,,,,649,,',
',,,,,,649,,,,,649,649,649,649,,649,649,649,649,,,,,649,649,,,,650,650',
'650,649,650,649,649,649,650,650,649,649,,650,,650,650,650,650,650,650',
'650,,,,,,650,650,650,650,650,650,650,,,650,,,,,,,650,,,650,650,650,650',
'650,650,650,650,,650,650,650,,650,650,650,650,650,,,,,,,,,,,,,,,,,,',
',650,,,650,,,650,650,,,650,,,,,,650,,,,,,,,,650,,,,,650,650,650,650',
',650,650,650,650,,,,,650,650,,,,654,654,654,650,654,650,650,650,654',
'654,650,650,,654,,654,654,654,654,654,654,654,,,,,,654,654,654,654,654',
'654,654,,,654,,,,,,,654,,,654,654,654,654,654,654,654,654,,654,654,654',
',654,654,654,654,654,,,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,,654,,',
',,,654,,,,,,,,,654,,,,,654,654,654,654,,654,654,654,654,,,,,654,654',
',,,655,655,655,654,655,654,654,654,655,655,654,654,,655,,655,655,655',
'655,655,655,655,,,,,,655,655,655,655,655,655,655,,,655,,,,,,,655,,,655',
'655,655,655,655,655,655,655,,655,655,655,,655,655,655,655,655,,,,,,',
',,,,,,,,,,,,,655,,,655,,,655,655,,,655,,,,,,655,,,,,,,,,655,,,,,655',
'655,655,655,,655,655,655,655,,,,,655,655,,,,72,72,72,655,72,655,655',
'655,72,72,655,655,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72',
',,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,72,,,,,,',
',,,,,,,,,,72,,,72,,,72,,,72,72,,,72,,,,,,,,,,,,,,,,,,,,72,72,72,72,',
'72,72,72,72,,,,,72,72,,,,323,323,323,72,323,72,72,72,323,323,,,,323',
',323,323,323,323,323,323,323,,,,,,323,323,323,323,323,323,323,,,323',
',,,,,,323,,,323,323,323,323,323,323,323,323,,323,323,323,,323,323,,',
'323,,,,,,,,,,,,,,,,,,,,323,,,323,,,323,323,,,323,,,,,,,,,,,,,,,,,,,',
'323,323,323,323,,323,323,323,323,,,,,323,323,,,,35,35,35,323,35,323',
'323,323,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35',
',,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,',
',,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,1142,,1142,1142,1142,1142,1142,',
',,,,,,,1142,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,1142,35,,35,35',
'35,714,714,714,,714,1142,1142,,714,714,1142,,,714,,714,714,714,714,714',
'714,714,,,,,,714,714,714,714,714,714,714,,,714,,,,,,,714,,,714,714,714',
'714,714,714,714,714,,714,714,714,,714,714,,,714,,,,,,,,,,,,,,,,,,,,714',
',,714,,,714,714,,,714,,,,,,,,,,,,,,,,,,,,714,714,714,714,,714,714,714',
'714,,,,,714,714,,,,529,529,529,714,529,714,714,714,529,529,,,,529,,529',
'529,529,529,529,529,529,,,,,,529,529,529,529,529,529,529,,,529,,,,,',
',529,,,529,529,529,529,529,529,529,529,,529,529,529,,529,529,,,529,',
',,,,,,,,,,,,,,,,,,529,,,529,,,529,529,,,529,,,,,,,,,,,,,,,,,,,,529,529',
'529,529,,529,529,529,529,,,,,529,529,,,,977,977,977,529,977,529,529',
'529,977,977,,,,977,,977,977,977,977,977,977,977,,,,,,977,977,977,977',
'977,977,977,,,977,,,,,,,977,,,977,977,977,977,977,977,977,977,,977,977',
'977,,977,977,,,977,,,,,,,,,,,,,,,,,,,,977,,,977,,,977,977,,,977,,,,',
',,,,,,,,,,,,,,,977,977,977,977,,977,977,977,977,,,,,977,977,,,,71,71',
'71,977,71,977,977,977,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71',
'71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71',
',,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,,71',
'71,71,71,,71,71,71,71,,,,,71,71,,,,986,986,986,71,986,71,71,71,986,986',
',,,986,,986,986,986,986,986,986,986,,,,,,986,986,986,986,986,986,986',
',,986,,,,,,,986,,,986,986,986,986,986,986,986,986,,986,986,986,,986',
'986,,,986,,,,,,,,,,,,,,,,,,,,986,,,986,,,986,986,,,986,,,,,,,,,,,,,',
',,,,,,986,986,986,986,,986,986,986,986,,,,,986,986,,,,1058,1058,1058',
'986,1058,986,986,986,1058,1058,,,,1058,,1058,1058,1058,1058,1058,1058',
'1058,,,,,,1058,1058,1058,1058,1058,1058,1058,,,1058,,,,,,,1058,,,1058',
'1058,1058,1058,1058,1058,1058,1058,,1058,1058,1058,,1058,1058,,,1058',
',,,,,,,,,,,,,,,,,,,1058,,,1058,,,1058,1058,,,1058,,,,,,,,,,,,,,,,,,',
',1058,1058,1058,1058,,1058,1058,1058,1058,,,,,1058,1058,,,,306,306,306',
'1058,306,1058,1058,1058,306,306,,,,306,,306,306,306,306,306,306,306',
',,,,,306,306,306,306,306,306,306,,,306,,,,,,,306,,,306,306,306,306,306',
'306,306,306,,306,306,306,,306,306,,,306,,,,,,,,,,,,,,,,,,,,306,,,306',
',,306,306,,,306,,,1144,,1144,1144,1144,1144,1144,,,,,,,,,1144,,306,306',
'306,306,,306,306,306,306,,,,,306,306,,,,306,,1144,306,,306,306,306,73',
'73,73,,73,1144,1144,,73,73,1144,,,73,,73,73,73,73,73,73,73,,,,,,73,73',
'73,73,73,73,73,,,73,,,,,,,73,,,73,73,73,73,73,73,73,73,,73,73,73,,73',
'73,,,73,,,,,,,,,,,,,,,,,,,,73,,,73,,,73,73,,,73,,,,,,,,,,,,,,,,,,,,73',
'73,73,73,,73,73,73,73,,,,,73,73,,,,725,725,725,73,725,73,73,73,725,725',
',,,725,,725,725,725,725,725,725,725,,,,,,725,725,725,725,725,725,725',
',,725,,,,,,,725,,,725,725,725,725,725,725,725,725,,725,725,725,,725',
'725,,,725,,,,,,,,,,,,,,,,,,,,725,,,725,,,725,725,,,725,,,,,,,,,,,,,',
',,,,,,725,725,725,725,,725,725,725,725,,,,,725,725,,,,521,521,521,725',
'521,725,725,725,521,521,,,,521,,521,521,521,521,521,521,521,,,,,,521',
'521,521,521,521,521,521,,,521,,,,,,,521,,,521,521,521,521,521,521,521',
'521,,521,521,521,,521,521,,,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521',
',,521,,,,,,,,,,,,,,,,,,,,521,521,521,521,,521,521,521,521,,,,,521,521',
',,,34,34,34,521,34,521,521,521,34,34,,,,34,,34,34,34,34,34,34,34,,,',
',,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34',
'34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,',
',,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,,,,34,,34,34,34,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,',
',,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,',
',,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,634,634',
'634,634,634,634,634,634,634,634,634,634,634,634,634,634,634,634,634',
'634,634,634,634,634,,,,634,634,634,634,634,634,634,634,634,634,,,,,',
'634,634,634,634,634,634,634,634,634,,,634,,,,,,,,634,634,,634,634,634',
'634,634,634,634,,,634,634,,,,634,634,634,634,,,,,,,,,,,,,,634,634,,634',
'634,634,634,634,634,634,634,634,634,634,634,,,634,634,,,,,,,,,,,,,,634',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8',
'8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8',
'8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,407',
'407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407',
'407,407,407,407,407,407,,,,407,407,407,407,407,407,407,407,407,407,',
',,,,407,407,407,407,407,407,407,407,407,,,407,,,,,,,,407,407,,407,407',
'407,407,407,407,407,,,407,407,,,,407,407,407,407,,,,,,,,,,,,,,407,407',
',407,407,407,407,407,407,407,407,407,407,407,407,,,407,407,1138,1138',
'1138,1138,,,,,,,,,,407,,,1138,1138,1138,1138,,,744,1138,744,744,744',
'744,744,1138,1138,,,1138,,,,744,,,,,,,,,,,,,,,,1138,,,1138,,,744,1138',
',,1138,,,,,744,744,744,744,,,,744,,,,1138,,,,1138,1138,1138,1138,,1138',
'1138,1138,1138,,,,,1138,1138,1033,1033,1033,1033,,,1138,,1138,1138,1138',
',,1138,1138,,1033,1033,1033,1033,,,1146,1033,1146,1146,1146,1146,1146',
'1033,1033,,,1033,,,,1146,,,,,,,,,,,,,,,,1033,,,1033,,,1146,1033,,,1033',
',,,,,,1146,1146,,,,1146,,,,1033,,,,1033,1033,1033,1033,,1033,1033,1033',
'1033,,,,,1033,1033,1085,1085,1085,1085,,,1033,,1033,1033,1033,,,1033',
'1033,,1085,1085,1085,1085,,,1140,1085,1140,1140,1140,1140,1140,1085',
'1085,,,1085,,,,1140,,,,,,,,,,,,,,,,1085,,,1085,,,1140,1085,,,1085,,1085',
',,1140,1140,1140,1140,,,,1140,,,,1085,,,,1085,1085,1085,1085,,1085,1085',
'1085,1085,,,,,1085,1085,941,941,941,941,,,1085,,1085,1085,1085,,,1085',
'1085,,941,941,941,941,,,1054,941,1054,1054,1054,1054,1054,941,941,,',
'941,,,,1054,,,,,,,,,,,,,,,,941,,,941,,,1054,941,,,941,,941,,,,,1054',
'1054,,,,1054,,,,941,,,,941,941,941,941,,941,941,941,941,,,,,941,941',
'464,464,464,464,,,941,,941,941,941,,,941,941,,464,464,464,464,,,1052',
'464,1052,1052,1052,1052,1052,464,464,,,464,,,,1052,,,,,,,,,,,,,,,,464',
',,464,,,1052,464,,,464,,,,,1052,1052,1052,1052,,,,1052,,,,464,,,,464',
'464,464,464,,464,464,464,464,,,,,464,464,949,949,949,949,,,464,,464',
'464,464,,,464,464,,949,949,949,949,,,1050,949,1050,1050,1050,1050,1050',
'949,949,,,949,,,,1050,,,,,,,,,,,,,,,,949,,,949,,,1050,949,,,949,,,,',
'1050,1050,1050,1050,,,,1050,,,,949,,,,949,949,949,949,,949,949,949,949',
',,,,949,949,838,838,838,838,,,949,,949,949,949,,,949,949,,838,838,838',
'838,,,,838,838,,,,,838,838,,,838,838,,,,,,,,,,,,,,,,,,,838,,,838,,,',
'838,,,838,,838,,,,,,,838,,,,,,,838,,,,838,838,838,838,,838,838,838,838',
',,,,838,838,835,835,835,835,,,838,,838,838,838,,,838,838,,835,835,835',
'835,,,742,835,742,742,742,742,742,835,835,,,835,,,,742,,,,,,,,,,,,,',
',,835,,,835,,,742,835,,,835,,,,,742,742,742,742,,,,742,,,,835,,,,835',
'835,835,835,,835,835,835,835,,,,,835,835,911,911,911,911,,,835,,835',
'835,835,,,835,835,,911,911,911,911,,,,911,911,,,,,911,911,,,911,911',
',,,,,,,,,,,,,,,,,,911,,,911,,,,911,,,911,,911,,,,,,,911,,,,,,,911,,',
',911,911,911,911,,911,911,911,911,,,,,911,911,841,841,841,841,,,911',
',911,911,911,,,911,911,,841,841,841,841,,,1173,841,1173,1173,1173,1173',
'1173,841,841,,,841,,,,1173,,,,,,,,,,,,,,,,841,,,841,,,1173,841,,,841',
',841,,,,,1173,1173,,,,1173,,,,841,,,,841,841,841,841,,841,841,841,841',
',,,,841,841,839,839,839,839,,,841,,841,841,841,,,841,841,,839,839,839',
'839,,,,839,839,,,,,839,839,,,839,839,,,,,,,,,,,,,,,,,,,839,,,839,,,',
'839,,,839,,839,,,,,,,839,,,,,,,839,,,,839,839,839,839,,839,839,839,839',
',,,,839,839,,,,,,,839,,839,839,839,,,839,839,791,791,791,791,791,791',
'791,791,791,791,791,791,791,791,791,791,791,791,791,791,791,791,791',
'791,,,,791,791,791,791,791,791,791,791,791,791,,,,,,791,791,791,791',
'791,791,791,791,791,,,791,,,,,,,,791,791,,791,791,791,791,791,791,791',
',,791,791,,,,791,791,791,791,,,,,,,,,,,,,,791,791,,791,791,791,791,791',
'791,791,791,791,791,791,791,,,791,1135,1135,1135,1135,,,999,,999,999',
'999,999,999,,,,1135,1135,1135,1135,,999,,1135,,,,,,1135,1135,,,1135',
',,,,,,,,,999,,,,,,,,,,1135,999,999,1135,,,999,1135,,,1135,,,,,,,,,,',
',,,,,1135,,,,1135,1135,1135,1135,,1135,1135,1135,1135,,,,,1135,1135',
'1094,1094,1094,1094,,,1135,,1135,1135,1135,,,1135,1135,,1094,1094,1094',
'1094,,,552,1094,552,552,552,552,552,1094,1094,,,1094,,,,552,,,,,,,,',
',,,,,,,1094,,,1094,,,552,1094,,,1094,,,,,552,552,552,552,,,,552,,,,1094',
',,,1094,1094,1094,1094,,1094,1094,1094,1094,,,,,1094,1094,1093,1093',
'1093,1093,,,1094,,1094,1094,1094,,,1094,1094,,1093,1093,1093,1093,,',
'993,1093,993,993,993,993,993,1093,1093,,,1093,,,,993,,,,,,,,,,,,,,,',
'1093,,,1093,,,993,1093,,,1093,,,,,993,993,993,993,,,,993,,,,1093,,,',
'1093,1093,1093,1093,,1093,1093,1093,1093,,,,,1093,1093,846,846,846,846',
',,1093,,1093,1093,1093,,,1093,1093,,846,846,846,846,,,995,846,995,995',
'995,995,995,846,846,,,846,,,,995,,,,,,,,,,,,,,,,846,,,846,,,995,846',
',,846,,,,,,,995,995,,,,995,,,,846,,,,846,846,846,846,,846,846,846,846',
',,,,846,846,,,,,,,846,,846,846,846,,,846,846,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74,74,74',
'74,74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,,74,74',
',74,74,74,74,74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74',
'74,74,74,74,74,74,74,74,74,74,74,,,74,677,677,677,677,,,,347,,347,347',
'347,347,347,,,677,677,677,,,,347,,,,,,,677,677,,,677,678,678,678,678',
',,,,,,347,347,,,,,678,678,678,347,347,347,347,,,,347,,,678,678,,,678',
',,,,,,,,,,,,,,,677,677,677,677,,677,677,677,677,,,,,677,677,,,,,,,677',
',677,677,677,,,,,,,,,678,678,678,678,,678,678,678,678,,,,,678,678,848',
'848,848,848,,,678,,678,678,678,,,,,,848,848,848,267,267,,,267,,,,,,848',
'848,267,267,848,267,267,267,267,267,267,267,,,267,267,,,,267,267,267',
'267,,,,,,,,,,,,,,267,267,,267,267,267,267,267,267,267,267,267,267,267',
'267,,,267,848,848,848,848,,848,848,848,848,,,,,848,848,642,642,,,642',
',848,,848,848,848,,642,642,,642,642,642,642,642,642,642,,,642,642,,',
',642,642,642,642,,,,,,642,,,,,,,,642,642,,642,642,642,642,642,642,642',
'642,642,642,642,642,457,457,642,,457,,,,,,,,457,457,,457,457,457,457',
'457,457,457,,,457,457,,,,457,457,457,457,,,,,,457,,,,,,,,457,457,,457',
'457,457,457,457,457,457,457,457,457,457,457,458,458,457,,458,,,,,,,',
'458,458,,458,458,458,458,458,458,458,,,458,458,,,,458,458,458,458,,',
',,,458,,,,,,,,458,458,,458,458,458,458,458,458,458,458,458,458,458,458',
'596,596,458,,596,,,,,,,,596,596,,596,596,596,596,596,596,596,,,596,596',
',,,596,596,596,596,,,,,,596,,,,,,,,596,596,,596,596,596,596,596,596',
'596,596,596,596,596,596,597,597,596,,597,,,,,,,,597,597,,597,597,597',
'597,597,597,597,,,597,597,,,,597,597,597,597,,,,,,597,,,,,,,,597,597',
',597,597,597,597,597,597,597,597,597,597,597,597,603,603,597,,603,,',
',,,,,603,603,,603,603,603,603,603,603,603,,,603,603,,,,603,603,603,603',
',,,,,603,,,,,,,,603,603,,603,603,603,603,603,603,603,603,603,603,603',
'603,604,604,603,,604,,,,,,,,604,604,,604,604,604,604,604,604,604,,,604',
'604,,,,604,604,604,604,,,,,,604,,,,,,,,604,604,,604,604,604,604,604',
'604,604,604,604,604,604,604,1112,1112,604,,1112,,,,,,,,1112,1112,,1112',
'1112,1112,1112,1112,1112,1112,,,1112,1112,,,,1112,1112,1112,1112,,,',
',,1112,,,,,,,,1112,1112,,1112,1112,1112,1112,1112,1112,1112,1112,1112',
'1112,1112,1112,1116,1116,1112,,1116,,,,,,,,1116,1116,,1116,1116,1116',
'1116,1116,1116,1116,,,1116,1116,,,,1116,1116,1116,1116,,,,,,1116,,,',
',,,,1116,1116,,1116,1116,1116,1116,1116,1116,1116,1116,1116,1116,1116',
'1116,217,217,1116,,217,,,,,,,,217,217,,217,217,217,217,217,217,217,',
',217,217,,,,217,217,217,217,,,,,,217,,,,,,,,217,217,,217,217,217,217',
'217,217,217,217,217,217,217,217,218,218,217,,218,,,,,,,,218,218,,218',
'218,218,218,218,218,218,,,218,218,,,,218,218,218,218,,,,,,218,,,,,,',
',218,218,,218,218,218,218,218,218,218,218,218,218,218,218,1117,1117',
'218,,1117,,,,,,,,1117,1117,,1117,1117,1117,1117,1117,1117,1117,,,1117',
'1117,,,,1117,1117,1117,1117,,,,,,1117,,,,,,,,1117,1117,,1117,1117,1117',
'1117,1117,1117,1117,1117,1117,1117,1117,1117,524,524,1117,,524,,,,,',
',,524,524,,524,524,524,524,524,524,524,,,524,524,,,,524,524,524,524',
',,,,,524,,,,,,,,524,524,,524,524,524,524,524,524,524,524,524,524,524',
'524,525,525,524,,525,,,,,,,,525,525,,525,525,525,525,525,525,525,,,525',
'525,,,,525,525,525,525,,,,,,525,,,,,,,,525,525,,525,525,525,525,525',
'525,525,525,525,525,525,525,533,533,525,,533,,,,,,,,533,533,,533,533',
'533,533,533,533,533,,,533,533,,,,533,533,533,533,,,,,,533,,,,,,,,533',
'533,,533,533,533,533,533,533,533,533,533,533,533,533,534,534,533,,534',
',,,,,,,534,534,,534,534,534,534,534,534,534,,,534,534,,,,534,534,534',
'534,,,,,,534,,,,,,,,534,534,,534,534,534,534,534,534,534,534,534,534',
'534,534,641,641,534,,641,,,,,,,,641,641,,641,641,641,641,641,641,641',
',,641,641,,,,641,641,641,641,,,,,,641,,,,,,,,641,641,,641,641,641,641',
'641,641,641,641,641,641,641,641,,,641' ]
        racc_action_check = arr = ::Array.new(27149, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  5007,  1213,   nil,   539,   nil, 16629,  1407,  1089, 23909, 23653,
  1088,   nil,  1053,  1016,   772,  1061,   968,   667,   nil,   -31,
  5662,  1407,  1119,   nil,   473,   nil,    28,  5803,  5913,  6047,
  6178,  6309,   nil,  3423, 23514, 22057,   nil,   999,   420,   308,
  1073,  6440,  6571,   123,  6702,  6833,   975,  6964,   996,   875,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  7105,
   nil,  7246,  7377,  7508,   152,   nil,  7639,  7770,   nil,   nil,
  7901, 22589, 21795, 23121, 25764,   nil,   nil,   nil,   nil,   nil,
   626,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   388,   nil,   nil,   500,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1109,   nil,  8044,   nil,   nil,   nil,
   nil,  8187,  8318,  8449,  8580,  8723,   nil,  3711,   nil,   391,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   972,   nil,
  2703,  8985,  9116,  9247,  9378,  9509,  9640, 26607, 26668,   nil,
   nil,  9771,  9902, 10033,   nil,   nil,   889,   272,   254,  1047,
   248,   936,   993,   nil, 10164,  2271,   985,   nil, 10295,  5138,
 10426, 10557, 10688, 10819, 10950, 11081, 11212, 11343, 11474, 11605,
 11736, 11867, 11998, 12129, 12260, 12391, 12522, 12653, 12784, 12915,
   nil,   nil,   nil,   nil, 13046,   nil,   nil, 25979,   nil,   nil,
   977, 13177, 13308,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 13439,   nil,  2127,   nil,   938,   936,   nil, 13832,   978, 13963,
   nil,   nil, 14094, 14225,   nil,   nil,   -70,   nil, 14368,  1248,
   932,   873,  1839,   886,   922,   870, 22982,  1119,   841,   802,
   784,   945,   690,   nil,   910,   859,   167,   nil,   nil,   nil,
   899,   267,   854, 21926,   nil,   605,   392,  2703,  2847,   918,
   nil,   905, 14499,   nil, 14630,  4575,  1536,   839,   nil,   431,
   471,   853,   818,   399,   842,   nil,   nil, 25835,   734,    38,
    36, 14761,  4431,  4143,   357,   911,   789,    28,    11,   991,
   867,   -18,   897,   nil,   nil,  1110,   966,   447,   nil,   798,
   nil,   776, 14892,   nil,   nil,   nil,   588,   559,   515,   478,
   474,   472,   368,   293,   196,   nil,   191,   nil, 15023,   nil,
   322,   312,   379,   211,   420,   100,   -31,   217,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   768, 24037,   nil,   nil,
   nil,   nil,   750,   nil,   816,   723, 15154,   709,   nil,   nil,
  1072,   nil,   326,   154,   797,   nil,   nil,  1551,   nil,   nil,
   nil,   nil,   nil,  1695,   694,   nil,   672,   647,   569,   452,
 15557,   nil,   nil,   nil,   610,   278,   684,   nil,   nil, 15689,
 15825,   nil,   nil,   nil,   -33,   nil,   678, 26119, 26180, 16093,
   104, 16224, 16355, 16486, 24513,  2559,  2991,  1014,   853,   673,
   572,   555,   514,  4719,  4575,  4863,  3135,  3279,  3423,  3567,
  3711,  3855,  2587,   782,  3999,  4143,  2271,  4287,   nil, 17032,
   nil,   nil,   nil,   nil, 17162,   381,   343,   nil,   nil,   nil,
   321,   nil,   nil, 17293,   nil, 17424,   nil, 17555,   nil,   198,
   nil,   nil,   nil, 17698,  1680,   nil,   268,   246,   nil,   nil,
   174, 23383,   105, 18103, 26790, 26851,   232,   131,   nil, 22327,
    60,   nil, 18496, 26912, 26973, 18627,  4431,  1839, 18758,    38,
    25,  1268,  1307,   nil, 19020,   nil,   nil, 19151,   nil,   nil,
   nil,   nil, 25428,   nil,  1262,  1261,  1257,   nil,  1255,  1254,
  1249,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1232,
  1173,   nil,   nil, 19413,   nil,   nil,   nil,   280,   nil,   nil,
   nil,  1318,   nil,   nil,  1306,  2991,  1341,   nil,  2847,    66,
  1343,  1341,    38,  1340, 19675, 19806, 26241, 26302,    86,   nil,
   nil,   582,   nil, 26363, 26424, 19937,   nil,   nil,   197,  4863,
  1256,   nil,   -14,   nil,   nil,   nil,  1138,   nil,   nil,   nil,
  1223,   nil,   nil,   309,   nil,   241,   nil,   nil,  1185,   nil,
  1171,   nil,   nil,   nil, 23781,   nil, 20211,  1166, 20342, 20473,
 20604, 27034, 26058, 20747, 20878,   639,  1183, 21009, 21140, 21271,
 21402,  1180,   nil,   nil, 21533, 21664,  1179,   nil,   nil,   nil,
   287,   281,     0,   720,  1141,  1173,   nil,  1145,   nil,   nil,
   555,   108,   -75,   nil,   343,   nil,   nil, 25847, 25881,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1195,   428,   nil,  1111,  1229,   nil,   814,    -8,   nil,   nil,
   nil,  1108,  1116,  1222,   nil,  1099,   nil,  1146,  5531,   nil,
   nil,  5400,   nil,   344, 22196,  1111,   nil,  1115,    98,   163,
  1160,   165,   869,  1161,  1118, 23252,   nil,  1187,    20,  1242,
  5269,   nil,   nil,   nil,   492,    63,  1142,  1119,   nil,   nil,
   489,   nil, 24810,   nil, 24124,   nil, 17032,   nil, 20068,   nil,
  1279,   nil,  1190,  1196,  1308,  1205,   nil,   nil,   nil,   nil,
   nil,   822,   nil,  1325,   nil,   nil,   nil,   nil,   nil,  1331,
  1332,   nil,   nil,    -7,  1214,    61,    64,    97,    94,  1551,
  1254,   470,   nil,  1226,  3135, 19544,   nil,  1366,  3279,   607,
 17051, 25244,   nil,   nil,   nil,   nil,   nil,   nil,  2559,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1256, 19282,  1263,
   -56,   273,   830,   139,   nil,  2415, 18889,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 18365,
 18234, 17972, 17841,   181,   341, 24807,   200,   -84, 24709, 25101,
   480, 25003,   nil,   525,   nil,   435, 25621,  7105, 25979,   nil,
   nil,   nil,   nil,   nil,   nil, 16891,   nil,   443,   nil,   nil,
   447,   nil,   nil, 16996,  4719,   nil,   nil,   nil,   nil,   462,
   167,   nil,   nil,   620,   nil,   975,   507,   567,   nil,   nil,
   nil,   nil,   nil,   nil,   521,   578,   538,   nil,   639,   nil,
   nil,   566,   576,   nil,   589,   593,   nil,   598,   nil,   nil,
   605,  1249,  1317,   nil,   nil,   740,   nil, 16760,   749,   nil,
   nil, 24905, 15962,  1263,    39,   773,   nil,   792,   387,  3855,
   nil,   802,   685,   687,   nil,   176,   nil,   692,   688,   218,
   nil,   nil, 15416, 15285,   nil,   nil,   nil,   nil,   149,   715,
   719, 24415,   nil,   725,   -32,   727,   nil,   nil,   nil, 24611,
   nil,   nil,   232,   734,   744,   nil,   746,   748,   nil,   nil,
   -66,   nil,   nil,  1983,  3999,   nil,   756,   757,   759,   nil,
   760,   761,   777,   nil,   802,   785,   772, 22458,   nil,   nil,
   nil,   nil,  4287,   nil,   nil,   -10, 22720,   nil,  1407,  3567,
   724,   nil,   nil, 25526,   nil, 25624,   nil, 17025,   nil, 25314,
   nil,   nil,   nil,   nil,   809,   812,   nil,    35,   nil,    39,
   726,   -72,   nil,   nil,   nil,   426,   nil,   nil,   nil,   939,
   nil,   nil,   nil,   nil,   860,   nil,   nil,   nil,   863,   834,
   -19,   nil,   837, 24219,   898,   887,   135,   nil,   nil,   nil,
   nil,   nil,   nil,   164,   nil,   nil,  1089,   nil,   nil,   nil,
 24614,   nil, 24516,   nil, 24418,   nil,   nil,   892, 22851,   958,
   960,   nil,  1695,    -1,    21,   692,   994,     6,   nil,   940,
  1045,   537,   nil,   nil,   nil,   923,   925,   929,   931,  2927,
  2783,  1983,   nil, 13701, 13570, 24317,   nil,   nil,   nil,   nil,
  2127,   nil,   944, 25523, 25425,   953,   nil,   nil,   nil,   nil,
   nil,   954,   nil,   nil,   955,   956,   961,   966,   nil,   968,
   nil,   964, 26485,   nil,  1100,  8854, 26546, 26729,     8,   nil,
   nil,   nil,  1105, 15620,   nil,   nil,   nil,   nil,   994,   684,
  2415,   nil,   nil,   nil,  1122, 25327,  1010,  1011, 24121,   nil,
 24320,   nil, 22104,   nil, 23029,   nil, 24222,   nil,   nil,  1090,
  1097,   nil,  1060,    19,    32,    68,    69,   nil,  1069,   nil,
    35,   nil,  1072,   nil,  1073,  1075,  1076,  1079,   -11,   nil,
   nil,   nil,   nil, 25006,   nil,   nil,   nil,   nil,  1082,   nil ]

racc_action_default = [
    -3,  -708,    -1,  -693,    -4,  -708,    -7,  -708,  -708,  -708,
  -708,   -30,  -708,  -708,   -35,  -708,  -708,  -293,   -47,  -695,
  -708,   -54,   -58,   -59,   -60,   -64,  -270,  -270,  -270,  -306,
  -336,  -337,   -76,   -12,   -80,   -88,   -90,  -708,  -593,  -594,
  -708,  -708,  -708,  -708,  -708,  -708,  -228,  -708,  -695,  -242,
  -284,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -681,
  -295,  -299,  -707,  -671,  -314,  -396,  -708,  -708,   -56,   -56,
  -693,  -708,  -708,  -708,  -708,  -338,  -339,  -341,  -533,  -534,
  -535,  -536,  -557,  -539,  -540,  -559,  -561,  -544,  -549,  -553,
  -555,  -571,  -572,  -573,  -557,  -575,  -577,  -578,  -579,  -580,
  -679,  -582,  -583,  -680,  -585,  -586,  -587,  -588,  -589,  -590,
  -591,  -592,  -597,  -598,  -708,    -2,  -694,  -703,  -704,  -705,
    -6,  -708,  -708,  -708,  -708,  -708,    -8,    -3,   -18,  -708,
  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,  -196,  -197,  -198,  -199,   -23,  -126,
   -12,  -708,  -708,  -708,  -708,  -708,  -260,  -708,  -708,  -691,
  -692,  -708,  -708,  -695,  -696,   -51,  -708,  -593,  -594,  -708,
  -293,  -708,  -708,  -234,  -708,   -12,  -708,   -52,  -211,  -212,
  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,
  -243,  -244,  -245,  -246,  -708,  -405,  -407,  -708,  -689,  -690,
   -65,  -260,  -708,  -313,  -411,  -420,  -422,   -71,  -417,   -72,
  -695,   -73,  -249,  -265,  -274,  -274,  -269,  -708,  -275,  -708,
  -557,  -673,  -708,  -708,   -74,   -75,  -693,   -13,  -708,   -16,
  -708,   -78,   -12,  -695,  -708,   -81,   -84,   -12,   -96,   -97,
  -708,  -708,  -104,  -306,  -309,  -695,  -708,  -336,  -337,  -340,
  -418,  -708,   -86,  -708,   -92,  -303,  -708,  -213,  -214,  -576,
  -222,  -223,  -708,  -235,  -708,   -12,  -297,  -695,  -250,  -700,
  -700,  -708,  -708,  -700,  -708,  -315,  -316,  -627,   -55,  -708,
  -708,  -708,   -12,   -12,  -693,  -708,  -694,  -593,  -594,  -708,
  -708,  -293,  -708,  -351,  -352,  -114,  -115,  -708,  -117,  -708,
  -293,  -601,  -708,  -593,  -594,  -329,  -119,  -120,  -159,  -160,
  -161,  -177,  -182,  -189,  -192,  -331,  -708,  -669,  -708,  -537,
  -708,  -708,  -708,  -708,  -708,  -708,  -708,  -708,  1180,    -5,
  -706,   -24,   -25,   -26,   -27,   -28,  -708,  -708,   -20,   -21,
   -22,  -127,  -708,   -31,   -34,  -280,  -708,  -708,  -279,   -32,
  -708,   -36,  -708,  -293,   -44,   -46,  -200,  -254,  -275,   -48,
   -49,   -37,  -201,  -254,  -695,  -261,  -274,  -274,  -682,  -683,
  -270,  -415,  -684,  -685,  -683,  -682,  -270,  -414,  -416,  -684,
  -685,   -43,  -208,   -50,  -695,  -312,  -708,  -708,  -708,  -260,
  -303,  -708,  -708,  -708,  -708,  -209,  -210,  -215,  -216,  -217,
  -218,  -219,  -220,  -224,  -225,  -226,  -227,  -229,  -230,  -231,
  -232,  -233,  -236,  -237,  -238,  -239,  -695,  -247,  -426,  -270,
  -682,  -683,   -62,   -66,  -628,  -695,  -695,  -271,  -424,  -426,
  -695,  -308,  -266,  -708,  -267,  -708,  -272,  -708,  -276,  -708,
  -676,  -678,   -11,  -694,   -15,   -17,  -695,   -77,  -301,   -93,
   -82,  -708,  -695,  -260,  -708,  -708,  -103,  -708,  -576,  -708,
   -89,   -94,  -708,  -708,  -708,  -708,  -248,  -240,  -708,  -525,
  -708,  -695,  -708,  -251,  -702,  -701,  -253,  -702,  -304,  -305,
  -672,  -397,  -627,  -400,  -668,  -668,  -668,  -610,  -612,  -612,
  -612,  -626,  -629,  -630,  -631,  -632,  -633,  -634,  -635,  -636,
  -708,  -638,  -640,  -642,  -647,  -649,  -650,  -653,  -658,  -660,
  -661,  -663,  -664,  -665,  -708,   -12,  -342,  -343,   -12,  -708,
  -708,  -708,  -708,  -708,  -708,  -260,  -708,  -708,  -303,   -56,
  -114,  -115,  -116,  -708,  -708,  -260,  -325,  -599,  -708,   -12,
  -604,  -333,  -695,  -538,  -558,  -563,  -708,  -565,  -541,  -560,
  -708,  -562,  -543,  -708,  -546,  -708,  -548,  -551,  -708,  -552,
  -708,  -574,    -9,   -19,  -708,   -29,  -708,  -283,  -708,  -708,
  -260,  -708,  -708,  -708,  -708,  -419,  -708,  -262,  -264,  -708,
  -708,   -67,  -259,  -412,  -708,  -708,   -69,  -413,  -311,  -697,
  -682,  -683,  -682,  -683,  -695,   -53,  -445,  -447,  -449,  -452,
  -506,  -459,  -462,  -465,  -499,  -504,  -505,  -708,  -708,  -509,
  -510,  -511,  -512,  -513,  -514,  -515,  -516,  -517,  -396,  -519,
  -708,  -708,  -523,  -708,  -708,  -427,   -61,  -408,  -424,  -256,
  -257,  -708,  -386,  -708,  -307,  -274,  -273,  -277,  -708,  -674,
  -675,  -708,   -14,   -79,  -708,   -85,   -91,  -695,  -682,  -683,
  -258,  -686,  -102,  -708,   -87,  -708,  -207,  -221,  -695,  -707,
  -707,  -296,  -298,  -300,  -700,  -708,  -695,  -708,  -607,  -608,
  -708,  -609,  -708,  -619,  -708,  -622,  -708,  -624,  -708,  -353,
  -708,  -355,  -357,  -360,  -363,  -695,  -641,  -651,  -652,  -662,
  -666,  -707,  -344,  -707,   -57,  -345,  -346,  -319,  -320,  -708,
  -708,  -432,  -322,  -708,  -695,  -682,  -683,  -686,  -302,   -12,
  -114,  -115,  -118,  -695,   -12,  -708,  -327,  -708,   -12,  -627,
  -627,  -708,  -670,  -564,  -567,  -568,  -569,  -570,   -12,  -542,
  -545,  -547,  -550,  -554,  -556,  -128,   -33,  -281,  -708,  -695,
  -682,  -683,  -683,  -682,   -45,  -255,  -708,  -698,  -274,   -39,
  -203,   -40,  -204,   -68,   -41,  -206,   -42,  -205,   -70,  -708,
  -708,  -708,  -708,  -419,  -708,  -708,  -450,  -451,  -708,  -708,
  -708,  -708,  -461,  -708,  -464,  -708,  -708,  -502,  -503,  -507,
  -508,  -518,  -520,  -115,  -521,  -708,  -406,  -386,  -410,  -409,
  -708,  -421,  -387,  -695,   -12,  -423,  -268,  -278,  -677,   -83,
  -419,   -95,  -310,  -707,  -349,   -12,  -526,  -707,  -527,  -528,
  -252,  -398,  -401,  -403,  -390,  -708,  -668,  -648,  -653,  -667,
  -611,  -612,  -612,  -639,  -612,  -612,  -659,  -612,  -636,  -654,
  -695,  -708,  -708,  -362,  -637,  -708,  -347,  -708,  -708,  -321,
  -323,  -708,  -708,   -12,  -419,  -708,  -419,  -708,  -708,   -12,
  -330,  -708,  -695,  -695,  -628,  -708,  -334,  -708,  -282,  -419,
   -38,  -202,  -263,  -708,  -446,  -448,  -455,  -458,  -467,  -695,
  -695,  -468,  -474,  -708,  -479,  -485,  -487,  -489,  -490,  -493,
  -494,  -557,  -497,  -695,  -695,  -522,  -695,  -695,  -557,  -699,
  -695,  -500,  -501,  -241,   -12,   -63,  -668,  -668,  -668,  -368,
  -370,  -370,  -370,  -385,  -708,  -695,  -636,  -644,  -645,  -656,
  -425,   -10,   -12,  -532,  -350,  -708,  -708,  -530,   -12,   -12,
  -708,  -399,  -606,  -708,  -615,  -708,  -617,  -708,  -620,  -708,
  -623,  -625,  -354,  -356,  -358,  -361,  -317,  -708,  -318,  -708,
  -437,  -440,  -443,  -444,  -277,  -707,  -324,  -326,  -600,  -708,
  -332,  -602,  -603,  -605,  -604,  -566,  -453,  -454,  -483,  -469,
  -472,  -475,  -477,  -708,  -486,  -492,  -708,  -496,  -498,  -456,
  -457,  -460,  -463,  -708,  -466,  -428,  -708,  -365,  -366,  -367,
  -376,  -378,  -708,  -381,  -708,  -383,  -388,  -708,  -708,  -643,
  -708,  -531,   -12,  -593,  -594,  -708,  -708,  -293,  -529,  -708,
  -708,  -695,  -392,  -394,  -395,  -612,  -612,  -612,  -612,  -708,
  -708,   -12,  -433,  -708,  -708,  -441,  -429,  -430,  -431,  -328,
   -12,  -476,  -470,  -708,  -708,  -480,  -481,  -484,  -488,  -491,
  -495,  -668,  -646,  -369,  -370,  -370,  -370,  -370,  -657,  -370,
  -389,  -655,  -708,  -303,  -525,  -260,  -708,  -708,  -303,  -402,
  -404,  -391,  -708,  -708,  -613,  -616,  -618,  -621,  -359,  -707,
   -12,  -438,  -439,  -442,  -708,  -708,  -473,  -478,  -708,  -364,
  -708,  -373,  -708,  -375,  -708,  -379,  -708,  -382,  -384,  -302,
  -686,  -524,  -695,  -682,  -683,  -686,  -302,  -393,  -612,  -348,
  -707,  -335,  -471,  -482,  -370,  -370,  -370,  -370,  -419,  -614,
  -434,  -435,  -436,  -708,  -371,  -374,  -377,  -380,  -370,  -372 ]

clist = [
'39,222,217,729,385,39,645,390,349,350,268,119,354,133,133,283,283,283',
'266,397,496,338,345,593,770,434,274,278,348,348,334,905,348,39,309,309',
'346,540,585,588,267,431,788,844,6,128,209,451,893,6,319,319,352,353',
'440,446,136,136,284,284,284,39,305,401,402,403,404,285,285,285,329,358',
'374,374,374,304,418,419,119,133,495,602,504,348,348,348,348,319,319',
'319,749,339,896,738,739,741,873,270,277,279,340,343,530,116,489,336',
'493,709,543,546,561,706,550,706,126,885,39,322,939,953,553,956,665,755',
'701,39,864,39,120,1072,908,115,303,1074,425,1003,2,425,1108,971,985',
'301,694,425,1005,1095,940,954,981,709,712,957,208,703,371,375,623,625',
'364,414,6,407,464,26,764,698,634,332,26,405,341,6,697,387,342,429,430',
'281,294,295,362,606,386,26,453,454,335,541,337,849,850,784,26,26,26',
'919,26,609,355,610,791,1024,283,1004,973,1136,1137,975,1071,551,39,881',
'457,735,988,509,989,441,488,1013,498,499,857,450,26,1086,1108,1009,1170',
'26,26,911,1130,26,504,39,833,1010,1012,399,417,417,974,842,934,935,838',
'1162,839,841,709,843,412,846,1097,706,706,283,283,225,769,1157,1098',
'406,1099,1074,283,877,664,1,749,389,391,392,903,393,394,304,395,26,396',
'964,793,798,26,26,26,26,26,870,26,785,891,589,440,446,524,527,39,887',
'715,284,39,900,119,893,309,39,724,284,285,787,533,348,1003,561,274,782',
'285,542,278,1128,319,309,860,736,1104,1102,1042,,,,717,,608,39,888,',
'569,319,,896,514,,304,596,914,,528,304,612,531,39,39,1057,916,893,,17',
'961,962,720,119,17,,1133,,,,,720,,268,26,26,26,26,26,26,26,,929,1087',
',26,26,26,892,520,894,,17,312,312,590,591,513,,26,1159,,516,611,,774',
'854,522,515,641,937,301,,133,,783,301,646,,,17,497,749,749,,512,992',
',,500,361,370,370,,720,26,26,,952,952,,652,720,952,26,633,283,657,,',
'809,413,424,893,,424,136,1090,441,,,424,26,913,450,687,26,,,693,,26',
',,,17,819,821,,440,446,824,826,592,17,,17,917,823,,652,921,,828,869',
',,938,938,26,938,728,,866,880,960,1047,1048,1049,972,283,952,651,,39',
'26,26,26,656,,,,309,,,441,1039,1040,1171,1041,309,450,,,441,709,26,',
'319,923,450,706,705,,569,,319,,,,531,,26,561,561,955,,,531,,,696,425',
'922,925,,,,,17,1011,423,425,425,423,,,425,425,1151,423,432,283,734,779',
',39,452,,39,,,283,1172,17,,878,441,765,,749,749,,450,,441,,,1035,450',
'39,619,621,624,624,1029,866,786,,,,,1019,26,773,,,283,761,,,763,,,952',
',,39,,1075,133,1139,441,930,39,,888,646,450,,,,,,646,845,859,17,,,851',
'17,,,,312,17,1045,,,,,805,,,1062,,26,687,687,,806,312,136,1088,,818',
'26,814,,879,,1070,858,17,,1105,1081,1106,1082,646,,26,,,,,1096,,,,17',
'17,,,309,,,,884,,652,926,,657,1168,309,,918,,,319,,,569,,569,,,425,',
',319,531,938,,,,348,26,,,26,,871,,,646,,26,417,,,,,,646,1096,1096,26',
',,,26,,,,,,,39,569,569,977,,39,1164,,,39,,,646,1134,,,,133,,39,26,,',
'26,26,,,26,,1096,,,1163,26,26,,,,26,26,646,,915,,,,,452,,432,,,,983',
',,687,987,,687,687,927,687,801,,801,884,687,687,687,1007,,,,,976,,,',
',,,,,,39,,,,,348,,17,,,,39,1036,,424,312,,,968,1043,,,,312,424,424,',
',889,424,424,889,,726,,,,,,,,,980,,,,,687,,39,886,,,984,,39,,,,,1152',
',1018,,,,,,,1023,,646,646,,646,845,,687,26,17,,,17,26,26,687,,26,,720',
',1015,,884,,,,26,,,39,977,,17,,977,,977,,977,797,,,374,,26,,,39,,569',
',1064,,39,39,,,,319,17,,,423,,,,17,319,,,,,423,423,,,,423,423,820,822',
',,969,825,827,,,,1061,1131,1132,26,,,1069,,,687,,,,,26,,967,976,,976',
',348,348,,,,,1116,,1121,,424,,,374,977,,977,39,977,,977,,,,968,26,968',
'312,968,319,15,26,,,,15,39,26,312,,687,,,,,39,,977,687,687,,743,745',
'747,,,283,,,1114,,,,15,,,,,,,,441,450,,,,,450,1129,,,,26,,,39,976,,',
'646,687,15,17,687,,,,17,,,26,17,,,,,26,26,,,,17,683,,968,,968,,968,',
'968,,,,,,,1160,895,423,897,,,,,,931,,,16,,,,,16,,15,968,,820,822,827',
'825,,,15,889,15,455,226,969,,969,,969,,,,226,226,226,,16,310,310,,,17',
'1101,,26,,967,,967,,967,,17,,,,,,,,,,,26,16,26,26,,,226,226,,26,226',
'359,369,369,,,501,,,,,,,,,,,17,,,,,,17,26,,,,,517,,15,,15,,,15,,970',
'26,,969,15,969,931,969,16,969,,,,226,226,226,226,16,15,16,,,,,,967,',
'967,,967,17,967,,,,,969,,,,,,,370,,,,,17,,,,1067,,17,17,,,967,,,,,,',
',,,,,,,,,,,,,683,683,681,15,,,,15,,,,,15,,,,,,,,,,,,16,226,422,226,226',
'422,226,,,,,422,226,226,,,15,1051,1053,1055,,,370,,,16,17,,1076,,1077',
',1078,15,15,994,996,,998,1000,658,1001,,,38,17,,,,38,,,,,17,,,,,,,226',
'226,,,,,,,,226,,,,,,,38,308,308,,699,700,,,,704,1107,16,1109,,,16,,17',
',310,16,,,,,713,,,38,,,716,,,,,310,,357,373,373,373,,,,,,,16,,732,,',
',,,,683,,,683,683,,683,226,16,16,,683,683,683,,,,1141,1143,1145,1147',
',1148,,1158,,38,,226,,,,,,,38,,38,,,,1165,,1166,226,1167,,,,,,,,,,,',
'681,681,,15,,,,792,,13,,,,,13,,,1178,,683,1174,1175,1176,1177,,,,,1124',
'1125,1126,1127,,,1179,,,,,,,,13,,,,,,,683,,,,,,,,683,226,,,,,38,,,,',
',,13,,,,,15,,,15,,363,,,,,,,,38,,,,,,,,,,,15,,,,,,,,,,,,1169,16,,,,',
',,,310,,226,872,,13,15,,310,15,,,,15,13,,13,226,,15,15,683,,,15,15,',
',,,904,38,,,,38,,,681,308,38,681,681,,681,,,,,681,681,681,,,,,308,,',
',,,,,16,,,16,38,,,,,683,226,,,,,,344,683,683,,226,38,38,,16,,,,,,,,',
',,13,,420,,,420,,,,,,420,936,,,681,16,,,422,226,,,16,683,13,,683,,422',
'422,,,,422,422,,,,,,,,,,681,,,,,15,,,681,,15,,,,15,,,,,,,,,,15,,,682',
',,,1002,,,,,,,,,,,15,13,,,,13,,310,,,13,1021,1022,,,,,,310,,,,,,,,,',
'1026,1027,,,,,,,,,13,,,,415,428,,,,,15,1044,681,,,,,13,13,,,15,38,,',
',,,,,308,,,,16,,,,308,16,226,,,16,,,,,,,,,,16,,,,,,15,,,,,681,15,,,',
',,422,681,681,,,,,,,506,,508,,,510,511,,,,,,,,38,,,38,,,,,,,,,,,,,15',
',,,681,,,681,38,16,,,,,,,,,15,,16,,,,15,15,29,,,,,29,,,,38,,,,,,,38',
',,,29,,,,682,682,226,,,29,29,29,16,29,,,,,16,684,,,13,,,,,,,,,,,,,,',
',,,,29,,,,,29,29,,,29,,15,637,,,,,,,,,,16,,,,308,,,,15,,,,,1059,,308',
',15,16,,,,1065,,16,16,,,,,,13,,29,13,,,,29,29,29,29,29,,29,,,,,,,,,',
',13,,15,,,,,,,,,,,,38,,,,,38,,,707,38,344,,710,13,,,420,,,38,13,,,,',
'1111,420,420,,16,682,420,420,682,682,,682,,,,,682,682,682,,,,,16,707',
'226,226,344,,,,,16,29,29,29,29,29,29,29,,,,,29,29,29,,,,,,,756,,,,226',
'29,,38,,,,,,,,,,,38,16,,428,684,684,,,,,682,,,,,,,,,,,,,29,29,,,,,,',
',29,,,,,,38,,682,,,,38,,,807,682,,29,,,,29,,707,344,,29,13,,,,,13,,',
',13,,680,,,,,,,,13,,,,,,,,29,,38,,,,,,,,420,,,,,373,29,29,29,,38,,,',
'1063,,38,38,,,867,,,868,,,,29,,,,,,,,682,,,,,,,876,29,,,,,13,,,,,,,',
',,,13,899,,,,,684,,,684,684,,684,,,,,684,684,684,,,,,,,,373,682,,,38',
',,,,682,682,13,,,,,,13,,,,,,38,,,,,29,,,,38,,928,,,,,,,,,,,,,,,,,682',
',,682,684,,,,,,,13,,686,,,,,,,,38,,,,,,,,13,,29,,1068,684,13,13,,233',
',,29,684,,,,,282,282,282,680,680,,,,,29,,,327,328,,330,331,,333,,679',
',,,,,,,,,,,,282,282,,,,,,1014,,,,,,,,,,,,,,,,29,,,29,344,,13,,,,29,',
',,,,,,,,29,,,684,29,13,,,,,,,,,13,,,,,,,,,,,,,,,,685,29,,,29,29,,,29',
',,,,,29,29,,,,29,29,,,,13,684,,,,,,,,684,684,,,,,,,,,,,,,,,,,,,,,680',
',,680,680,,680,,,,,680,680,680,,,,,686,686,684,282,427,684,,433,282',
',,,,433,,,,,,,,,,,,,233,,,,465,466,467,468,469,470,471,472,473,474,475',
'476,477,478,479,480,481,482,483,484,485,486,,,679,679,487,,680,,,,,282',
'282,,,,,,,29,282,,,,29,29,,282,29,282,,,282,282,,,680,,29,,,,,,680,',
',,,,,,,,,,29,,,,,,,,,,,,,,,,536,,537,,,,,,,,,,,,,,685,685,,,,,,,,,,',
',,,,29,,686,,,686,686,,686,,,29,,686,686,686,,,,,,,,,680,,,,,,,,,,,',
',,,,,,,29,,,,,,29,,,282,,,29,679,,,679,679,,679,,,,,679,679,679,,,,',
',,680,,686,,,,,,680,680,,,,,,,,,,282,,433,433,433,29,,,,,,,,686,,,,',
',,,686,,29,,,,,,29,29,680,,,680,328,,679,,,,,,,282,,282,685,282,,685',
'685,,685,,,,,685,685,685,,,,282,,,679,,,,,,433,,679,727,,,,,,,,,282',
',,282,,,,,,,,,,,,,,,29,,686,,,,,,,,,282,,,,,,,,29,685,29,29,,,,,,29',
',,,282,282,,,,,,,,,,282,,,,,,,685,,,29,686,,679,,685,,,,686,686,,,,',
'29,,,,,,,,282,433,282,,,,815,,,282,282,433,433,,,,433,433,,,,,,,,,,',
'686,,,686,679,,,,,,,,679,679,,,,,,,,,,,,,,,,,,,,,,,,,685,,,,282,,,282',
',,,,,,,,679,,,679,,,,,,,282,,,,,,,,,,,,,,,,,,282,,,,,,,,685,,,,,,,,685',
'685,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,685,,282,685,,,,,,,433,',
',,,,,,,,,,,433,433,433,433,,,,,,,,,,,,,,,,,,,,,,,963,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,282,,,,,,,,,,,,,,,,,,,,282',
'433,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,282' ]
        racc_goto_table = arr = ::Array.new(3681, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'62,34,32,11,65,62,31,185,18,18,32,106,18,66,66,41,41,41,145,185,82,77',
'97,102,103,30,81,81,25,25,34,101,25,62,62,62,99,9,100,100,44,27,107',
'173,7,16,16,27,213,7,73,73,38,38,45,45,68,68,78,78,78,62,58,18,18,18',
'18,80,80,80,71,62,62,62,62,10,23,23,106,66,30,63,84,25,25,25,25,73,73',
'73,119,78,217,126,126,126,12,46,46,46,80,80,60,6,45,7,47,221,79,79,207',
'85,79,85,8,136,62,59,162,162,144,162,36,120,48,62,134,62,5,138,12,4',
'55,139,19,118,2,19,218,132,190,54,148,19,121,179,164,164,13,221,15,164',
'17,148,64,64,197,197,20,24,7,26,37,49,39,50,69,74,49,7,76,7,83,95,96',
'25,25,53,53,53,104,105,108,49,25,25,109,110,111,187,187,112,49,49,49',
'113,49,114,4,115,116,117,41,122,123,179,179,130,137,140,62,141,32,143',
'146,185,147,81,149,164,151,152,155,66,49,156,218,157,158,49,49,159,160',
'49,84,62,31,161,163,5,78,78,136,31,166,168,169,179,170,174,221,175,10',
'176,181,85,85,41,41,21,102,138,182,2,183,139,41,189,30,1,119,193,194',
'195,119,196,199,10,200,49,201,134,202,203,49,49,49,49,49,31,49,206,211',
'18,45,45,32,34,62,215,60,78,62,120,106,213,62,62,60,78,80,9,32,25,118',
'207,81,63,80,34,81,121,73,62,48,144,132,216,173,,,,30,,25,62,186,,212',
'73,,217,7,,10,32,31,,71,10,25,58,62,62,136,31,213,,33,187,187,45,106',
'33,,162,,,,,45,,32,49,49,49,49,49,49,49,,31,12,,49,49,49,133,59,133',
',33,33,33,10,10,6,,49,101,,55,44,,30,63,55,8,32,31,54,,66,,30,54,34',
',,33,53,119,119,,4,126,,,53,33,33,33,,45,49,49,,186,186,,81,45,186,49',
'16,41,81,,,30,21,21,213,,21,68,107,81,,,21,49,100,66,62,49,,,34,,49',
',,,33,27,27,,45,45,27,27,4,33,,33,9,47,,81,9,,47,60,,,36,36,49,36,25',
',84,79,36,126,126,126,133,41,186,46,,62,49,49,49,46,,,,62,,,81,31,31',
'12,31,62,66,,,81,221,49,,73,82,66,85,80,,212,,73,,,,58,,49,207,207,63',
',,58,,,46,19,144,144,,,,,33,36,33,19,19,33,,,19,19,11,33,70,41,80,38',
',62,70,,62,,,41,103,33,,23,81,106,,119,119,,66,,81,,,36,66,62,198,198',
'198,198,178,84,106,,,,,9,49,78,,,41,10,,,10,,,186,,,62,,133,66,126,81',
'27,62,,186,34,66,,,,,,34,34,97,33,,,99,33,,,,33,33,9,,,,,16,,,100,,49',
'62,62,,7,33,68,102,,80,49,7,,77,,9,145,33,,133,100,133,100,34,,49,,',
',,178,,,,33,33,,,62,,,,34,,81,65,,81,31,62,,18,,,73,,,212,,212,,,19',
',,73,58,36,,,,25,49,,,49,,58,,,34,,49,78,,,,,,34,178,178,49,,,,49,,',
',,,,62,212,212,214,,62,133,,,62,,,34,9,,,,66,,62,49,,,49,49,,,49,,178',
',,178,49,49,,,,49,49,34,,10,,,,,70,,70,,,,77,,,62,77,,62,62,10,62,198',
',198,34,62,62,62,18,,,,,212,,,,,,,,,,62,,,,,25,,33,,,,62,185,,21,33',
',,127,185,,,,33,21,21,,,128,21,21,128,,70,,,,,,,,,10,,,,,62,,62,125',
',,10,,62,,,,,30,,106,,,,,,,106,,34,34,,34,34,,62,49,33,,,33,49,49,62',
',49,,45,,10,,34,,,,49,,,62,214,,33,,214,,214,,214,33,,,62,,49,,,62,',
'212,,62,,62,62,,,,73,33,,,33,,,,33,73,,,,,33,33,,,,33,33,70,70,,,128',
'70,70,,,,10,18,18,49,,,10,,,62,,,,,49,,125,212,,212,,25,25,,,,,32,,34',
',21,,,62,214,,214,62,214,,214,,,,127,49,127,33,127,73,28,49,,,,28,62',
'49,33,,62,,,,,62,,214,62,62,,210,210,210,,,41,,,10,,,,28,,,,,,,,81,66',
',,,,66,10,,,,49,,,62,212,,,34,62,28,33,62,,,,33,,,49,33,,,,,49,49,,',
',33,91,,127,,127,,127,,127,,,,,,,10,131,33,131,,,,,,70,,,29,,,,,29,',
'28,127,,70,70,70,70,,,28,128,28,56,29,128,,128,,128,,,,29,29,29,,29',
'29,29,,,33,125,,49,,125,,125,,125,,33,,,,,,,,,,,49,29,49,49,,,29,29',
',49,29,29,29,29,,,56,,,,,,,,,,,33,,,,,,33,49,,,,,56,,28,,28,,,28,,131',
'49,,128,28,128,70,128,29,128,,,,29,29,29,29,29,28,29,,,,,,125,,125,',
'125,33,125,,,,,128,,,,,,,33,,,,,33,,,,33,,33,33,,,125,,,,,,,,,,,,,,',
',,,,,91,91,89,28,,,,28,,,,,28,,,,,,,,,,,,29,29,29,29,29,29,29,,,,,29',
'29,29,,,28,129,129,129,,,33,,,29,33,,131,,131,,131,28,28,210,210,,210',
'210,56,210,,,61,33,,,,61,,,,,33,,,,,,,29,29,,,,,,,,29,,,,,,,61,61,61',
',56,56,,,,56,131,29,131,,,29,,33,,29,29,,,,,56,,,61,,,56,,,,,29,,61',
'61,61,61,,,,,,,29,,56,,,,,,,91,,,91,91,,91,29,29,29,,91,91,91,,,,129',
'129,129,129,,129,,131,,61,,29,,,,,,,61,,61,,,,131,,131,29,131,,,,,,',
',,,,,89,89,,28,,,,56,,22,,,,,22,,,131,,91,129,129,129,129,,,,,210,210',
'210,210,,,129,,,,,,,,22,,,,,,,91,,,,,,,,91,29,,,,,61,,,,,,,22,,,,,28',
',,28,,22,,,,,,,,61,,,,,,,,,,,28,,,,,,,,,,,,210,29,,,,,,,,29,,29,56,',
'22,28,,29,28,,,,28,22,,22,29,,28,28,91,,,28,28,,,,,56,61,,,,61,,,89',
'61,61,89,89,,89,,,,,89,89,89,,,,,61,,,,,,,,29,,,29,61,,,,,91,29,,,,',
',75,91,91,,29,61,61,,29,,,,,,,,,,,22,,22,,,22,,,,,,22,56,,,89,29,,,29',
'29,,,29,91,22,,91,,29,29,,,,29,29,,,,,,,,,,89,,,,,28,,,89,,28,,,,28',
',,,,,,,,,28,,,90,,,,56,,,,,,,,,,,28,22,,,,22,,29,,,22,56,56,,,,,,29',
',,,,,,,,,56,56,,,,,,,,,22,,,,75,75,,,,,28,56,89,,,,,22,22,,,28,61,,',
',,,,,61,,,,29,,,,61,29,29,,,29,,,,,,,,,,29,,,,,,28,,,,,89,28,,,,,,29',
'89,89,,,,,,,75,,75,,,75,75,,,,,,,,61,,,61,,,,,,,,,,,,,28,,,,89,,,89',
'61,29,,,,,,,,,28,,29,,,,28,28,52,,,,,52,,,,61,,,,,,,61,,,,52,,,,90,90',
'29,,,52,52,52,29,52,,,,,29,92,,,22,,,,,,,,,,,,,,,,,,,52,,,,,52,52,,',
'52,,28,75,,,,,,,,,,29,,,,61,,,,28,,,,,29,,61,,28,29,,,,29,,29,29,,,',
',,22,,52,22,,,,52,52,52,52,52,,52,,,,,,,,,,,22,,28,,,,,,,,,,,,61,,,',
',61,,,75,61,75,,75,22,,,22,,,61,22,,,,,29,22,22,,29,90,22,22,90,90,',
'90,,,,,90,90,90,,,,,29,75,29,29,75,,,,,29,52,52,52,52,52,52,52,,,,,52',
'52,52,,,,,,,75,,,,29,52,,61,,,,,,,,,,,61,29,,75,92,92,,,,,90,,,,,,,',
',,,,,52,52,,,,,,,,52,,,,,,61,,90,,,,61,,,75,90,,52,,,,52,,75,75,,52',
'22,,,,,22,,,,22,,88,,,,,,,,22,,,,,,,,52,,61,,,,,,,,22,,,,,61,52,52,52',
',61,,,,61,,61,61,,,75,,,75,,,,52,,,,,,,,90,,,,,,,75,52,,,,,22,,,,,,',
',,,,22,75,,,,,92,,,92,92,,92,,,,,92,92,92,,,,,,,,61,90,,,61,,,,,90,90',
'22,,,,,,22,,,,,,61,,,,,52,,,,61,,75,,,,,,,,,,,,,,,,,90,,,90,92,,,,,',
',22,,94,,,,,,,,61,,,,,,,,22,,52,,22,92,22,22,,35,,,52,92,,,,,35,35,35',
'88,88,,,,,52,,,35,35,,35,35,,35,,87,,,,,,,,,,,,,35,35,,,,,,75,,,,,,',
',,,,,,,,,52,,,52,75,,22,,,,52,,,,,,,,,,52,,,92,52,22,,,,,,,,,22,,,,',
',,,,,,,,,,,93,52,,,52,52,,,52,,,,,,52,52,,,,52,52,,,,22,92,,,,,,,,92',
'92,,,,,,,,,,,,,,,,,,,,,88,,,88,88,,88,,,,,88,88,88,,,,,94,94,92,35,35',
'92,,35,35,,,,,35,,,,,,,,,,,,,35,,,,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,,,87,87,35,,88,,,,,35,35,,,,,,,52,35',
',,,52,52,,35,52,35,,,35,35,,,88,,52,,,,,,88,,,,,,,,,,,,52,,,,,,,,,,',
',,,,,35,,35,,,,,,,,,,,,,,93,93,,,,,,,,,,,,,,,52,,94,,,94,94,,94,,,52',
',94,94,94,,,,,,,,,88,,,,,,,,,,,,,,,,,,,52,,,,,,52,,,35,,,52,87,,,87',
'87,,87,,,,,87,87,87,,,,,,,88,,94,,,,,,88,88,,,,,,,,,,35,,35,35,35,52',
',,,,,,,94,,,,,,,,94,,52,,,,,,52,52,88,,,88,35,,87,,,,,,,35,,35,93,35',
',93,93,,93,,,,,93,93,93,,,,35,,,87,,,,,,35,,87,35,,,,,,,,,35,,,35,,',
',,,,,,,,,,,,52,,94,,,,,,,,,35,,,,,,,,52,93,52,52,,,,,,52,,,,35,35,,',
',,,,,,,35,,,,,,,93,,,52,94,,87,,93,,,,94,94,,,,,52,,,,,,,,35,35,35,',
',,35,,,35,35,35,35,,,,35,35,,,,,,,,,,,94,,,94,87,,,,,,,,87,87,,,,,,',
',,,,,,,,,,,,,,,,,,93,,,,35,,,35,,,,,,,,,87,,,87,,,,,,,35,,,,,,,,,,,',
',,,,,,35,,,,,,,,93,,,,,,,,93,93,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,93,,35,93,,,,,,,35,,,,,,,,,,,,,35,35,35,35,,,,,,,,,,,,,,,,,,,,,',
',35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,',
',,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3681, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   269,   136,   nil,   128,   123,   100,    44,   107,  -298,
    42,  -536,  -633,  -725,   nil,  -363,    37,   143,   -58,   -78,
    87,   239,  1594,  -135,   -52,   -38,    33,  -174,  1075,  1184,
  -191,  -428,   -14,   358,   -18,  2565,  -342,   -75,   -16,  -425,
   nil,   -14,   nil,   nil,    16,  -163,    71,  -164,  -374,   163,
  -327,   nil,  2065,   148,   108,    99,   980,   nil,    28,    82,
  -221,  1438,     0,  -286,    82,   -70,     5,   nil,    48,  -245,
   365,    27,   nil,    16,   121,  1722,   108,   -41,    29,  -231,
    38,     0,  -251,  -317,  -203,  -392,   nil,  2150,  1920,   908,
  1412,   693,  1640,  2236,  2096,    99,   111,   -42,   nil,   -29,
  -311,  -730,  -332,  -568,   109,  -190,     8,  -568,   108,   126,
  -149,   127,  -415,  -591,  -178,  -186,  -411,  -725,  -766,  -480,
  -447,  -758,  -698,  -659,   nil,   177,  -461,    19,   155,   441,
  -656,   429,  -724,  -355,  -576,   nil,  -621,  -782,  -861,  -857,
  -138,  -524,   nil,  -338,  -227,    -4,  -668,  -667,  -346,   -47,
   nil,   -55,   -55,   nil,   nil,  -473,  -790,  -684,  -932,  -540,
  -850,  -674,  -720,  -673,  -692,   nil,  -590,   nil,  -590,  -424,
  -422,   nil,   nil,  -629,  -422,  -421,  -420,   nil,  -327,  -888,
   nil,  -780,  -772,  -770,   nil,   -75,  -401,  -488,   nil,  -463,
  -737,   nil,   nil,   191,   187,   187,   188,  -237,   219,   188,
   189,   190,  -334,  -334,   nil,   nil,  -316,  -237,   nil,   nil,
   538,  -450,    -9,  -694,   -81,  -438,  -719,  -652,  -914,   nil,
   nil,  -398 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   356,   299,   nil,   nil,
   539,   nil,   906,   nil,   296,   297,   nil,   nil,   nil,    11,
    12,    18,   231,   nil,   nil,    14,   nil,   421,   232,   326,
   nil,   nil,   604,   230,   456,    21,  1028,   nil,   nil,   nil,
   351,    22,    23,    24,   nil,   723,   nil,   nil,   nil,   316,
   nil,    25,   313,   435,    32,   nil,   nil,    34,    37,    36,
   nil,   227,   228,   368,   nil,   135,   443,   134,    79,   nil,
   426,    95,    46,    49,   264,   288,   nil,   874,   436,   nil,
   437,   448,   nil,   653,   502,   286,   272,    50,    51,    52,
    53,    54,    55,    56,    57,    58,   nil,   273,    64,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   586,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   751,   568,
   nil,   752,   753,  1103,   966,   555,   nil,   556,   557,   nil,
   nil,   558,   nil,   560,   nil,   862,   nil,   nil,   nil,   566,
   nil,   nil,   347,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   447,   nil,   nil,   702,   695,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   942,   nil,   666,   675,   667,   668,   nil,
   nil,   669,   670,   nil,   nil,   nil,   nil,   941,   943,   nil,
   945,   946,   947,   948,   949,   nil,   577,   674,   676,   nil,
   nil,    78,    80,    81,   nil,   nil,   nil,   nil,   614,   nil,
   nil,   nil,   nil,   nil,    91,    92,   nil,   890,   790,   554,
   nil,   559,   898,   571,   573,   574,   978,   578,   979,   581,
   584,   291 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 148, :_reduce_none,
  2, 149, :_reduce_2,
  0, 150, :_reduce_3,
  1, 150, :_reduce_4,
  3, 150, :_reduce_5,
  2, 150, :_reduce_6,
  1, 152, :_reduce_none,
  2, 152, :_reduce_8,
  3, 155, :_reduce_9,
  4, 156, :_reduce_10,
  2, 157, :_reduce_11,
  0, 161, :_reduce_12,
  1, 161, :_reduce_13,
  3, 161, :_reduce_14,
  2, 161, :_reduce_15,
  1, 162, :_reduce_none,
  2, 162, :_reduce_17,
  0, 173, :_reduce_18,
  4, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  3, 154, :_reduce_22,
  2, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  3, 154, :_reduce_28,
  4, 154, :_reduce_29,
  1, 154, :_reduce_none,
  3, 154, :_reduce_31,
  3, 154, :_reduce_32,
  5, 154, :_reduce_33,
  3, 154, :_reduce_34,
  1, 154, :_reduce_none,
  3, 166, :_reduce_36,
  3, 166, :_reduce_37,
  6, 166, :_reduce_38,
  5, 166, :_reduce_39,
  5, 166, :_reduce_40,
  5, 166, :_reduce_41,
  5, 166, :_reduce_42,
  3, 166, :_reduce_43,
  1, 174, :_reduce_none,
  3, 174, :_reduce_45,
  1, 174, :_reduce_none,
  1, 172, :_reduce_none,
  3, 172, :_reduce_48,
  3, 172, :_reduce_49,
  3, 172, :_reduce_50,
  2, 172, :_reduce_51,
  0, 184, :_reduce_52,
  4, 172, :_reduce_53,
  1, 172, :_reduce_none,
  1, 165, :_reduce_none,
  0, 187, :_reduce_56,
  3, 185, :_reduce_57,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 189, :_reduce_none,
  4, 189, :_reduce_61,
  0, 197, :_reduce_62,
  4, 194, :_reduce_63,
  1, 196, :_reduce_none,
  2, 188, :_reduce_65,
  3, 188, :_reduce_66,
  4, 188, :_reduce_67,
  5, 188, :_reduce_68,
  4, 188, :_reduce_69,
  5, 188, :_reduce_70,
  2, 188, :_reduce_71,
  2, 188, :_reduce_72,
  2, 188, :_reduce_73,
  2, 188, :_reduce_74,
  2, 188, :_reduce_75,
  1, 167, :_reduce_76,
  3, 167, :_reduce_77,
  1, 202, :_reduce_78,
  3, 202, :_reduce_79,
  1, 201, :_reduce_none,
  2, 201, :_reduce_81,
  3, 201, :_reduce_82,
  5, 201, :_reduce_83,
  2, 201, :_reduce_84,
  4, 201, :_reduce_85,
  2, 201, :_reduce_86,
  4, 201, :_reduce_87,
  1, 201, :_reduce_88,
  3, 201, :_reduce_89,
  1, 205, :_reduce_none,
  3, 205, :_reduce_91,
  2, 204, :_reduce_92,
  3, 204, :_reduce_93,
  1, 207, :_reduce_94,
  3, 207, :_reduce_95,
  1, 206, :_reduce_96,
  1, 206, :_reduce_97,
  4, 206, :_reduce_98,
  3, 206, :_reduce_99,
  3, 206, :_reduce_100,
  3, 206, :_reduce_101,
  3, 206, :_reduce_102,
  2, 206, :_reduce_103,
  1, 206, :_reduce_104,
  1, 169, :_reduce_105,
  1, 169, :_reduce_106,
  4, 169, :_reduce_107,
  3, 169, :_reduce_108,
  3, 169, :_reduce_109,
  3, 169, :_reduce_110,
  3, 169, :_reduce_111,
  2, 169, :_reduce_112,
  1, 169, :_reduce_113,
  1, 210, :_reduce_114,
  1, 210, :_reduce_none,
  2, 211, :_reduce_116,
  1, 211, :_reduce_117,
  3, 211, :_reduce_118,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 163, :_reduce_124,
  1, 163, :_reduce_none,
  1, 164, :_reduce_126,
  0, 216, :_reduce_127,
  4, 164, :_reduce_128,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  3, 182, :_reduce_200,
  3, 182, :_reduce_201,
  6, 182, :_reduce_202,
  5, 182, :_reduce_203,
  5, 182, :_reduce_204,
  5, 182, :_reduce_205,
  5, 182, :_reduce_206,
  4, 182, :_reduce_207,
  3, 182, :_reduce_208,
  3, 182, :_reduce_209,
  3, 182, :_reduce_210,
  2, 182, :_reduce_211,
  2, 182, :_reduce_212,
  2, 182, :_reduce_213,
  2, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  4, 182, :_reduce_221,
  2, 182, :_reduce_222,
  2, 182, :_reduce_223,
  3, 182, :_reduce_224,
  3, 182, :_reduce_225,
  3, 182, :_reduce_226,
  3, 182, :_reduce_227,
  1, 182, :_reduce_none,
  3, 182, :_reduce_229,
  3, 182, :_reduce_230,
  3, 182, :_reduce_231,
  3, 182, :_reduce_232,
  3, 182, :_reduce_233,
  2, 182, :_reduce_234,
  2, 182, :_reduce_235,
  3, 182, :_reduce_236,
  3, 182, :_reduce_237,
  3, 182, :_reduce_238,
  3, 182, :_reduce_239,
  3, 182, :_reduce_240,
  6, 182, :_reduce_241,
  1, 182, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  3, 219, :_reduce_247,
  3, 219, :_reduce_248,
  1, 222, :_reduce_none,
  1, 223, :_reduce_none,
  2, 223, :_reduce_none,
  4, 223, :_reduce_252,
  2, 223, :_reduce_253,
  1, 217, :_reduce_none,
  3, 217, :_reduce_255,
  3, 228, :_reduce_256,
  3, 228, :_reduce_257,
  0, 230, :_reduce_258,
  1, 230, :_reduce_none,
  0, 177, :_reduce_260,
  1, 177, :_reduce_none,
  2, 177, :_reduce_none,
  4, 177, :_reduce_263,
  2, 177, :_reduce_264,
  1, 200, :_reduce_265,
  2, 200, :_reduce_266,
  2, 200, :_reduce_267,
  4, 200, :_reduce_268,
  1, 200, :_reduce_269,
  0, 233, :_reduce_270,
  2, 193, :_reduce_271,
  2, 232, :_reduce_272,
  2, 231, :_reduce_273,
  0, 231, :_reduce_274,
  1, 225, :_reduce_275,
  2, 225, :_reduce_276,
  3, 225, :_reduce_277,
  4, 225, :_reduce_278,
  1, 171, :_reduce_279,
  1, 171, :_reduce_none,
  3, 170, :_reduce_281,
  4, 170, :_reduce_282,
  2, 170, :_reduce_283,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_294,
  0, 256, :_reduce_295,
  4, 220, :_reduce_296,
  0, 257, :_reduce_297,
  4, 220, :_reduce_298,
  0, 258, :_reduce_299,
  4, 220, :_reduce_300,
  3, 220, :_reduce_301,
  3, 220, :_reduce_302,
  2, 220, :_reduce_303,
  3, 220, :_reduce_304,
  3, 220, :_reduce_305,
  1, 220, :_reduce_306,
  4, 220, :_reduce_307,
  3, 220, :_reduce_308,
  1, 220, :_reduce_309,
  5, 220, :_reduce_310,
  4, 220, :_reduce_311,
  3, 220, :_reduce_312,
  2, 220, :_reduce_313,
  1, 220, :_reduce_none,
  2, 220, :_reduce_315,
  2, 220, :_reduce_316,
  6, 220, :_reduce_317,
  6, 220, :_reduce_318,
  4, 220, :_reduce_319,
  4, 220, :_reduce_320,
  5, 220, :_reduce_321,
  4, 220, :_reduce_322,
  5, 220, :_reduce_323,
  6, 220, :_reduce_324,
  0, 259, :_reduce_325,
  6, 220, :_reduce_326,
  0, 260, :_reduce_327,
  7, 220, :_reduce_328,
  0, 261, :_reduce_329,
  5, 220, :_reduce_330,
  0, 262, :_reduce_331,
  6, 220, :_reduce_332,
  0, 263, :_reduce_333,
  0, 264, :_reduce_334,
  9, 220, :_reduce_335,
  1, 220, :_reduce_336,
  1, 220, :_reduce_337,
  1, 220, :_reduce_338,
  1, 220, :_reduce_339,
  1, 176, :_reduce_none,
  1, 199, :_reduce_341,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  2, 247, :_reduce_344,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 248, :_reduce_none,
  5, 248, :_reduce_348,
  1, 159, :_reduce_none,
  2, 159, :_reduce_350,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  1, 265, :_reduce_353,
  3, 265, :_reduce_354,
  1, 268, :_reduce_355,
  3, 268, :_reduce_356,
  1, 267, :_reduce_none,
  3, 267, :_reduce_358,
  5, 267, :_reduce_359,
  1, 267, :_reduce_360,
  3, 267, :_reduce_361,
  2, 269, :_reduce_362,
  1, 269, :_reduce_363,
  4, 270, :_reduce_364,
  2, 270, :_reduce_365,
  2, 270, :_reduce_366,
  2, 270, :_reduce_367,
  1, 270, :_reduce_368,
  2, 276, :_reduce_369,
  0, 276, :_reduce_370,
  6, 277, :_reduce_371,
  8, 277, :_reduce_372,
  4, 277, :_reduce_373,
  6, 277, :_reduce_374,
  4, 277, :_reduce_375,
  2, 277, :_reduce_none,
  6, 277, :_reduce_377,
  2, 277, :_reduce_378,
  4, 277, :_reduce_379,
  6, 277, :_reduce_380,
  2, 277, :_reduce_381,
  4, 277, :_reduce_382,
  2, 277, :_reduce_383,
  4, 277, :_reduce_384,
  1, 277, :_reduce_none,
  0, 281, :_reduce_386,
  1, 281, :_reduce_387,
  3, 282, :_reduce_388,
  4, 282, :_reduce_389,
  1, 283, :_reduce_390,
  4, 283, :_reduce_391,
  1, 284, :_reduce_392,
  3, 284, :_reduce_393,
  1, 285, :_reduce_394,
  1, 285, :_reduce_none,
  0, 289, :_reduce_396,
  0, 290, :_reduce_397,
  4, 246, :_reduce_398,
  4, 287, :_reduce_399,
  1, 287, :_reduce_400,
  0, 293, :_reduce_401,
  4, 288, :_reduce_402,
  0, 294, :_reduce_403,
  4, 288, :_reduce_404,
  0, 296, :_reduce_405,
  4, 292, :_reduce_406,
  2, 190, :_reduce_407,
  4, 190, :_reduce_408,
  5, 190, :_reduce_409,
  5, 190, :_reduce_410,
  2, 245, :_reduce_411,
  4, 245, :_reduce_412,
  4, 245, :_reduce_413,
  3, 245, :_reduce_414,
  3, 245, :_reduce_415,
  3, 245, :_reduce_416,
  2, 245, :_reduce_417,
  1, 245, :_reduce_418,
  4, 245, :_reduce_419,
  0, 298, :_reduce_420,
  4, 244, :_reduce_421,
  0, 299, :_reduce_422,
  4, 244, :_reduce_423,
  0, 300, :_reduce_424,
  3, 195, :_reduce_425,
  0, 301, :_reduce_426,
  0, 302, :_reduce_427,
  4, 295, :_reduce_428,
  5, 249, :_reduce_429,
  1, 303, :_reduce_430,
  1, 303, :_reduce_none,
  0, 306, :_reduce_432,
  0, 307, :_reduce_433,
  7, 250, :_reduce_434,
  1, 305, :_reduce_435,
  1, 305, :_reduce_none,
  1, 304, :_reduce_437,
  3, 304, :_reduce_438,
  3, 304, :_reduce_439,
  1, 308, :_reduce_none,
  2, 308, :_reduce_441,
  3, 308, :_reduce_442,
  1, 308, :_reduce_443,
  1, 308, :_reduce_444,
  1, 183, :_reduce_none,
  3, 312, :_reduce_446,
  1, 312, :_reduce_none,
  3, 314, :_reduce_448,
  1, 314, :_reduce_none,
  1, 316, :_reduce_450,
  1, 317, :_reduce_451,
  1, 315, :_reduce_none,
  4, 315, :_reduce_453,
  4, 315, :_reduce_454,
  3, 315, :_reduce_455,
  4, 315, :_reduce_456,
  4, 315, :_reduce_457,
  3, 315, :_reduce_458,
  0, 321, :_reduce_459,
  4, 315, :_reduce_460,
  2, 315, :_reduce_461,
  0, 322, :_reduce_462,
  4, 315, :_reduce_463,
  2, 315, :_reduce_464,
  0, 323, :_reduce_465,
  4, 315, :_reduce_466,
  1, 309, :_reduce_467,
  1, 309, :_reduce_468,
  2, 309, :_reduce_469,
  3, 309, :_reduce_470,
  5, 309, :_reduce_471,
  2, 309, :_reduce_472,
  4, 309, :_reduce_473,
  1, 309, :_reduce_none,
  2, 324, :_reduce_475,
  3, 324, :_reduce_476,
  2, 310, :_reduce_477,
  4, 310, :_reduce_478,
  1, 310, :_reduce_479,
  3, 310, :_reduce_480,
  1, 326, :_reduce_481,
  3, 326, :_reduce_482,
  1, 325, :_reduce_none,
  3, 311, :_reduce_484,
  1, 311, :_reduce_485,
  2, 311, :_reduce_486,
  1, 311, :_reduce_487,
  3, 311, :_reduce_488,
  1, 311, :_reduce_489,
  1, 327, :_reduce_490,
  3, 327, :_reduce_491,
  2, 330, :_reduce_492,
  1, 330, :_reduce_493,
  1, 331, :_reduce_494,
  3, 331, :_reduce_495,
  2, 328, :_reduce_496,
  1, 328, :_reduce_497,
  2, 329, :_reduce_498,
  1, 318, :_reduce_none,
  3, 318, :_reduce_500,
  3, 318, :_reduce_501,
  2, 318, :_reduce_502,
  2, 318, :_reduce_503,
  1, 318, :_reduce_none,
  1, 318, :_reduce_none,
  1, 318, :_reduce_none,
  2, 318, :_reduce_507,
  2, 318, :_reduce_508,
  1, 334, :_reduce_none,
  1, 334, :_reduce_none,
  1, 334, :_reduce_none,
  1, 334, :_reduce_none,
  1, 334, :_reduce_none,
  1, 334, :_reduce_none,
  1, 334, :_reduce_none,
  1, 334, :_reduce_none,
  1, 334, :_reduce_517,
  2, 334, :_reduce_518,
  1, 313, :_reduce_519,
  2, 335, :_reduce_520,
  2, 319, :_reduce_521,
  3, 319, :_reduce_522,
  1, 319, :_reduce_523,
  6, 158, :_reduce_524,
  0, 158, :_reduce_525,
  1, 336, :_reduce_526,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  2, 337, :_reduce_529,
  1, 337, :_reduce_none,
  2, 160, :_reduce_531,
  1, 160, :_reduce_none,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 235, :_reduce_535,
  1, 339, :_reduce_536,
  2, 339, :_reduce_537,
  3, 340, :_reduce_538,
  1, 340, :_reduce_539,
  1, 340, :_reduce_540,
  3, 236, :_reduce_541,
  4, 237, :_reduce_542,
  3, 238, :_reduce_543,
  0, 343, :_reduce_544,
  3, 343, :_reduce_545,
  1, 344, :_reduce_546,
  2, 344, :_reduce_547,
  3, 240, :_reduce_548,
  0, 346, :_reduce_549,
  3, 346, :_reduce_550,
  3, 239, :_reduce_551,
  3, 241, :_reduce_552,
  0, 347, :_reduce_553,
  3, 347, :_reduce_554,
  0, 348, :_reduce_555,
  3, 348, :_reduce_556,
  0, 332, :_reduce_557,
  2, 332, :_reduce_558,
  0, 341, :_reduce_559,
  2, 341, :_reduce_560,
  0, 342, :_reduce_561,
  2, 342, :_reduce_562,
  1, 345, :_reduce_563,
  2, 345, :_reduce_564,
  0, 350, :_reduce_565,
  4, 345, :_reduce_566,
  1, 349, :_reduce_567,
  1, 349, :_reduce_568,
  1, 349, :_reduce_569,
  1, 349, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 351, :_reduce_573,
  3, 352, :_reduce_574,
  1, 338, :_reduce_575,
  2, 338, :_reduce_576,
  1, 218, :_reduce_577,
  1, 218, :_reduce_578,
  1, 218, :_reduce_579,
  1, 218, :_reduce_580,
  1, 208, :_reduce_581,
  1, 208, :_reduce_582,
  1, 208, :_reduce_583,
  1, 208, :_reduce_584,
  1, 208, :_reduce_585,
  1, 209, :_reduce_586,
  1, 209, :_reduce_587,
  1, 209, :_reduce_588,
  1, 209, :_reduce_589,
  1, 209, :_reduce_590,
  1, 209, :_reduce_591,
  1, 209, :_reduce_592,
  1, 242, :_reduce_593,
  1, 242, :_reduce_594,
  1, 175, :_reduce_595,
  1, 175, :_reduce_596,
  1, 180, :_reduce_597,
  1, 180, :_reduce_598,
  0, 353, :_reduce_599,
  4, 252, :_reduce_600,
  0, 252, :_reduce_601,
  3, 254, :_reduce_602,
  3, 254, :_reduce_603,
  0, 355, :_reduce_604,
  3, 254, :_reduce_605,
  4, 354, :_reduce_606,
  2, 354, :_reduce_607,
  2, 354, :_reduce_608,
  2, 354, :_reduce_609,
  1, 354, :_reduce_610,
  2, 357, :_reduce_611,
  0, 357, :_reduce_612,
  6, 291, :_reduce_613,
  8, 291, :_reduce_614,
  4, 291, :_reduce_615,
  6, 291, :_reduce_616,
  4, 291, :_reduce_617,
  6, 291, :_reduce_618,
  2, 291, :_reduce_619,
  4, 291, :_reduce_620,
  6, 291, :_reduce_621,
  2, 291, :_reduce_622,
  4, 291, :_reduce_623,
  2, 291, :_reduce_624,
  4, 291, :_reduce_625,
  1, 291, :_reduce_626,
  0, 291, :_reduce_627,
  1, 229, :_reduce_628,
  1, 286, :_reduce_629,
  1, 286, :_reduce_630,
  1, 286, :_reduce_631,
  1, 286, :_reduce_632,
  1, 266, :_reduce_none,
  1, 266, :_reduce_634,
  1, 359, :_reduce_635,
  1, 360, :_reduce_636,
  3, 360, :_reduce_637,
  1, 278, :_reduce_638,
  3, 278, :_reduce_639,
  1, 361, :_reduce_640,
  2, 362, :_reduce_641,
  1, 362, :_reduce_642,
  2, 363, :_reduce_643,
  1, 363, :_reduce_644,
  1, 271, :_reduce_645,
  3, 271, :_reduce_646,
  1, 356, :_reduce_647,
  3, 356, :_reduce_648,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  2, 274, :_reduce_651,
  2, 272, :_reduce_652,
  1, 272, :_reduce_653,
  3, 364, :_reduce_654,
  3, 365, :_reduce_655,
  1, 279, :_reduce_656,
  3, 279, :_reduce_657,
  1, 358, :_reduce_658,
  3, 358, :_reduce_659,
  1, 366, :_reduce_none,
  1, 366, :_reduce_none,
  2, 280, :_reduce_662,
  1, 280, :_reduce_663,
  1, 367, :_reduce_none,
  1, 367, :_reduce_none,
  2, 275, :_reduce_666,
  2, 273, :_reduce_667,
  0, 273, :_reduce_668,
  1, 255, :_reduce_none,
  3, 255, :_reduce_670,
  0, 243, :_reduce_671,
  2, 243, :_reduce_none,
  1, 227, :_reduce_673,
  3, 227, :_reduce_674,
  3, 368, :_reduce_675,
  2, 368, :_reduce_676,
  4, 368, :_reduce_677,
  2, 368, :_reduce_678,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 297, :_reduce_none,
  1, 297, :_reduce_none,
  1, 297, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 179, :_reduce_691,
  1, 179, :_reduce_692,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 203, :_reduce_697,
  2, 178, :_reduce_698,
  2, 320, :_reduce_699,
  0, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 253, :_reduce_703,
  1, 253, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_none,
  0, 224, :_reduce_707 ]

racc_reduce_n = 708

racc_shift_n = 1180

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tEQL => 145,
  :tLOWEST => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "p_expr",
  "@2",
  "expr_value_do",
  "do",
  "@3",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@4",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@5",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_no_kwarg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@16",
  "@17",
  "f_args",
  "do_block",
  "@18",
  "@19",
  "do_body",
  "@20",
  "operation3",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "cases",
  "p_top_expr",
  "p_cases",
  "@26",
  "@27",
  "p_top_expr_body",
  "p_args",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "rbrace",
  "@28",
  "@29",
  "@30",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_kwarg",
  "p_kwrest",
  "p_kwnorest",
  "p_kw",
  "p_kw_label",
  "string_contents",
  "kwrest_mark",
  "p_primitive",
  "p_var_ref",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@31",
  "ssym",
  "dsym",
  "@32",
  "args_tail",
  "@33",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 46 omitted

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_51(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_52(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_53(val, _values, result)
                      @lexer.in_kwarg = val[2]
                      result = @builder.in_match(val[0], val[1], val[3])
                    
    result
end

# reduce 54 omitted

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_57(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

def _reduce_61(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_62(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 64 omitted

def _reduce_65(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_85(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 90 omitted

def _reduce_91(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_95(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_99(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_112(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_113(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_114(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_117(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_118(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 125 omitted

def _reduce_126(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_127(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_128(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

def _reduce_200(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_206(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_207(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 228 omitted

def _reduce_229(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_241(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_256(val, _values, result)
                      result = val
                    
    result
end

def _reduce_257(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[1]
                      end

                      result = [val[0], [@builder.forwarded_args(val[1])], val[2]]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 259 omitted

def _reduce_260(val, _values, result)
                      result = []
                    
    result
end

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_264(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_268(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_270(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_271(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_273(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = []
                    
    result
end

def _reduce_275(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_276(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_277(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_278(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

def _reduce_294(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_295(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_296(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_310(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_313(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 314 omitted

def _reduce_315(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_316(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_317(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_318(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_321(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_322(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_323(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_325(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_326(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_327(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_329(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_330(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_331(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:def)
                      @current_arg_stack.push(nil)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_333(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_334(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:defs)
                      @current_arg_stack.push(nil)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_336(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_337(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_338(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_339(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 342 omitted

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

def _reduce_348(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      result = val
                    
    result
end

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = []
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_378(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 385 omitted

def _reduce_386(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_387(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_388(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_389(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_390(val, _values, result)
                      result = []
                    
    result
end

def _reduce_391(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_392(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_393(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_394(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                      @context.push(:lambda)
                    
    result
end

def _reduce_397(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_398(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_399(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_400(val, _values, result)
                      if val[0].any?
                        @max_numparam_stack.has_ordinary_params!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_401(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_403(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_404(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_405(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_406(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_407(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_415(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_416(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_417(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_418(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_419(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_420(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_422(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_423(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_424(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_425(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[2] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_426(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_427(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_428(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_429(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 431 omitted

def _reduce_432(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push
                      @pattern_hash_keys.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_433(val, _values, result)
                      @lexer.in_kwarg = val[1]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_435(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_438(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_444(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_454(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_455(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_456(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_457(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_458(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_459(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_460(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.array_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_462(val, _values, result)
                      @pattern_hash_keys.push
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = false
                    
    result
end

def _reduce_463(val, _values, result)
                      @pattern_hash_keys.pop
                      @lexer.in_kwarg = val[1]
                      result = @builder.hash_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_465(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_466(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_470(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest ]
                    
    result
end

def _reduce_471(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest, *val[4] ]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]) ]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]), *val[3] ]
                    
    result
end

# reduce 474 omitted

def _reduce_475(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = [ item ]
                    
    result
end

def _reduce_476(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1], val[2])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_477(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest ]
                    
    result
end

def _reduce_478(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest, *val[3] ]
                    
    result
end

def _reduce_479(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest ]
                    
    result
end

def _reduce_480(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest, *val[2] ]
                    
    result
end

def _reduce_481(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_482(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_487(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_488(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_490(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.match_pair(*val[0], val[1])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.match_label(*val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                    check_kwarg_name(val[0])
                    result = [:label, val[0]]
                  
    result
end

def _reduce_495(val, _values, result)
                    result = [:quoted, [val[0], val[1], val[2]]]
                  
    result
end

def _reduce_496(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [ @builder.match_nil_pattern(val[0], val[1]) ]
                    
    result
end

# reduce 499 omitted

def _reduce_500(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_503(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

def _reduce_507(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_508(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

# reduce 516 omitted

def _reduce_517(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_518(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_519(val, _values, result)
                      result = @builder.match_var(val[0])
                    
    result
end

def _reduce_520(val, _values, result)
                      name = val[1][0]
                      unless static_env.declared?(name)
                        diagnostic :error, :undefined_lvar, { :name => name }, val[1]
                      end

                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_521(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_524(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_525(val, _values, result)
                      result = []
                    
    result
end

def _reduce_526(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 527 omitted

# reduce 528 omitted

def _reduce_529(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

def _reduce_535(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_536(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_537(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_538(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_539(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_540(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_541(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_542(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_543(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_544(val, _values, result)
                      result = []
                    
    result
end

def _reduce_545(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_546(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_547(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_548(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_549(val, _values, result)
                      result = []
                    
    result
end

def _reduce_550(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_551(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_552(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_553(val, _values, result)
                      result = []
                    
    result
end

def _reduce_554(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_555(val, _values, result)
                      result = []
                    
    result
end

def _reduce_556(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_557(val, _values, result)
                      result = []
                    
    result
end

def _reduce_558(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = []
                    
    result
end

def _reduce_560(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_561(val, _values, result)
                      result = []
                    
    result
end

def _reduce_562(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_563(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_564(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_565(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_566(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_567(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_568(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_569(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_574(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_576(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_577(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_579(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_580(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_581(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_582(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_583(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_584(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_585(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_586(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_587(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_588(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_589(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_590(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_591(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_592(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_593(val, _values, result)
                      if (node = val[0]) && node.type == :ident
                        name = node.children[0]

                        if name =~ /\A_[1-9]\z/ && !static_env.declared?(name) && context.in_dynamic_block?
                          # definitely an implicit param
                          location = node.loc.expression

                          if max_numparam_stack.has_ordinary_params?
                            diagnostic :error, :ordinary_param_defined, nil, [nil, location]
                          end

                          raw_context = context.stack.dup
                          raw_max_numparam_stack = max_numparam_stack.stack.dup

                          # ignore current block scope
                          raw_context.pop
                          raw_max_numparam_stack.pop

                          raw_context.reverse_each do |outer_scope|
                            if outer_scope == :block || outer_scope == :lambda
                              outer_scope_has_numparams = raw_max_numparam_stack.pop > 0

                              if outer_scope_has_numparams
                                diagnostic :error, :numparam_used_in_outer_scope, nil, [nil, location]
                              else
                                # for now it's ok, but an outer scope can also be a block
                                # with numparams, so we need to continue
                              end
                            else
                              # found an outer scope that can't have numparams
                              # like def/class/etc
                              break
                            end
                          end

                          static_env.declare(name)
                          max_numparam_stack.register(name[1].to_i)
                        end
                      end

                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_599(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_600(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_601(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_602(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_603(val, _values, result)
                      result = @builder.forward_args(val[0], val[1], val[2])
                      @static_env.declare_forward_args

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_604(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_605(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_606(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_607(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_608(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_609(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_610(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_611(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_612(val, _values, result)
                      result = []
                    
    result
end

def _reduce_613(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_614(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_615(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_616(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_617(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_618(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_619(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_620(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_621(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_622(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_623(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_624(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_625(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_626(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_627(val, _values, result)
                      result = []
                    
    result
end

def _reduce_628(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_629(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_630(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_631(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_632(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 633 omitted

def _reduce_634(val, _values, result)
                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      result = val[0]
                    
    result
end

def _reduce_635(val, _values, result)
                      @current_arg_stack.set(val[0][0])
                      result = val[0]
                    
    result
end

def _reduce_636(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_637(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_638(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_639(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_640(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      @current_arg_stack.set(val[0][0])

                      result = val[0]
                    
    result
end

def _reduce_641(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_642(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_643(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_644(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_645(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_646(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_647(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_648(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 649 omitted

# reduce 650 omitted

def _reduce_651(val, _values, result)
                      result = [ @builder.kwnilarg(val[0], val[1]) ]
                    
    result
end

def _reduce_652(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_653(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_654(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_655(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_656(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_657(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_658(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_659(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 660 omitted

# reduce 661 omitted

def _reduce_662(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_663(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 664 omitted

# reduce 665 omitted

def _reduce_666(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_667(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_668(val, _values, result)
                      result = []
                    
    result
end

# reduce 669 omitted

def _reduce_670(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_671(val, _values, result)
                      result = []
                    
    result
end

# reduce 672 omitted

def _reduce_673(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_674(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_675(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_676(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_677(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_678(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 679 omitted

# reduce 680 omitted

# reduce 681 omitted

# reduce 682 omitted

# reduce 683 omitted

# reduce 684 omitted

# reduce 685 omitted

# reduce 686 omitted

# reduce 687 omitted

# reduce 688 omitted

# reduce 689 omitted

# reduce 690 omitted

def _reduce_691(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_692(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 693 omitted

# reduce 694 omitted

# reduce 695 omitted

# reduce 696 omitted

def _reduce_697(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_698(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_699(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 700 omitted

# reduce 701 omitted

# reduce 702 omitted

def _reduce_703(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 704 omitted

# reduce 705 omitted

# reduce 706 omitted

def _reduce_707(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby27
  end   # module Parser

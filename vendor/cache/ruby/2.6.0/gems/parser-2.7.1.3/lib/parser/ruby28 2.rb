# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby28 < Parser::Base


  def version
    28
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-315,937,298,218,219,218,219,-315,-315,-315,1116,-116,-315,-315,-315',
'866,-315,866,229,1058,-706,866,657,619,-315,659,-315,-315,-315,298,122',
'298,1037,1064,785,121,-315,-315,619,-315,-315,-315,-315,-315,-114,-122',
'619,619,619,218,219,1063,786,-100,-119,230,552,122,1151,230,230,1110',
'121,-494,230,-86,-315,-315,-315,-315,-315,-315,-315,-315,-315,-315,-315',
'-315,-315,-315,100,101,-315,-315,-315,555,864,-315,656,297,-315,658',
'1117,-315,-315,293,-315,230,-315,230,-315,1059,-315,-315,-115,-315,-315',
'-315,-315,-315,936,-315,-595,-315,-117,-118,297,-121,297,-595,-595,-595',
'803,-120,-595,-595,-595,-315,-595,-116,-315,-315,-315,-315,-116,-315',
'-595,-315,-595,-595,-595,122,-315,230,-121,-120,121,298,-595,-595,619',
'-595,-595,-595,-595,-595,122,-706,102,103,1039,121,-114,-122,122,122',
'122,-114,-122,121,121,121,-119,-706,230,218,219,-119,-595,-595,-595',
'-595,-595,-595,-595,-595,-595,-595,-595,-595,-595,-595,-693,-607,-595',
'-595,-595,644,-595,-595,-694,608,-595,293,610,-595,-595,481,-595,230',
'-595,293,-595,861,-595,-595,644,-595,-595,-595,-595,-595,-115,-595,848',
'-595,122,-115,942,909,679,121,-117,-118,297,-121,227,-117,-118,-595',
'-121,-120,-595,-595,-595,-595,-120,-595,225,-595,679,-697,-115,608,-595',
'291,610,-595,-697,-697,-697,646,645,642,-697,-697,-122,-697,122,122',
'361,947,-117,121,121,-697,-697,-110,1123,361,646,645,642,-116,848,879',
'880,-697,-697,-119,-697,-697,-697,-697,-697,-122,-706,742,230,582,909',
'579,578,577,587,580,678,644,225,-119,808,100,101,226,590,291,1047,-697',
'-697,-697,-697,-697,-697,-697,-697,-697,-697,-697,-697,-697,-697,-107',
'230,-697,-697,-697,585,684,-697,1048,227,-697,644,-116,-697,595,594',
'598,597,-697,644,-697,591,-697,-697,644,-697,-697,-697,-697,-697,-315',
'-697,-697,-697,-117,555,862,-315,-315,-315,646,645,226,-315,-315,-592',
'-315,-697,1108,1109,-697,-697,-592,-697,-315,-697,-113,1123,102,103',
'644,576,-697,962,302,-118,-315,-315,-122,-315,-315,-315,-315,-315,632',
'646,645,632,885,626,644,633,-112,646,645,832,644,808,646,645,651,218',
'219,834,-121,-119,-315,-315,-315,-315,-315,-315,-315,-315,-315,-315',
'-315,-315,-315,-315,-592,-606,-315,-315,-315,-606,683,-315,218,219,-315',
'644,-116,-315,646,645,649,644,-315,122,-315,1051,-315,-315,121,-315',
'-315,-315,-315,-315,-315,-315,-291,-315,646,645,642,-315,-315,-315,646',
'645,647,-315,-315,225,-315,-315,-105,548,-315,-315,224,-315,-315,-315',
'-595,251,541,-430,-114,222,-315,-595,-114,-120,-315,-315,230,-315,-315',
'-315,-315,-315,632,646,645,655,885,-315,-602,646,645,660,230,122,-315',
'-602,540,248,121,-694,1057,250,249,-315,-315,-315,-315,-315,-315,-315',
'-315,-315,-315,-315,-315,-315,-315,-315,226,-430,-315,-315,-315,-605',
'683,-315,-430,424,-315,-595,-605,-315,426,425,230,-430,-315,122,-315',
'-605,-315,-315,121,-315,-315,-315,-315,-315,-601,-315,-697,-315,-315',
'-602,-430,-601,1060,-697,-697,-697,268,269,-85,-697,-697,-315,-697,872',
'-315,-315,-603,-111,868,-315,-697,-697,869,-603,608,-106,-315,607,608',
'-120,-430,610,-697,-697,-605,-697,-697,-697,-697,-697,978,-604,267,266',
'230,-316,-600,-597,-604,230,590,-598,-316,-600,-597,942,909,-604,-598',
'-601,230,-316,-697,-697,-697,-697,-697,-697,-697,-697,-697,-697,-697',
'-697,-697,-697,598,597,-697,-697,-697,-603,684,-697,230,-599,-697,131',
'591,-697,1072,769,-599,-607,-697,1075,-697,-105,-697,-697,988,-697,-697',
'-697,-697,-697,-604,-697,-697,-697,-316,-600,-597,909,-316,626,-598',
'225,225,1077,1079,-316,678,-697,557,635,-697,-697,-430,-109,-316,-697',
'1081,479,637,-697,230,1083,-697,529,-106,-118,-697,-697,-697,587,527',
'-697,-697,-697,-599,-697,-115,525,514,590,1098,1099,251,-697,-697,-697',
'-697,-697,125,126,127,128,129,-108,-112,-697,-697,229,-697,-697,-697',
'-697,-697,-316,-430,-117,226,226,-350,483,482,-430,598,597,248,-350',
'480,591,250,249,-430,246,247,1114,-350,-697,-697,-697,-697,-697,-697',
'-697,-697,-697,-697,-697,-697,-697,-697,-430,978,-697,-697,-697,251',
'863,-697,866,1115,-697,590,1118,-697,-697,866,-697,427,-697,1133,-697',
'-107,-697,-697,414,-697,-697,-697,-697,-697,-430,-697,-697,-697,-350',
'1136,587,248,-316,361,361,250,249,230,1141,-316,590,-697,86,591,-697',
'-697,-697,-697,-316,-697,349,-697,1142,-592,87,988,-697,1025,1025,-118',
'-592,-592,-592,1025,88,-592,-592,-592,-604,-592,1148,1149,348,598,597',
'-604,287,-592,591,-592,-592,-592,1157,1160,-604,110,109,111,112,-592',
'-592,769,-592,-592,-592,-592,-592,-316,1162,1164,-315,114,113,115,826',
'827,1166,-315,828,116,117,1168,-694,1168,100,101,-315,221,345,-592,-592',
'-592,-592,-592,-592,-592,-592,-592,-592,-592,-592,-592,-592,-604,118',
'-592,-592,-592,762,-592,-592,-605,220,-592,1168,1099,-592,-592,-605',
'-592,217,-592,216,-592,1160,-592,-592,-605,-592,-592,-592,-592,-592',
'1160,-592,-315,-592,215,98,86,89,90,-694,91,93,92,94,-693,230,214,-592',
'87,97,-592,-592,-592,-592,131,-592,717,-592,88,102,103,1025,-592,776',
'774,-592,320,77,78,24,9,65,787,-605,788,71,72,772,792,791,75,-697,73',
'74,76,33,34,79,80,125,126,127,128,129,81,31,30,110,109,111,112,230,582',
'21,579,578,577,794,580,8,51,322,10,114,113,115,104,64,106,105,107,770',
'108,116,117,225,100,101,47,48,46,225,547,-697,769,-306,766,799,1135',
'778,-697,545,-306,230,230,-693,804,637,782,-697,43,-306,805,324,809',
'763,66,67,225,762,68,1160,38,756,1194,1140,50,582,-697,579,578,577,1168',
'580,1138,22,561,230,745,831,98,86,89,90,-100,91,93,92,94,230,226,835',
'836,87,97,230,226,-289,-697,230,-306,70,230,88,102,103,1168,1168,44',
'45,320,77,78,24,9,65,849,514,514,71,72,230,866,226,75,-693,73,74,76',
'33,34,79,80,125,126,127,128,129,81,31,30,110,109,111,112,867,582,21',
'579,578,577,884,580,8,51,322,10,114,113,115,104,64,106,105,107,887,108',
'116,117,225,100,101,47,48,46,225,478,-693,889,-306,287,251,1135,778',
'-693,479,-306,894,896,-693,898,637,782,-693,43,-306,527,36,529,251,66',
'67,225,251,68,251,38,756,230,629,50,1104,-693,579,578,577,293,580,627',
'22,293,756,251,688,98,86,89,90,293,91,93,92,94,909,226,-113,929,87,97',
'930,226,230,-693,677,-306,70,676,88,102,103,230,909,44,45,320,77,78',
'24,9,65,944,945,230,71,72,230,672,226,75,-694,73,74,76,33,34,79,80,125',
'126,127,128,129,81,31,30,110,109,111,112,668,582,21,579,578,577,667',
'580,8,51,322,10,114,113,115,104,64,106,105,107,-288,108,116,117,225',
'100,101,47,48,46,665,671,-694,664,-315,230,251,661,778,-694,669,-315',
'639,955,-694,-290,-694,782,-694,43,-315,631,36,230,630,66,67,416,626',
'68,1104,38,579,578,577,50,580,-694,248,961,529,718,250,249,22,246,247',
'612,611,98,86,89,90,989,91,93,92,94,-110,226,-111,230,87,97,601,896',
'995,-694,562,-315,70,251,88,102,103,756,558,44,45,320,77,78,24,9,65',
'1012,-288,1016,71,72,769,786,1019,75,-697,73,74,76,33,34,79,80,1021',
'1023,1025,1025,230,81,31,30,110,109,111,112,1035,582,21,579,578,577',
'1036,580,8,51,322,10,114,113,115,104,64,106,105,107,,108,116,117,,100',
'101,47,48,46,,582,-697,579,578,577,,580,778,-697,,,,,-693,,,,-697,43',
',,36,,,66,67,,,68,,38,,,,50,,-697,778,582,,579,578,577,22,580,,,,98',
'86,89,90,,91,93,92,94,-109,,,,87,97,,,,-697,,,70,,88,102,103,,778,44',
'45,320,77,78,24,9,65,,,,71,72,,,,75,-690,73,74,76,33,34,79,80,,,,,,81',
'31,30,110,109,111,112,,,21,,,,,,8,51,322,10,114,113,115,104,64,106,105',
'107,,108,116,117,,100,101,47,48,46,,,-592,,,,,,,-592,,,,,-690,,,,-592',
'43,,,36,,,66,67,,,68,,38,,,,50,,-690,,,,,,,22,,,,,98,86,89,90,,91,93',
'92,94,,,,,87,97,,,,-592,,,70,,88,102,103,,,44,45,320,77,78,24,9,65,',
',,71,72,,,,75,-691,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112',
',,21,,,,,,8,51,322,10,114,113,115,104,64,106,105,107,,108,116,117,,100',
'101,47,48,46,,,-595,,,,,,,-595,,,,,-691,,,,-595,43,,,36,,,66,67,,,68',
',38,,,,50,,-691,,,,,,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,-595',
',,70,,88,102,103,,,44,45,320,77,78,24,9,65,,,,71,72,,,,75,-697,73,74',
'76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,,8,51,322,10,114',
'113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,-697,,,',
',,,-697,,,,,-693,,,,-697,43,,,36,,,66,67,,,68,,38,,,,50,,-697,,,,,,',
'22,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,-697,,,70,,88,102,103,',
',44,45,320,77,78,24,9,65,,,,71,72,,,,75,-694,73,74,76,33,34,79,80,,',
',,,81,31,30,110,109,111,112,,,21,,,,,,8,51,322,10,114,113,115,104,64',
'106,105,107,,108,116,117,,100,101,47,48,46,,,-694,,,,,,,-694,,,,,-694',
',,,-694,43,,,36,,,66,67,,,68,,38,,,,50,,-694,,,,,,,22,,,,,98,86,89,90',
',91,93,92,94,,,,,87,97,,,,-694,,,70,,88,102,103,,,44,45,320,77,78,24',
'9,65,,,,71,72,,,,75,-693,73,74,76,33,34,79,80,,,,,,81,31,30,110,109',
'111,112,,,21,,,,,,8,51,322,10,114,113,115,104,64,106,105,107,,108,116',
'117,,100,101,47,48,46,,,-693,,,,,,,-693,,,,,-693,,,,-693,43,,,36,,,66',
'67,,,68,,38,,,,50,,-693,,,,,,,22,,,,,98,86,89,90,,91,93,92,94,-108,',
',,87,97,,,,-693,,,70,,88,102,103,,,44,45,320,77,78,24,9,65,,,,71,72',
',,,75,,73,74,76,33,34,79,80,243,,,,,81,31,30,110,109,111,112,,,21,,',
',,,8,51,322,10,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
'47,48,46,251,255,256,257,258,268,269,263,264,259,260,,244,245,,,261',
'262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252',
'22,253,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,265,,,,,70,,88,102,103',
',,44,45,5,77,78,24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,243,,,',
',81,31,30,110,109,111,112,,,21,,,,,,8,51,7,10,114,113,115,104,64,106',
'105,107,,108,116,117,,100,101,47,48,46,251,255,256,257,258,268,269,263',
'264,259,260,,244,245,,,261,262,,43,,-262,36,,,66,67,,,68,,38,248,,254',
'50,250,249,,246,247,267,266,252,22,253,,,,98,86,89,90,,91,93,92,94,',
',,,87,97,,265,,,,,70,,88,102,103,,,44,45,320,77,78,24,9,65,,,,71,72',
',,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,673',
'8,51,322,10,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47',
'48,46,251,255,256,257,258,268,269,263,264,259,260,,244,245,,,261,262',
',43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22',
'253,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,265,,-262,,,70,,88,102,103',
',,44,45,320,77,78,24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,',
'81,31,30,110,109,111,112,,,21,,,,,933,8,51,322,10,114,113,115,104,64',
'106,105,107,,108,116,117,,100,101,47,48,46,251,255,256,257,258,268,269',
'263,264,259,260,,244,245,,,261,262,,43,,,324,,,66,67,,,68,,38,248,,254',
'50,250,249,,246,247,267,266,252,22,253,,,,98,86,89,90,,91,93,92,94,',
',,,87,97,,265,,,,,70,,88,102,103,,,44,45,320,77,78,24,9,65,,,,71,72',
',,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,673',
'8,51,322,10,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47',
'48,46,251,255,256,257,258,268,269,263,264,259,260,,244,245,,,261,262',
',43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22',
'253,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,265,,,,,70,,88,102,103,,',
'44,45,320,77,78,24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81',
'31,30,110,109,111,112,,,21,,,,,906,8,51,322,10,114,113,115,104,64,106',
'105,107,,108,116,117,,100,101,47,48,46,251,255,256,257,258,268,269,263',
'264,259,260,,244,245,,,261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50',
'250,249,,246,247,267,266,252,22,253,,,,98,86,89,90,,91,93,92,94,,,,',
'87,97,,265,,,,,70,,88,102,103,,,44,45,320,77,78,24,9,65,,,,71,72,,,',
'75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,,8,51',
'322,10,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46',
'251,255,256,257,258,268,269,263,264,259,260,,244,245,,,261,262,,43,',
',36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22,253',
',,,98,86,89,90,,91,93,92,94,,,,,87,97,,265,,,,,70,,88,102,103,,,44,45',
'5,77,78,24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110',
'109,111,112,,,21,,,,,,8,51,7,10,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,251,255,256,257,258,268,269,263,264,259,260',
',244,245,,,261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246',
'247,267,266,252,22,253,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,265,,',
',,70,,88,102,103,,,44,45,320,77,78,24,9,65,,,,71,72,,,,75,,73,74,76',
'33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,,8,51,322,10,114',
'113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,251,255,256',
'257,258,268,269,263,264,259,260,,244,245,,,261,262,,43,,,36,,,66,67',
',,68,,38,248,,254,50,250,249,,246,247,267,266,252,22,253,,,,98,86,89',
'90,,91,93,92,94,,,,,87,97,,265,,,,,70,,88,102,103,,,44,45,320,77,78',
'24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111',
'112,,,21,,,,,,8,51,322,10,114,113,115,104,64,106,105,107,,108,116,117',
',100,101,47,48,46,251,255,256,257,258,268,269,263,264,259,260,,244,245',
',,261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267',
'266,252,22,253,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,265,,,,,70,,88',
'102,103,,,44,45,320,77,78,24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79',
'80,,,,,,81,31,30,110,109,111,112,,,21,,,,,,8,51,322,10,114,113,115,104',
'64,106,105,107,,108,116,117,,100,101,47,48,46,251,255,256,257,258,268',
'269,263,264,259,260,,244,245,,,261,262,,43,,,36,,,66,67,,,68,,38,248',
',254,50,250,249,,246,247,267,266,252,22,253,,,,98,86,89,90,,91,93,92',
'94,,,,,87,97,,265,,,,,70,,88,102,103,,,44,45,320,77,78,24,9,65,,,,71',
'72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,',
',,,8,51,322,10,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
'47,48,46,251,255,256,257,258,268,269,263,264,259,260,,244,245,,,261',
'262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252',
'22,253,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,265,,,,,70,,88,102,103',
',,44,45,320,77,78,24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,',
'81,31,30,110,109,111,112,,,21,,,,,,8,51,322,10,114,113,115,104,64,106',
'105,107,,108,116,117,,100,101,47,48,46,251,255,256,257,258,268,269,263',
'264,259,260,,244,245,,,261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50',
'250,249,,246,247,267,266,252,22,253,,,,98,86,89,90,,91,93,92,94,,,,',
'87,97,230,265,,,,,70,,88,102,103,,,44,45,320,77,78,24,9,65,,,,71,72',
',,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,',
'8,51,322,10,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47',
'48,46,251,-719,-719,-719,-719,268,269,,,-719,-719,,,,,,261,262,,43,',
',36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22,253',
',,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,,,,70,,88,102,103,,,44,45,320',
'77,78,24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110',
'109,111,112,,,21,,,,,,8,51,322,10,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,251,,,,,,,,,,,,,,,,261,262,,43,,,36,,,66,67',
',,68,,38,248,,254,50,250,249,,246,247,,,252,22,253,,,,98,86,89,90,,91',
'93,92,94,,,,,87,97,,,,,,,70,,88,102,103,,,44,45,320,77,78,24,9,65,,',
',71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21',
',,,,,8,51,322,10,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
'47,48,46,251,255,256,257,258,268,269,263,264,259,260,,-719,-719,,,261',
'262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252',
'22,253,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,,,,70,,88,102,103,,',
'44,45,320,77,78,24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81',
'31,30,110,109,111,112,,,21,,,,,,8,51,322,10,114,113,115,104,64,106,105',
'107,,108,116,117,,100,101,47,48,46,251,255,256,257,258,268,269,263,264',
'259,260,,-719,-719,,,261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250',
'249,,246,247,267,266,252,22,253,,,,98,86,89,90,,91,93,92,94,,,,,87,97',
',,,,,,70,,88,102,103,,,44,45,320,77,78,24,9,65,,,,71,72,,,,75,,73,74',
'76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,,8,51,322,10,114',
'113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,251,-719,-719',
'-719,-719,268,269,,,-719,-719,,,,,,261,262,,43,,,36,,,66,67,,,68,,38',
'248,,254,50,250,249,,246,247,267,266,252,22,253,,,,98,86,89,90,,91,93',
'92,94,,,,,87,97,,,,,,,70,,88,102,103,,,44,45,320,77,78,24,9,65,,,,71',
'72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,',
',,,8,51,322,10,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
'47,48,46,251,255,256,257,258,268,269,263,,259,260,,,,,,261,262,,43,',
',324,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22,253',
',,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,,,,70,,88,102,103,,,44,45,320',
'77,78,24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110',
'109,111,112,,,21,,,,,,8,51,322,10,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,251,255,256,257,258,268,269,,,259,260,,,,',
',261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267',
'266,252,22,253,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70',
'65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110',
'109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,314,108',
'116,117,,100,101,47,48,46,251,255,256,257,258,268,269,263,264,259,260',
',-719,-719,,,261,262,,235,,,241,,,66,67,,,68,,311,248,309,254,50,250',
'249,315,246,247,267,266,252,240,253,,,,98,312,89,90,,91,93,92,94,,,',
',87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104',
'64,106,105,107,,108,116,117,,100,101,47,48,46,251,-719,-719,-719,-719',
'268,269,,,-719,-719,,,,,,261,262,,235,,,241,,,66,67,,,68,,311,248,,254',
'50,250,249,,246,247,267,266,252,240,253,,,,98,86,89,90,,91,93,92,94',
',,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115',
'104,64,106,105,107,314,108,116,117,,100,101,47,48,46,251,-719,-719,-719',
'-719,268,269,,,-719,-719,,,,,,261,262,,235,,,241,,,66,67,,,68,,,248',
',254,50,250,249,315,246,247,267,266,252,240,253,,,,98,312,89,90,,91',
'93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73',
'74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,',
',114,113,115,104,64,106,105,107,314,108,116,117,,100,101,47,48,46,251',
',,,,,,,,,,,,,,,261,262,,235,,,241,,,66,67,,,68,,739,248,,254,50,250',
'249,315,246,247,,,252,240,253,,,,98,312,89,90,,91,93,92,94,,,,,87,97',
',,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64',
'106,105,107,,108,116,117,,100,101,47,48,46,251,-719,-719,-719,-719,268',
'269,,,-719,-719,,,,,,261,262,,235,,,241,,,66,67,,,68,,,248,,254,50,250',
'249,,246,247,267,266,252,240,253,,,,98,86,89,90,,91,93,92,94,,,,,87',
'97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79',
'80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104',
'64,106,105,107,,108,116,117,,100,101,47,48,46,251,-719,-719,-719,-719',
'268,269,,,-719,-719,,,,,,261,262,,235,,,241,,,66,67,,,68,,,248,,254',
'50,250,249,,246,247,267,266,252,240,253,,,,98,86,89,90,,91,93,92,94',
',,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,33',
'34,79,80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,,51,,,114,113,115',
'104,64,106,105,107,314,108,116,117,,100,101,47,48,46,251,255,256,257',
'258,268,269,263,264,259,260,,-719,-719,,,261,262,,235,,,241,,,66,67',
',,68,,311,248,309,254,50,250,249,315,246,247,267,266,252,240,253,,,',
'98,312,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71',
'72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,242',
',,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48',
'46,251,,,,,,,,,,,,,,,,261,262,,235,,,241,,,66,67,,,68,,,248,,254,50',
'250,249,,246,247,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,,',
',70,,88,102,103,-429,,44,45,,,,-429,-429,-429,,,-429,-429,-429,251,-429',
',,,,,,,-429,-429,-429,-429,,,,261,262,,,,-429,-429,,-429,-429,-429,-429',
'-429,,,,248,,254,,250,249,,246,247,,,,,,,,,,,-429,-429,-429,-429,-429',
'-429,-429,-429,-429,-429,-429,-429,-429,-429,,,-429,-429,-429,,,-429',
',293,-429,,,-429,-429,,-429,,-429,,-429,,-429,-429,,-429,-429,-429,-429',
'-429,-322,-429,-429,-429,,,,-322,-322,-322,,,-322,-322,-322,,-322,-429',
'251,,-429,-429,,-429,-322,-429,-322,-322,,,,,-429,,261,262,-322,-322',
',-322,-322,-322,-322,-322,,,,,,,248,,,,250,249,,246,247,,,,,,,,-322',
'-322,-322,-322,-322,-322,-322,-322,-322,-322,-322,-322,-322,-322,,,-322',
'-322,-322,,,-322,,302,-322,,,-322,-322,,-322,,-322,,-322,,-322,-322',
',-322,-322,-322,-322,-322,,-322,,-322,,,,,,,,,,,,,,-322,,,-322,-322',
',-322,,-322,77,78,24,,65,,-322,,71,72,,,,75,,73,74,76,33,34,79,80,,',
',,,81,31,30,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106',
'105,107,314,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241',
',,66,67,,,68,,311,,309,,50,,,315,,,,,,240,,,,,98,312,89,90,,91,93,92',
'94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76',
'33,34,79,80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,,51,,,114,113,115',
'104,64,106,105,107,314,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,',
',,,,235,,,241,,,66,67,,,68,,311,,309,,50,,,315,,,,,,240,,,,,98,312,89',
'90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,',
'75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,,51',
',,114,113,115,104,64,106,105,107,314,108,116,117,,100,101,47,48,46,',
',,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,311,,309,,50,,,315,,,,,,240',
',,,,98,312,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103',
'71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112',
',,21,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
'47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,22',
',,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103',
'71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112',
',,21,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
'47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,22',
',,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103',
'71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111',
'112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100',
'101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,',
',,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102',
'103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109',
'111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117',
',100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50',
',,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65',
'88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110',
'109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116',
'117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,',
',50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70',
'65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68',
',,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78',
'24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81',
'336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105',
'107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66',
'67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,',
',,,,,70,,88,102,103,-307,,44,45,,,,-307,-307,-307,,,-307,-307,-307,',
'-307,,,,,,,,-307,,-307,-307,-307,,,,110,109,111,112,-307,-307,,-307',
'-307,-307,-307,-307,,,,,114,113,115,,,,,,,,,,,100,101,,,345,-307,-307',
'-307,-307,-307,-307,-307,-307,-307,-307,-307,-307,-307,-307,,,-307,-307',
'-307,,,-307,,,-307,,,-307,-307,,-307,,-307,,-307,,-307,-307,,-307,-307',
'-307,-307,-307,,-307,,-307,,98,86,89,90,,91,93,92,94,,,,-307,87,97,-307',
'-307,-307,-307,,-307,717,-307,88,102,103,,-307,77,78,24,9,65,,,,71,72',
',,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,',
'8,51,,10,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48',
'46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22,,,,',
'98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72',
'44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,',
'242,,,,,,,51,,,114,113,115,104,64,106,105,107,314,108,116,117,,100,101',
'47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,311,,,,50,,,315',
',,,,,240,,,,,98,312,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88',
'102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110',
'109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,314,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68',
',,,,,50,,,315,,,,,,240,,,,,98,312,89,90,,91,93,92,94,,,,,87,97,,,,77',
'78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81',
'31,30,110,109,111,112,,,21,,,,,,,51,,,114,113,115,104,64,106,105,107',
',108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67',
',,68,,,,,,50,,,,,,,,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77',
'78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81',
'31,30,110,109,111,112,,,21,,,,,,,51,,,114,113,115,104,64,106,105,107',
',108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67',
',,68,,,,,,50,,,,,,,,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77',
'78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81',
'31,30,110,109,111,112,,,21,,,,,,,51,,,114,113,115,104,64,106,105,107',
',108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67',
',,68,,,,,,50,,,,,,,,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,122,',
',,,121,70,,88,102,103,,,44,45,77,78,24,9,65,,,,71,72,,,,75,,73,74,76',
'33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,,8,51,7,10,114,113',
'115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,',
',,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22,,,,,98,86,89,90,,91,93',
'92,94,,,,,87,97,,,,,,416,70,,88,102,103,,,44,45,77,78,24,,65,,,,71,72',
',,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,',
',51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46',
',,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,98',
'86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44',
'45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,',
',,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46',
',,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,98',
'86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44',
'45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,',
',,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46',
',,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,98',
'86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44',
'45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,',
',,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46',
',,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,98',
'86,89,90,,91,93,92,94,,,,,87,97,,,,,,,70,,88,102,103,,,44,45,77,78,24',
'9,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111',
'112,,,21,,,,,,8,51,,10,114,113,115,104,64,106,105,107,,108,116,117,',
'100,101,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,',
',,,,,,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88',
'102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109',
'111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117',
',100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,432,,,',
'50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70',
'65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110',
'109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116',
'117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,432',
',,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24',
'70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30',
'110,109,111,112,,,21,,,,,,,51,,,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68',
',,,,,50,,,,,,,,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24',
'70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30',
'110,109,111,112,,,21,,,,,,,51,,,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68',
',,,,,50,,,,,,,,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24',
'70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30',
'110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68',
',,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78',
'24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31',
'30,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,314',
'108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,',
',68,,311,,309,,50,,,315,,,,,,240,,,,,98,312,89,90,,91,93,92,94,,,,,87',
'97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80',
',,,,,81,31,30,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106',
'105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241',
',,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87',
'97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80',
',,,,,81,31,30,110,109,111,112,,,21,,,,,,,51,,,114,113,115,104,64,106',
'105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241',
',,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87',
'97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80',
',,,,,81,31,30,110,109,111,112,,,21,,,,,,,51,,,114,113,115,104,64,106',
'105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241',
',,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87',
'97,230,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104',
'64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235',
',,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94',
',,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115',
'104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,',
',235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92',
'94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113',
'115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,',
',,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91',
'93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73',
'74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,',
',114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,',
',,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89',
'90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,',
'75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,',
',,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46',
',,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98',
'86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44',
'45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242',
',,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48',
'46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,',
',98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71',
'72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112',
',,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
'47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240',
',,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103',
'71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111',
'112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100',
'101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,',
',,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102',
'103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109',
'111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117',
',100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50',
',,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65',
'88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110',
'109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116',
'117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,',
',50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70',
'65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68',
',,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78',
'24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81',
'336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105',
'107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66',
'67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,',
',,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64',
'106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,',
'241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,',
',,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104',
'64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235',
',,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94',
',,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115',
'104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,',
',235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92',
'94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113',
'115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,',
',,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91',
'93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73',
'74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,',
',114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,',
',,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89',
'90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,',
'75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,',
',,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46',
',,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98',
'86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44',
'45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242',
',,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48',
'46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,',
',98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71',
'72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112',
',,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
'47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240',
',,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103',
'71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111',
'112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100',
'101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,',
',,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102',
'103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109',
'111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117',
',100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50',
',,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65',
'88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110',
'109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116',
'117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,',
',50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70',
'65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68',
',,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78',
'24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31',
'30,110,109,111,112,,,21,,,,,,,51,,,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68',
',,,,,50,,,,,,,,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24',
'70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30',
'110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,314',
'108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,',
',68,,311,,309,,50,,,315,,,,,,240,,,,,98,312,89,90,,91,93,92,94,,,,,87',
'97,,,,77,78,24,70,65,88,102,103,71,72,44,516,,75,,73,74,76,33,34,79',
'80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64',
'106,105,107,314,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235',
',,241,,,66,67,,,68,,311,,309,,50,,,315,,,,,,240,,,,,98,312,89,90,,91',
'93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73',
'74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,,51,,,114',
'113,115,104,64,106,105,107,314,108,116,117,,100,101,47,48,46,,,,,,,',
',,,,,,,,,,,,235,,,241,,,66,67,,,68,,311,,309,,50,,,315,,,,,,240,,,,',
'98,312,89,90,,91,93,92,94,,,,,87,97,230,,,77,78,24,70,65,88,102,103',
'71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111',
'112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100',
'101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,',
',,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102',
'103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109',
'111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117',
',100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50',
',,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65',
'88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110',
'109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116',
'117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,',
',50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70',
'65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68',
',,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,,,,70',
',88,102,103,,,44,45,77,78,24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79',
'80,,,,,,81,31,30,110,109,111,112,,,21,,,,,,8,51,,10,114,113,115,104',
'64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,43',
',,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22,,,,,98,86,89,90,,91,93,92,94',
',,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115',
'104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,',
',235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92',
'94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113',
'115,104,64,106,105,107,314,108,116,117,,100,101,47,48,46,,,,,,,,,,,',
',,,,,,,,235,,,241,,,66,67,,,68,,,,309,,50,,,315,,,,,,240,,,,,98,312',
'89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45',
',75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,',
',,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48',
'46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,739,,,,50,,,,,,,,,240',
',,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103',
'71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112',
',,21,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
'47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,22',
',,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103',
'71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111',
'112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100',
'101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,',
',,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102',
'103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109',
'111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117',
',100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50',
',,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65',
'88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110',
'109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116',
'117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,',
',50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70',
'65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,561,,66,67,,',
'68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77',
'78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,',
'81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105',
'107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66',
'67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,',
',,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64',
'106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,',
'241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,',
',,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104',
'64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235',
',,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94',
',,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115',
'104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,',
',235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92',
'94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113',
'115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,',
',,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91',
'93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73',
'74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,,,51,,,114',
'113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,',
',,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,98,86,89,90,',
'91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,',
'73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,,51,,',
'114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,',
',,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89',
'90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,',
'75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,',
',,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46',
',,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98',
'86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44',
'45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,',
',,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46',
',,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,98',
'86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44',
'45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,',
',,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46',
',,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,98',
'86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44',
'45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242',
',,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48',
'46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,',
',98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71',
'72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112',
',,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
'47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240',
',,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103',
'71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111',
'112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100',
'101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,432,,,,50,,',
',,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,,,,70,,88,102,103',
'-271,,44,45,,,,-271,-271,-271,,,-271,-271,-271,,-271,,,,,,,,-271,-271',
'-271,-271,,,,,,,,,-271,-271,,-271,-271,-271,-271,-271,,,,,,,,,,,,,,',
',,,,,,,,-271,-271,-271,-271,-271,-271,-271,-271,-271,-271,-271,-271',
'-271,-271,,,-271,-271,-271,,,-271,,293,-271,,,-271,-271,,-271,,-271',
',-271,,-271,-271,,-271,-271,-271,-271,-271,,-271,-271,-271,582,,579',
'578,577,587,580,,,,,,,-271,,590,-271,-271,-698,-271,,-271,,,,-698,-698',
'-698,-271,,-698,-698,-698,,-698,,,585,,,,,-698,-698,-698,-698,-698,',
'598,597,,,,591,-698,-698,,-698,-698,-698,-698,-698,,,,,,,,,,,,,,,,,',
',,,,,-698,-698,-698,-698,-698,-698,-698,-698,-698,-698,-698,-698,-698',
'-698,,,-698,-698,-698,,,-698,,,-698,,,-698,-698,,-698,,-698,,-698,,-698',
'-698,,-698,-698,-698,-698,-698,,-698,-698,-698,,,,,,,,,,,,,,-698,,,-698',
'-698,-698,-698,,-698,-699,-698,,,,,-698,-699,-699,-699,,,-699,-699,-699',
',-699,,,,,,,,-699,-699,-699,-699,-699,,,,110,109,111,112,-699,-699,',
'-699,-699,-699,-699,-699,,,,,114,113,115,,,,,,,,,,,100,101,,,345,-699',
'-699,-699,-699,-699,-699,-699,-699,-699,-699,-699,-699,-699,-699,,,-699',
'-699,-699,,,-699,,,-699,,,-699,-699,,-699,,-699,,-699,,-699,-699,,-699',
'-699,-699,-699,-699,,-699,-699,-699,,98,86,89,90,,91,93,92,94,,,,-699',
'87,97,-699,-699,-699,-699,,-699,717,-699,88,102,103,,-699,77,78,24,9',
'65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112',
',,21,,,,,,8,51,7,10,114,113,115,104,64,106,105,107,,108,116,117,,100',
'101,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,',
',,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102',
'103,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111',
'112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,314,108,116,117',
',100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,311,,309',
',50,,,315,,,,,,240,,,,,98,312,89,90,,91,93,92,94,,,,,87,97,,,,77,78',
'24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81',
'336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105',
'107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66',
'67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,',
',,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64',
'106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,',
'241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,',
',,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104',
'64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235',
',,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94',
',,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115',
'104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,',
',235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92',
'94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113',
'115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,',
',,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91',
'93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73',
'74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,,51,,,114',
'113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,',
',,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90',
',91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75',
',73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,,51,',
',114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,',
',,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89',
'90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,',
'75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,,51',
',,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,',
',,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86',
'89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45',
',75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,',
'51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,',
',,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98',
'86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44',
'45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242',
',,,,,,51,,,114,113,115,104,64,106,105,107,314,108,116,117,,100,101,47',
'48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,309,,50,,,315,,,',
',,240,,,,,98,312,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102',
'103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109',
'111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,314,108,116',
'117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,739',
',309,,50,,,315,,,,,,240,,,,,98,312,89,90,,91,93,92,94,,,,,87,97,,,,77',
'78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,',
'81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105',
'107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66',
'67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,',
',,,,,70,,88,102,103,,,44,45,77,78,24,9,65,,,,71,72,,,,75,,73,74,76,33',
'34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,,8,51,,10,114,113,115',
'104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,',
',43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22,,,,,98,86,89,90,,91,93,92',
'94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76',
'33,34,79,80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,,51,,,114,113,115',
'104,64,106,105,107,314,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,',
',,,,235,,,241,,,66,67,,,68,,311,,309,,50,,,315,,,,,,240,,,,,98,312,89',
'90,,91,93,92,94,,,,,87,97,,,,,,,70,,88,102,103,-271,,44,45,,,,-271,-271',
'-271,,,-271,-271,-271,582,-271,579,578,577,587,580,,,-271,-271,-271',
',,,590,,,,,,-271,-271,,-271,-271,-271,-271,-271,,,,,,,,,585,,582,,579',
'578,577,587,580,595,594,598,597,,,,591,590,,,,,,,,-271,,,,,,,-271,,',
',,293,-271,585,615,,230,,,,,,595,594,598,597,,,,591,,,,,-271,-271,,',
',,,,,,,,,,,-271,,,-271,,77,78,24,-271,65,,,,71,72,-271,,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113',
'115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,',
',,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91',
'93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73',
'74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,242,,,,,,,51,,,114',
'113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,',
',,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90',
',91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75',
',73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,',
'51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,',
',,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,840,,,,50,,,,,,,,,240,,,,',
'98,86,89,90,,91,93,92,94,,,,,87,97,,,,,,,70,,88,102,103,,,44,45,77,78',
'24,9,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111',
'112,,,21,,,,,,8,51,,10,114,113,115,104,64,106,105,107,,108,116,117,',
'100,101,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,',
',,,,,,,22,,,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88',
'102,103,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110',
'109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,314,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68',
',739,,309,,50,,,315,,,,,,240,,,,,98,312,89,90,,91,93,92,94,,,,,87,97',
',,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64',
'106,105,107,314,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235',
',,241,,,66,67,,,68,,,,309,,50,,,315,,,,,,240,,,,,98,312,89,90,,91,93',
'92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74',
'76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114',
'113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,',
',,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90',
',91,93,92,94,,,,,87,97,,,,,,,70,,88,102,103,,,44,45,77,78,24,9,65,,',
',71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21',
',,,,,8,51,322,10,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
'47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22',
',,,,98,86,89,90,,91,93,92,94,,,,,87,97,,,,,,416,70,,88,102,103,,,44',
'45,77,78,24,,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,110',
'109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106,105,107,314,108',
'116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68',
',311,,309,,50,,,315,,,,,,240,,,,,98,312,89,90,,91,93,92,94,,,,,87,97',
',,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76,33,34,79,80,',
',,,,81,31,30,110,109,111,112,,,242,,,,,,,51,,,114,113,115,104,64,106',
'105,107,314,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,,,,,,,235,,,241',
',,66,67,,,68,,311,,309,,50,,,315,,,,,,240,,,,,98,312,89,90,,91,93,92',
'94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,,,114,113',
'115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,,,,,,,,,,',
',,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89,90,,91',
'93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,,75,,73',
'74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,51,',
',114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,,',
',,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98,86,89',
'90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,',
'75,,73,74,76,33,34,79,80,,,,,,81,31,30,110,109,111,112,,,21,,,,,,,51',
',,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46,,,,',
',,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,98,86,89',
'90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44,45,',
'75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,',
',,,51,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,47,48,46',
',,,,,,,,,,,,,,,,,,,235,,,241,,,66,67,,,68,,,,,,50,,,,,,,,,240,,,,,98',
'86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,44',
'45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242',
',,,,,,337,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,,,345',
',,,,,,,,,,,,,,,,,,,391,,,36,,,66,67,,,68,,38,,,,,,,,,,,,,,,,,,98,86',
'89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,,,,75',
',73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,',
'337,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,,,345,,,',
',,,,,,,,,,,,,,,,333,,,329,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,98,86,89,90',
',91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,,,,75,,73',
'74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,337',
',,114,113,115,104,64,106,105,107,,108,116,117,,100,101,,,345,,,,,,,',
',,,,,,,,,,,,333,,,329,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,98,86,89,90,,91',
'93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,,,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,337,,,114',
'113,115,104,64,106,105,107,,108,116,117,,100,101,,,345,,,,,,,,,,,,,',
',,,,,,333,,,329,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,98,86,89,90,,91,93,92',
'94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,,,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,337,,,114,113',
'115,104,64,106,105,107,,108,116,117,,100,101,,,345,,,,,,,,,,,,,,,,,',
',,1091,,,241,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,98,86,89,90,,91,93,92,94',
',,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,,,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,337,,,114,113,115',
'104,64,106,105,107,,108,116,117,,100,101,,,345,,,,,,,,,,,,,,,,,,,,333',
',,329,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,98,86,89,90,,91,93,92,94,,,,,87',
'97,,,,77,78,24,70,65,88,102,103,71,72,,,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,110,109,111,112,,,242,,,,,,,337,,,114,113,115,104,64',
'106,105,107,,108,116,117,,100,101,,,345,,,,,,,,,,,,,,,,,,,,333,,,241',
',,66,67,,,68,,,582,,579,578,577,587,580,,,,,,,,,590,,98,86,89,90,,91',
'93,92,94,,,,,87,97,,,,347,,585,70,,88,102,103,77,78,24,,65,598,597,',
'71,72,591,,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112',
',,242,,,,,,,337,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101',
',,345,,,,,,,,,,,,,,,,,,,,391,,,36,,,66,67,,,68,,38,,,,,,,,,,,,,,,,,',
'98,86,89,90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72',
',,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242',
',,,,,,337,,,114,113,115,396,64,106,105,397,,108,116,117,,100,101,,,345',
',,,,,,,,,,,,,,,,,,,398,,,241,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,98,86,89',
'90,,91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,,,,75,',
'73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,337',
',,114,113,115,104,64,106,105,107,,108,116,117,,100,101,,,345,,,,,,,',
',,,,,,,,,,,,391,,,36,,,66,67,,,68,,38,,,,,,,,,,,,,,,,,,98,86,89,90,',
'91,93,92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,,,,75,,73,74',
'76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,337,,,114',
'113,115,396,64,106,105,397,,108,116,117,,100,101,,,345,,,,,,,,,,,,,',
',,,403,,,398,,,241,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,98,86,89,90,,91,93',
'92,94,,,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,,,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,337,,,114,113',
'115,104,64,106,105,107,,108,116,117,,100,101,,,345,,,,,,,,,,,,,,,,,',
',,1085,,,241,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,98,86,89,90,,91,93,92,94',
',,,,87,97,,,,77,78,24,70,65,88,102,103,71,72,,,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,110,109,111,112,,,242,,,,,,,337,,,114,113,115',
'104,64,106,105,107,,108,116,117,,100,101,,,345,,,,,,,,,,,,,,,,,,,,333',
',,329,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,98,86,89,90,,91,93,92,94,,,,,87',
'97,,,,77,78,24,70,65,88,102,103,71,72,,,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,110,109,111,112,,,242,,,,,,,337,,,114,113,115,104,64',
'106,105,107,,108,116,117,,100,101,,,345,,,,,,,,,,,,,,,,,,,,333,,,329',
',,66,67,,,68,,328,,,,,,,,,,,,,,,,,,98,86,89,90,,91,93,92,94,,,,,87,97',
',,,77,78,24,70,65,88,102,103,71,72,,,,75,,73,74,76,341,342,79,80,,,',
',,81,336,344,110,109,111,112,,,242,,,,,,,337,,,114,113,115,104,64,106',
'105,107,,108,116,117,,100,101,,,345,,,,,,,,,,,,,,,,,,,,333,,,241,,,66',
'67,,,68,,,582,,579,578,577,587,580,,,,,,,,,590,,98,86,89,90,,91,93,92',
'94,,,,,87,97,,,,543,,585,70,,88,102,103,77,78,24,,65,598,597,,71,72',
'591,,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,110,109,111,112,,,242',
',,,,,,337,,,114,113,115,104,64,106,105,107,,108,116,117,,100,101,,,345',
',,,,,,,,,,,,,,,,,,,1085,,,241,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,98,86',
'89,90,,91,93,92,94,,,,,87,97,,,,,,,70,,88,102,103,181,192,182,205,178',
'198,188,187,208,209,203,186,185,180,206,210,211,190,179,193,197,199',
'191,184,,,,200,207,202,201,194,204,189,177,196,195,,,,,,176,183,174',
'175,171,172,173,134,136,133,,135,,,,,,,,165,166,,162,144,145,146,153',
'150,152,,,147,148,,,,167,168,154,155,,,,,,,,,,,,,,159,158,,143,164,161',
'160,169,156,157,151,149,141,163,142,,,170,98,,,,,,,,,,,,,,97,181,192',
'182,205,178,198,188,187,208,209,203,186,185,180,206,210,211,190,179',
'193,197,199,191,184,,,,200,207,202,201,194,204,189,177,196,195,,,,,',
'176,183,174,175,171,172,173,134,136,,,135,,,,,,,,165,166,,162,144,145',
'146,153,150,152,,,147,148,,,,167,168,154,155,,,,,,,,,,,,,,159,158,,143',
'164,161,160,169,156,157,151,149,141,163,142,,,170,98,,,,,,,,,,,,,,97',
'181,192,182,205,178,198,188,187,208,209,203,186,185,180,206,210,211',
'190,179,193,197,199,191,184,,,,200,207,202,201,194,204,189,177,196,195',
',,,,,176,183,174,175,171,172,173,134,136,,,135,,,,,,,,165,166,,162,144',
'145,146,153,150,152,,,147,148,,,,167,168,154,155,,,,,,,,,,,,,,159,158',
',143,164,161,160,169,156,157,151,149,141,163,142,,,170,98,,,,,,,,,,',
',,,97,181,192,182,205,178,198,188,187,208,209,203,186,185,180,206,210',
'211,190,179,193,197,199,191,184,,,,200,207,202,201,194,204,189,177,196',
'195,,,,,,176,183,174,175,171,172,173,134,136,,,135,,,,,,,,165,166,,162',
'144,145,146,153,150,152,,,147,148,,,,167,168,154,155,,,,,,,,,,,,,,159',
'158,,143,164,161,160,169,156,157,151,149,141,163,142,,,170,98,110,109',
'111,112,,,,,,,,,,97,,,114,113,115,718,,,582,721,579,578,577,587,580',
'100,101,,,345,,,,590,,,,,,,,,,,,,,,,720,,,702,,,585,700,,,701,,973,',
',595,594,598,597,,,,591,,,,719,,,,98,86,89,90,,91,93,92,94,,,,,87,97',
',,,,,,717,,88,102,103,,,706,707,181,192,182,205,178,198,188,187,208',
'209,203,186,185,180,206,210,211,190,179,193,197,199,191,184,,,,200,207',
'202,201,194,204,189,177,196,195,,,,,,176,183,174,175,171,172,173,134',
'136,,,135,,,,,,,,165,166,,162,144,145,146,153,150,152,,,147,148,,,,167',
'168,154,155,,,,,,,,,,,,,,159,158,,143,164,161,160,169,156,157,151,149',
'141,163,142,,,170,110,109,111,112,,,,,,,,,,,,,114,113,115,718,,,582',
'721,579,578,577,587,580,100,101,,,345,,,,590,,,,,,,,,,,,,,,,720,,,702',
',,585,700,,,701,,,,,595,594,598,597,,,,591,,,,719,,,,98,86,89,90,,91',
'93,92,94,,,,,87,97,110,109,111,112,,,717,,88,102,103,,,706,707,,114',
'113,115,718,,,,721,978,,,,,100,101,,,345,590,,,,,,,,,,,,,,,,,,,720,',
',702,,,,700,,,701,,973,,,,,,,591,,,,,,,719,,,,98,979,89,90,,91,93,92',
'94,,,,,87,97,110,109,111,112,,,717,,88,102,103,,,706,707,,114,113,115',
'718,,,,721,978,,,,,100,101,,,345,590,,,,,,,,,,,,,,,,,,,720,,,702,,,',
'700,,,701,,973,,,,,,,591,,,,,,,719,,,,98,979,89,90,,91,93,92,94,,,,',
'87,97,110,109,111,112,,,717,,88,102,103,,,706,707,,114,113,115,718,',
',582,721,579,578,577,587,580,100,101,,,345,,,,590,,,,,,,,,,,,,,,,720',
',,702,,,585,700,,,701,,,,,595,594,598,597,,,,591,,,,719,,,,98,86,89',
'90,,91,93,92,94,,,,,87,97,110,109,111,112,,,717,,88,102,103,,,706,707',
',114,113,115,718,,,582,721,579,578,577,587,580,100,101,,,345,,,,590',
',,,,,,,,,,,,,,,720,,,702,,,585,700,,,701,,,,,595,594,598,597,,,,591',
',,,719,,,,98,86,89,90,,91,93,92,94,,,,,87,97,110,109,111,112,,,717,',
'88,102,103,,,706,707,,114,113,115,718,,,582,721,579,578,577,587,580',
'100,101,,,345,,,,590,,,,,,,,,,,,,,,,720,,,702,,,585,700,,,701,,,,,,',
'598,597,,,,591,,,,719,,,,98,86,89,90,,91,93,92,94,,,,,87,97,110,109',
'111,112,,,717,,88,102,103,,,706,707,,114,113,115,718,,,582,721,579,578',
'577,587,580,100,101,,,345,,,,590,,,,,,,,,,,,,,,,720,,,702,,,585,700',
',,701,,973,,,595,594,598,597,,,,591,,,,719,,,,98,86,89,90,,91,93,92',
'94,,,,,87,97,,,,,,,717,,88,102,103,,,706,707,181,192,182,205,178,198',
'188,187,208,209,203,186,185,180,206,210,211,190,179,193,197,199,191',
'184,,,,200,207,202,281,280,282,279,177,196,195,,,,,,176,183,174,175',
'276,277,278,274,136,106,105,275,,108,,,,,,165,166,,162,144,145,146,153',
'150,152,,,147,148,,,,167,168,154,155,,,,,,286,,,,,,,,159,158,,143,164',
'161,160,169,156,157,151,149,141,163,142,,,170,110,109,111,112,,,,,,',
',,,,,,114,113,115,718,,,582,721,579,578,577,587,580,100,101,,,345,,',
',590,,,,,,,,,,,,,,,,720,,,702,,,585,700,,,701,,,,,595,594,598,597,,',
',591,,,,719,,,,98,86,89,90,,91,93,92,94,,,,,87,97,110,109,111,112,,',
'717,,88,102,103,,,706,707,,114,113,115,718,,,582,721,579,578,577,587',
'580,100,101,,,345,,,,590,,,,,,,,,,,,,,,,720,,,702,,,585,700,,,701,,',
',,,,598,597,,,,591,,,,719,,,,98,86,89,90,,91,93,92,94,,,,,87,97,110',
'109,111,112,,,717,,88,102,103,,,706,707,,114,113,115,718,,,582,721,579',
'578,577,587,580,100,101,,,345,,,,590,,,,,,,,,,,,,,,,720,,,702,,,585',
'700,,,701,,,,,,,598,597,,,,591,,,,719,,,,98,86,89,90,,91,93,92,94,,',
',,87,97,110,109,111,112,,,717,,88,102,103,,,706,707,,114,113,115,718',
',,582,721,579,578,577,587,580,100,101,,,345,,,,590,,,,,,,,,,,,,,,,720',
',,702,,,585,700,,,701,,,,,,,598,597,,,,591,,,,719,,,,98,86,89,90,,91',
'93,92,94,,,,,87,97,110,109,111,112,,,717,,88,102,103,,,706,707,,114',
'113,115,718,,,582,721,579,578,577,587,580,100,101,,,345,,,,590,,,,,',
',,,,,,,,,,720,,,702,,,585,700,,,701,,,,,595,594,598,597,,,,591,,,,719',
',,,98,86,89,90,,91,93,92,94,,,,,87,97,110,109,111,112,,,717,,88,102',
'103,,,706,707,,114,113,115,718,,,582,721,579,578,577,587,580,100,101',
',,345,,,,590,,,,,,,,,,,,,,,,720,,,702,,,585,700,,,701,,1056,,,595,594',
'598,597,,,,591,,,,719,,,,98,86,89,90,,91,93,92,94,,,,,87,97,110,109',
'111,112,,,717,,88,102,103,,,706,707,,114,113,115,718,,,,721,978,,,,',
'100,101,,,345,590,,,,,,,110,109,111,112,,,,,,,,,720,,,702,114,113,115',
'700,,,701,,973,,,,,100,101,591,,345,,,,,719,,,,98,979,89,90,,91,93,92',
'94,,,,,87,97,,,,,,,717,,88,102,103,,,706,707,582,,579,578,577,587,580',
',,,,98,86,89,90,590,91,93,92,94,,,,,87,97,465,469,,,464,,717,,88,102',
'103,585,165,166,,162,144,145,146,153,150,152,598,597,147,148,,591,,167',
'168,154,155,,,,,,293,,,,,,,,159,158,,143,164,161,160,169,156,157,151',
'149,141,163,142,458,462,170,,459,,,,,,,,165,166,,162,144,145,146,153',
'150,152,,,147,148,,,,167,168,154,155,,,,,,293,,,,,,,,159,158,,143,164',
'161,160,169,156,157,151,149,141,163,142,512,462,170,,513,,,,,,,,165',
'166,,162,144,145,146,153,150,152,,,147,148,,,,167,168,154,155,,,,,,',
',,,,,,,159,158,,143,164,161,160,169,156,157,151,149,141,163,142,689',
'462,170,,690,,,,,,,,165,166,,162,144,145,146,153,150,152,,,147,148,',
',,167,168,154,155,,,,,,293,,,,,,,,159,158,,143,164,161,160,169,156,157',
'151,149,141,163,142,691,469,170,,692,,,,,,,,165,166,,162,144,145,146',
'153,150,152,,,147,148,,,,167,168,154,155,,,,,,293,,,,,,,,159,158,,143',
'164,161,160,169,156,157,151,149,141,163,142,749,462,170,,750,,,,,,,',
'165,166,,162,144,145,146,153,150,152,,,147,148,,,,167,168,154,155,,',
',,,293,,,,,,,,159,158,,143,164,161,160,169,156,157,151,149,141,163,142',
'752,469,170,,753,,,,,,,,165,166,,162,144,145,146,153,150,152,,,147,148',
',,,167,168,154,155,,,,,,293,,,,,,,,159,158,,143,164,161,160,169,156',
'157,151,149,141,163,142,689,462,170,,690,,,,,,,,165,166,,162,144,145',
'146,153,150,152,,,147,148,,,,167,168,154,155,,,,,,293,,,,,,,,159,158',
',143,164,161,160,169,156,157,151,149,141,163,142,691,469,170,,692,,',
',,,,,165,166,,162,144,145,146,153,150,152,,,147,148,,,,167,168,154,155',
',,,,,293,,,,,,,,159,158,,143,164,161,160,169,156,157,151,149,141,163',
'142,812,462,170,,813,,,,,,,,165,166,,162,144,145,146,153,150,152,,,147',
'148,,,,167,168,154,155,,,,,,293,,,,,,,,159,158,,143,164,161,160,169',
'156,157,151,149,141,163,142,814,469,170,,815,,,,,,,,165,166,,162,144',
'145,146,153,150,152,,,147,148,,,,167,168,154,155,,,,,,293,,,,,,,,159',
'158,,143,164,161,160,169,156,157,151,149,141,163,142,817,469,170,,818',
',,,,,,,165,166,,162,144,145,146,153,150,152,,,147,148,,,,167,168,154',
'155,,,,,,293,,,,,,,,159,158,,143,164,161,160,169,156,157,151,149,141',
'163,142,512,462,170,,513,,,,,,,,165,166,,162,144,145,146,153,150,152',
',,147,148,,,,167,168,154,155,,,,,,293,,,,,,,,159,158,,143,164,161,160',
'169,156,157,151,149,141,163,142,842,462,170,,843,,,,,,,,165,166,,162',
'144,145,146,153,150,152,,,147,148,,,,167,168,154,155,,,,,,293,,,,,,',
',159,158,,143,164,161,160,169,156,157,151,149,141,163,142,845,469,170',
',844,,,,,,,,165,166,,162,144,145,146,153,150,152,,,147,148,,,,167,168',
'154,155,,,,,,293,,,,,,,,159,158,,143,164,161,160,169,156,157,151,149',
'141,163,142,1172,469,170,,1171,,,,,,,,165,166,,162,144,145,146,153,150',
'152,,,147,148,,,,167,168,154,155,,,,,,293,,,,,,,,159,158,,143,164,161',
'160,169,156,157,151,149,141,163,142,1175,462,170,,1176,,,,,,,,165,166',
',162,144,145,146,153,150,152,,,147,148,,,,167,168,154,155,,,,,,293,',
',,,,,,159,158,,143,164,161,160,169,156,157,151,149,141,163,142,1177',
'469,170,,1178,,,,,,,,165,166,,162,144,145,146,153,150,152,,,147,148',
',,,167,168,154,155,,,,,,293,,,,,,,,159,158,,143,164,161,160,169,156',
'157,151,149,141,163,142,,582,170,579,578,577,587,580,582,,579,578,577',
'587,580,,590,,,,,,,590,,,,,,,,,,,,,,,585,,,,,,,585,,,,598,597,,,,591',
',598,597,,,,591' ]
        racc_action_table = arr = ::Array.new(27889, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'692,796,69,474,474,509,509,692,692,692,1056,1189,692,692,692,1042,692',
'967,21,973,868,990,411,1038,692,412,692,692,692,728,318,338,940,980',
'592,318,692,692,1040,692,692,692,692,692,1088,1092,380,381,1015,759',
'759,980,592,744,1176,1102,346,953,1102,21,868,1042,953,967,990,744,692',
'692,692,692,692,692,692,692,692,692,692,692,692,692,46,46,692,692,692',
'480,692,692,411,69,692,412,1056,692,692,338,692,474,692,509,692,973',
'692,692,1089,692,692,692,692,692,796,692,107,692,1175,1177,728,1141',
'338,107,107,107,621,1178,107,107,107,692,107,1189,692,692,692,692,1189',
'692,107,692,107,107,107,1038,692,759,480,692,1038,29,107,107,810,107',
'107,107,107,107,1040,701,46,46,943,1040,1088,1092,380,381,1015,1088',
'1092,380,381,1015,1176,869,701,640,640,1176,107,107,107,107,107,107',
'107,107,107,107,107,107,107,107,1177,234,107,107,107,1062,107,107,1178',
'373,107,344,373,107,107,236,107,869,107,29,107,689,107,107,531,107,107',
'107,107,107,1089,107,958,107,621,1089,798,798,459,621,1175,1177,29,1141',
'439,1175,1177,107,1141,1178,107,107,107,107,1178,107,27,107,843,845',
'234,370,107,27,370,107,845,845,845,1062,1062,1062,845,845,236,845,810',
'640,340,810,689,810,640,845,845,459,1062,339,531,531,531,958,674,703',
'703,845,845,459,845,845,845,845,845,439,700,531,337,361,1182,361,361',
'361,361,361,842,1069,273,843,1182,345,345,27,361,273,950,845,845,845',
'845,845,845,845,845,845,845,845,845,845,845,674,700,845,845,845,361',
'845,845,952,19,845,652,674,845,361,361,361,361,845,654,845,361,845,845',
'409,845,845,845,845,845,844,845,845,845,842,349,690,844,844,844,1069',
'1069,273,844,844,274,844,845,1041,1041,845,845,274,845,844,845,19,1069',
'345,345,408,361,845,865,336,845,844,844,19,844,844,844,844,844,872,652',
'652,398,872,624,406,398,349,654,654,652,407,624,409,409,409,378,378',
'654,349,690,844,844,844,844,844,844,844,844,844,844,844,844,844,844',
'274,41,844,844,844,233,844,844,15,15,844,410,865,844,408,408,408,413',
'844,600,844,956,844,844,600,844,844,844,844,844,464,844,957,844,406',
'406,406,464,464,464,407,407,407,464,464,18,464,844,41,333,844,844,18',
'844,464,844,275,487,327,903,41,18,844,275,233,844,464,464,968,464,464',
'464,464,464,720,410,410,410,720,818,276,413,413,413,969,3,818,276,326',
'487,3,818,972,487,487,818,464,464,464,464,464,464,464,464,464,464,464',
'464,464,464,18,903,464,464,464,389,464,464,903,133,464,275,389,464,133',
'133,325,903,464,385,464,389,464,464,385,464,464,464,464,464,277,464',
'465,464,818,276,903,277,974,465,465,465,49,49,323,465,465,464,465,699',
'464,464,278,464,699,464,465,465,699,278,369,389,464,369,795,464,903',
'795,465,465,389,465,465,465,465,465,875,388,49,49,983,548,279,280,388',
'984,875,281,548,279,280,1152,1152,388,281,277,986,548,465,465,465,465',
'465,465,465,465,465,465,465,465,465,465,769,769,465,465,465,278,465',
'465,987,282,465,322,875,465,996,997,282,42,465,999,465,388,465,465,875',
'465,465,465,465,465,388,465,465,465,548,279,280,1046,630,1046,281,350',
'400,1000,1001,630,458,465,350,400,465,465,949,465,630,465,1003,350,400',
'691,1004,1005,465,310,42,465,691,691,691,766,307,691,691,691,282,691',
'42,306,292,766,1030,1031,503,691,691,691,691,691,321,321,321,321,321',
'458,630,691,691,242,691,691,691,691,691,630,949,458,350,400,54,238,237',
'949,766,766,503,54,235,766,503,503,949,503,503,1050,54,691,691,691,691',
'691,691,691,691,691,691,691,691,691,691,949,1060,691,691,691,488,691',
'691,1054,1055,691,1060,1058,691,691,1061,691,212,691,1082,691,949,691',
'691,118,691,691,691,691,691,949,691,691,691,54,1085,1072,488,633,53',
'52,488,488,51,1091,633,1072,691,84,1060,691,691,691,691,633,691,43,691',
'1094,104,84,1060,691,1095,1096,691,104,104,104,1097,84,104,104,104,330',
'104,1100,1101,40,1072,1072,330,25,104,1072,104,104,104,1116,1119,330',
'879,879,879,879,104,104,1124,104,104,104,104,104,633,1127,1128,753,879',
'879,879,645,645,1129,753,645,645,645,1130,753,1132,879,879,753,17,879',
'104,104,104,104,104,104,104,104,104,104,104,104,104,104,330,1,104,104',
'104,1137,104,104,331,16,104,1199,1147,104,104,331,104,14,104,13,104',
'1158,104,104,331,104,104,104,104,104,1159,104,753,104,12,879,879,879',
'879,1171,879,879,879,879,1172,1174,10,104,879,879,104,104,104,104,7',
'104,879,104,879,879,879,1179,104,584,574,104,324,324,324,324,324,324',
'596,331,599,324,324,573,603,602,324,817,324,324,324,324,324,324,324',
'6,6,6,6,6,324,324,324,324,324,324,324,604,929,324,929,929,929,605,929',
'324,324,324,324,324,324,324,324,324,324,324,324,572,324,324,324,332',
'324,324,324,324,324,1084,332,817,570,334,569,618,1084,929,817,332,334',
'568,567,817,622,1084,929,817,324,334,623,324,625,564,324,324,1090,563',
'324,1183,324,553,1185,1090,324,782,817,782,782,782,1186,782,1090,324',
'549,544,542,649,324,324,324,324,539,324,324,324,324,538,332,657,659',
'324,324,522,1084,666,817,518,334,324,517,324,324,324,1187,1188,324,324',
'384,384,384,384,384,384,675,680,685,384,384,693,694,1090,384,749,384',
'384,384,384,384,384,384,366,366,366,366,366,384,384,384,384,384,384',
'384,696,585,384,585,585,585,719,585,384,384,384,384,384,384,384,384',
'384,384,384,384,722,384,384,384,232,384,384,384,384,384,1134,232,749',
'725,392,727,492,1134,585,749,232,392,732,733,749,734,1134,585,749,384',
'392,736,384,738,491,384,384,390,490,384,489,384,746,748,390,384,1151',
'749,1151,1151,1151,751,1151,390,384,754,755,758,476,384,384,384,384',
'466,384,384,384,384,761,232,392,780,384,384,781,1134,783,749,457,392',
'384,456,384,384,384,797,800,384,384,383,383,383,383,383,383,806,807',
'454,383,383,811,440,390,383,813,383,383,383,383,383,383,383,536,536',
'536,536,536,383,383,383,383,383,383,383,436,778,383,778,778,778,433',
'778,383,383,383,383,383,383,383,383,383,383,383,383,431,383,383,383',
'438,383,383,383,383,383,430,438,813,428,815,820,502,422,778,813,438',
'815,402,824,813,839,815,778,813,383,815,393,383,841,391,383,383,387',
'386,383,1035,383,1035,1035,1035,383,1035,813,502,850,374,866,502,502',
'383,502,502,372,371,383,383,383,383,877,383,383,383,383,813,438,815',
'367,383,383,363,890,893,813,359,815,383,355,383,383,383,902,353,383',
'383,365,365,365,365,365,365,907,910,911,365,365,914,916,919,365,814',
'365,365,365,365,365,365,365,920,922,923,925,928,365,365,365,365,365',
'365,365,938,1099,365,1099,1099,1099,939,1099,365,365,365,365,365,365',
'365,365,365,365,365,365,,365,365,365,,365,365,365,365,365,,930,814,930',
'930,930,,930,1099,814,,,,,814,,,,814,365,,,365,,,365,365,,,365,,365',
',,,365,,814,930,1098,,1098,1098,1098,365,1098,,,,365,365,365,365,,365',
'365,365,365,814,,,,365,365,,,,814,,,365,,365,365,365,,1098,365,365,994',
'994,994,994,994,994,,,,994,994,,,,994,396,994,994,994,994,994,994,994',
',,,,,994,994,994,994,994,994,994,,,994,,,,,,994,994,994,994,994,994',
'994,994,994,994,994,994,,994,994,994,,994,994,994,994,994,,,396,,,,',
',,396,,,,,396,,,,396,994,,,994,,,994,994,,,994,,994,,,,994,,396,,,,',
',,994,,,,,994,994,994,994,,994,994,994,994,,,,,994,994,,,,396,,,994',
',994,994,994,,,994,994,641,641,641,641,641,641,,,,641,641,,,,641,397',
'641,641,641,641,641,641,641,,,,,,641,641,641,641,641,641,641,,,641,',
',,,,641,641,641,641,641,641,641,641,641,641,641,641,,641,641,641,,641',
'641,641,641,641,,,397,,,,,,,397,,,,,397,,,,397,641,,,641,,,641,641,',
',641,,641,,,,641,,397,,,,,,,641,,,,,641,641,641,641,,641,641,641,641',
',,,,641,641,,,,397,,,641,,641,641,641,,,641,641,1012,1012,1012,1012',
'1012,1012,,,,1012,1012,,,,1012,752,1012,1012,1012,1012,1012,1012,1012',
',,,,,1012,1012,1012,1012,1012,1012,1012,,,1012,,,,,,1012,1012,1012,1012',
'1012,1012,1012,1012,1012,1012,1012,1012,,1012,1012,1012,,1012,1012,1012',
'1012,1012,,,752,,,,,,,752,,,,,752,,,,752,1012,,,1012,,,1012,1012,,,1012',
',1012,,,,1012,,752,,,,,,,1012,,,,,1012,1012,1012,1012,,1012,1012,1012',
'1012,,,,,1012,1012,,,,752,,,1012,,1012,1012,1012,,,1012,1012,241,241',
'241,241,241,241,,,,241,241,,,,241,750,241,241,241,241,241,241,241,,',
',,,241,241,241,241,241,241,241,,,241,,,,,,241,241,241,241,241,241,241',
'241,241,241,241,241,,241,241,241,,241,241,241,241,241,,,750,,,,,,,750',
',,,,750,,,,750,241,,,241,,,241,241,,,241,,241,,,,241,,750,,,,,,,241',
',,,,241,241,241,241,,241,241,241,241,,,,,241,241,,,,750,,,241,,241,241',
'241,,,241,241,1033,1033,1033,1033,1033,1033,,,,1033,1033,,,,1033,812',
'1033,1033,1033,1033,1033,1033,1033,,,,,,1033,1033,1033,1033,1033,1033',
'1033,,,1033,,,,,,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033',
'1033,,1033,1033,1033,,1033,1033,1033,1033,1033,,,812,,,,,,,812,,,,,812',
',,,812,1033,,,1033,,,1033,1033,,,1033,,1033,,,,1033,,812,,,,,,,1033',
',,,,1033,1033,1033,1033,,1033,1033,1033,1033,812,,,,1033,1033,,,,812',
',,1033,,1033,1033,1033,,,1033,1033,1034,1034,1034,1034,1034,1034,,,',
'1034,1034,,,,1034,,1034,1034,1034,1034,1034,1034,1034,379,,,,,1034,1034',
'1034,1034,1034,1034,1034,,,1034,,,,,,1034,1034,1034,1034,1034,1034,1034',
'1034,1034,1034,1034,1034,,1034,1034,1034,,1034,1034,1034,1034,1034,379',
'379,379,379,379,379,379,379,379,379,379,,379,379,,,379,379,,1034,,,1034',
',,1034,1034,,,1034,,1034,379,,379,1034,379,379,,379,379,379,379,379',
'1034,379,,,,1034,1034,1034,1034,,1034,1034,1034,1034,,,,,1034,1034,',
'379,,,,,1034,,1034,1034,1034,,,1034,1034,0,0,0,0,0,0,,,,0,0,,,,0,,0',
'0,0,0,0,0,0,23,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0',
'0,0,,0,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,,23,23,,,23,23,,0,,23',
'0,,,0,0,,,0,,0,23,,23,0,23,23,,23,23,23,23,23,0,23,,,,0,0,0,0,,0,0,0',
'0,,,,,0,0,,23,,,,,0,,0,0,0,,,0,0,1153,1153,1153,1153,1153,1153,,,,1153',
'1153,,,,1153,,1153,1153,1153,1153,1153,1153,1153,,,,,,1153,1153,1153',
'1153,1153,1153,1153,,,1153,,,,,443,1153,1153,1153,1153,1153,1153,1153',
'1153,1153,1153,1153,1153,,1153,1153,1153,,1153,1153,1153,1153,1153,443',
'443,443,443,443,443,443,443,443,443,443,,443,443,,,443,443,,1153,,,1153',
',,1153,1153,,,1153,,1153,443,,443,1153,443,443,,443,443,443,443,443',
'1153,443,,,,1153,1153,1153,1153,,1153,1153,1153,1153,,,,,1153,1153,',
'443,,443,,,1153,,1153,1153,1153,,,1153,1153,36,36,36,36,36,36,,,,36',
'36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,790',
'36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,36,36,36,790,790',
'790,790,790,790,790,790,790,790,790,,790,790,,,790,790,,36,,,36,,,36',
'36,,,36,,36,790,,790,36,790,790,,790,790,790,790,790,36,790,,,,36,36',
'36,36,,36,36,36,36,,,,,36,36,,790,,,,,36,,36,36,36,,,36,36,364,364,364',
'364,364,364,,,,364,364,,,,364,,364,364,364,364,364,364,364,,,,,,364',
'364,364,364,364,364,364,,,364,,,,,453,364,364,364,364,364,364,364,364',
'364,364,364,364,,364,364,364,,364,364,364,364,364,453,453,453,453,453',
'453,453,453,453,453,453,,453,453,,,453,453,,364,,,364,,,364,364,,,364',
',364,453,,453,364,453,453,,453,453,453,453,453,364,453,,,,364,364,364',
'364,,364,364,364,364,,,,,364,364,,453,,,,,364,,364,364,364,,,364,364',
'360,360,360,360,360,360,,,,360,360,,,,360,,360,360,360,360,360,360,360',
',,,,,360,360,360,360,360,360,360,,,360,,,,,760,360,360,360,360,360,360',
'360,360,360,360,360,360,,360,360,360,,360,360,360,360,360,760,760,760',
'760,760,760,760,760,760,760,760,,760,760,,,760,760,,360,,,360,,,360',
'360,,,360,,360,760,,760,360,760,760,,760,760,760,760,760,360,760,,,',
'360,360,360,360,,360,360,360,360,,,,,360,360,,760,,,,,360,,360,360,360',
',,360,360,620,620,620,620,620,620,,,,620,620,,,,620,,620,620,620,620',
'620,620,620,,,,,,620,620,620,620,620,620,620,,,620,,,,,,620,620,620',
'620,620,620,620,620,620,620,620,620,,620,620,620,,620,620,620,620,620',
'847,847,847,847,847,847,847,847,847,847,847,,847,847,,,847,847,,620',
',,620,,,620,620,,,620,,620,847,,847,620,847,847,,847,847,847,847,847',
'620,847,,,,620,620,620,620,,620,620,620,620,,,,,620,620,,847,,,,,620',
',620,620,620,,,620,620,131,131,131,131,131,131,,,,131,131,,,,131,,131',
'131,131,131,131,131,131,,,,,,131,131,131,131,131,131,131,,,131,,,,,',
'131,131,131,131,131,131,131,131,131,131,131,131,,131,131,131,,131,131',
'131,131,131,304,304,304,304,304,304,304,304,304,304,304,,304,304,,,304',
'304,,131,,,131,,,131,131,,,131,,131,304,,304,131,304,304,,304,304,304',
'304,304,131,304,,,,131,131,131,131,,131,131,131,131,,,,,131,131,,304',
',,,,131,,131,131,131,,,131,131,214,214,214,214,214,214,,,,214,214,,',
',214,,214,214,214,214,214,214,214,,,,,,214,214,214,214,214,214,214,',
',214,,,,,,214,214,214,214,214,214,214,214,214,214,214,214,,214,214,214',
',214,214,214,214,214,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010',
'1010,,1010,1010,,,1010,1010,,214,,,214,,,214,214,,,214,,214,1010,,1010',
'214,1010,1010,,1010,1010,1010,1010,1010,214,1010,,,,214,214,214,214',
',214,214,214,214,,,,,214,214,,1010,,,,,214,,214,214,214,,,214,214,1106',
'1106,1106,1106,1106,1106,,,,1106,1106,,,,1106,,1106,1106,1106,1106,1106',
'1106,1106,,,,,,1106,1106,1106,1106,1106,1106,1106,,,1106,,,,,,1106,1106',
'1106,1106,1106,1106,1106,1106,1106,1106,1106,1106,,1106,1106,1106,,1106',
'1106,1106,1106,1106,560,560,560,560,560,560,560,560,560,560,560,,560',
'560,,,560,560,,1106,,,1106,,,1106,1106,,,1106,,1106,560,,560,1106,560',
'560,,560,560,560,560,560,1106,560,,,,1106,1106,1106,1106,,1106,1106',
'1106,1106,,,,,1106,1106,,560,,,,,1106,,1106,1106,1106,,,1106,1106,897',
'897,897,897,897,897,,,,897,897,,,,897,,897,897,897,897,897,897,897,',
',,,,897,897,897,897,897,897,897,,,897,,,,,,897,897,897,897,897,897,897',
'897,897,897,897,897,,897,897,897,,897,897,897,897,897,1032,1032,1032',
'1032,1032,1032,1032,1032,1032,1032,1032,,1032,1032,,,1032,1032,,897',
',,897,,,897,897,,,897,,897,1032,,1032,897,1032,1032,,1032,1032,1032',
'1032,1032,897,1032,,,,897,897,897,897,,897,897,897,897,,,,,897,897,',
'1032,,,,,897,,897,897,897,,,897,897,821,821,821,821,821,821,,,,821,821',
',,,821,,821,821,821,821,821,821,821,,,,,,821,821,821,821,821,821,821',
',,821,,,,,,821,821,821,821,821,821,821,821,821,821,821,821,,821,821',
'821,,821,821,821,821,821,993,993,993,993,993,993,993,993,993,993,993',
',993,993,,,993,993,,821,,,821,,,821,821,,,821,,821,993,,993,821,993',
'993,,993,993,993,993,993,821,993,,,,821,821,821,821,,821,821,821,821',
',,,,821,821,,993,,,,,821,,821,821,821,,,821,821,816,816,816,816,816',
'816,,,,816,816,,,,816,,816,816,816,816,816,816,816,,,,,,816,816,816',
'816,816,816,816,,,816,,,,,,816,816,816,816,816,816,816,816,816,816,816',
'816,,816,816,816,,816,816,816,816,816,506,506,506,506,506,506,506,506',
'506,506,506,,506,506,,,506,506,,816,,,816,,,816,816,,,816,,816,506,',
'506,816,506,506,,506,506,506,506,506,816,506,,,,816,816,816,816,,816',
'816,816,816,,,,,816,816,506,506,,,,,816,,816,816,816,,,816,816,909,909',
'909,909,909,909,,,,909,909,,,,909,,909,909,909,909,909,909,909,,,,,',
'909,909,909,909,909,909,909,,,909,,,,,,909,909,909,909,909,909,909,909',
'909,909,909,909,,909,909,909,,909,909,909,909,909,499,499,499,499,499',
'499,499,,,499,499,,,,,,499,499,,909,,,909,,,909,909,,,909,,909,499,',
'499,909,499,499,,499,499,499,499,499,909,499,,,,909,909,909,909,,909',
'909,909,909,,,,,909,909,,,,,,,909,,909,909,909,,,909,909,830,830,830',
'830,830,830,,,,830,830,,,,830,,830,830,830,830,830,830,830,,,,,,830',
'830,830,830,830,830,830,,,830,,,,,,830,830,830,830,830,830,830,830,830',
'830,830,830,,830,830,830,,830,830,830,830,830,507,,,,,,,,,,,,,,,,507',
'507,,830,,,830,,,830,830,,,830,,830,507,,507,830,507,507,,507,507,,',
'507,830,507,,,,830,830,830,830,,830,830,830,830,,,,,830,830,,,,,,,830',
',830,830,830,,,830,830,617,617,617,617,617,617,,,,617,617,,,,617,,617',
'617,617,617,617,617,617,,,,,,617,617,617,617,617,617,617,,,617,,,,,',
'617,617,617,617,617,617,617,617,617,617,617,617,,617,617,617,,617,617',
'617,617,617,351,351,351,351,351,351,351,351,351,351,351,,351,351,,,351',
'351,,617,,,617,,,617,617,,,617,,617,351,,351,617,351,351,,351,351,351',
'351,351,617,351,,,,617,617,617,617,,617,617,617,617,,,,,617,617,,,,',
',,617,,617,617,617,,,617,617,948,948,948,948,948,948,,,,948,948,,,,948',
',948,948,948,948,948,948,948,,,,,,948,948,948,948,948,948,948,,,948',
',,,,,948,948,948,948,948,948,948,948,948,948,948,948,,948,948,948,,948',
'948,948,948,948,352,352,352,352,352,352,352,352,352,352,352,,352,352',
',,352,352,,948,,,948,,,948,948,,,948,,948,352,,352,948,352,352,,352',
'352,352,352,352,948,352,,,,948,948,948,948,,948,948,948,948,,,,,948',
'948,,,,,,,948,,948,948,948,,,948,948,954,954,954,954,954,954,,,,954',
'954,,,,954,,954,954,954,954,954,954,954,,,,,,954,954,954,954,954,954',
'954,,,954,,,,,,954,954,954,954,954,954,954,954,954,954,954,954,,954',
'954,954,,954,954,954,954,954,497,497,497,497,497,497,497,,,497,497,',
',,,,497,497,,954,,,954,,,954,954,,,954,,954,497,,497,954,497,497,,497',
'497,497,497,497,954,497,,,,954,954,954,954,,954,954,954,954,,,,,954',
'954,,,,,,,954,,954,954,954,,,954,954,329,329,329,329,329,329,,,,329',
'329,,,,329,,329,329,329,329,329,329,329,,,,,,329,329,329,329,329,329',
'329,,,329,,,,,,329,329,329,329,329,329,329,329,329,329,329,329,,329',
'329,329,,329,329,329,329,329,505,505,505,505,505,505,505,505,,505,505',
',,,,,505,505,,329,,,329,,,329,329,,,329,,329,505,,505,329,505,505,,505',
'505,505,505,505,329,505,,,,329,329,329,329,,329,329,329,329,,,,,329',
'329,,,,,,,329,,329,329,329,,,329,329,1087,1087,1087,1087,1087,1087,',
',,1087,1087,,,,1087,,1087,1087,1087,1087,1087,1087,1087,,,,,,1087,1087',
'1087,1087,1087,1087,1087,,,1087,,,,,,1087,1087,1087,1087,1087,1087,1087',
'1087,1087,1087,1087,1087,,1087,1087,1087,,1087,1087,1087,1087,1087,504',
'504,504,504,504,504,504,,,504,504,,,,,,504,504,,1087,,,1087,,,1087,1087',
',,1087,,1087,504,,504,1087,504,504,,504,504,504,504,504,1087,504,,,',
'1087,1087,1087,1087,,1087,1087,1087,1087,,,,,1087,1087,,,,627,627,627',
'1087,627,1087,1087,1087,627,627,1087,1087,,627,,627,627,627,627,627',
'627,627,,,,,,627,627,627,627,627,627,627,,,627,,,,,,,627,,,627,627,627',
'627,627,627,627,627,627,627,627,627,,627,627,627,627,627,486,486,486',
'486,486,486,486,486,486,486,486,,486,486,,,486,486,,627,,,627,,,627',
'627,,,627,,627,486,627,486,627,486,486,627,486,486,486,486,486,627,486',
',,,627,627,627,627,,627,627,627,627,,,,,627,627,,,,626,626,626,627,626',
'627,627,627,626,626,627,627,,626,,626,626,626,626,626,626,626,,,,,,626',
'626,626,626,626,626,626,,,626,,,,,,,626,,,626,626,626,626,626,626,626',
'626,,626,626,626,,626,626,626,626,626,501,501,501,501,501,501,501,,',
'501,501,,,,,,501,501,,626,,,626,,,626,626,,,626,,626,501,,501,626,501',
'501,,501,501,501,501,501,626,501,,,,626,626,626,626,,626,626,626,626',
',,,,626,626,,,,610,610,610,626,610,626,626,626,610,610,626,626,,610',
',610,610,610,610,610,610,610,,,,,,610,610,610,610,610,610,610,,,610',
',,,,,,610,,,610,610,610,610,610,610,610,610,610,610,610,610,,610,610',
'610,610,610,500,500,500,500,500,500,500,,,500,500,,,,,,500,500,,610',
',,610,,,610,610,,,610,,,500,,500,610,500,500,610,500,500,500,500,500',
'610,500,,,,610,610,610,610,,610,610,610,610,,,,,610,610,,,,607,607,607',
'610,607,610,610,610,607,607,610,610,,607,,607,607,607,607,607,607,607',
',,,,,607,607,607,607,607,607,607,,,607,,,,,,,607,,,607,607,607,607,607',
'607,607,607,607,607,607,607,,607,607,607,607,607,559,,,,,,,,,,,,,,,',
'559,559,,607,,,607,,,607,607,,,607,,607,559,,559,607,559,559,607,559',
'559,,,559,607,559,,,,607,607,607,607,,607,607,607,607,,,,,607,607,,',
',601,601,601,607,601,607,607,607,601,601,607,607,,601,,601,601,601,601',
'601,601,601,,,,,,601,601,601,601,601,601,601,,,601,,,,,,,601,,,601,601',
'601,601,601,601,601,601,,601,601,601,,601,601,601,601,601,496,496,496',
'496,496,496,496,,,496,496,,,,,,496,496,,601,,,601,,,601,601,,,601,,',
'496,,496,601,496,496,,496,496,496,496,496,601,496,,,,601,601,601,601',
',601,601,601,601,,,,,601,601,,,,588,588,588,601,588,601,601,601,588',
'588,601,601,,588,,588,588,588,588,588,588,588,,,,,,588,588,588,588,588',
'588,588,,,588,,,,,,,588,,,588,588,588,588,588,588,588,588,,588,588,588',
',588,588,588,588,588,498,498,498,498,498,498,498,,,498,498,,,,,,498',
'498,,588,,,588,,,588,588,,,588,,,498,,498,588,498,498,,498,498,498,498',
'498,588,498,,,,588,588,588,588,,588,588,588,588,,,,,588,588,,,,1138',
'1138,1138,588,1138,588,588,588,1138,1138,588,588,,1138,,1138,1138,1138',
'1138,1138,1138,1138,,,,,,1138,1138,1138,1138,1138,1138,1138,,,1138,',
',,,,,1138,,,1138,1138,1138,1138,1138,1138,1138,1138,1138,1138,1138,1138',
',1138,1138,1138,1138,1138,485,485,485,485,485,485,485,485,485,485,485',
',485,485,,,485,485,,1138,,,1138,,,1138,1138,,,1138,,1138,485,1138,485',
'1138,485,485,1138,485,485,485,485,485,1138,485,,,,1138,1138,1138,1138',
',1138,1138,1138,1138,,,,,1138,1138,,,,22,22,22,1138,22,1138,1138,1138',
'22,22,1138,1138,,22,,22,22,22,22,22,22,22,,,,,,22,22,22,22,22,22,22',
',,22,,,,,,,22,,,22,22,22,22,22,22,22,22,,22,22,22,,22,22,22,22,22,493',
',,,,,,,,,,,,,,,493,493,,22,,,22,,,22,22,,,22,,,493,,493,22,493,493,',
'493,493,,,,22,,,,,22,22,22,22,,22,22,22,22,,,,,22,22,,,,,,,22,,22,22',
'22,30,,22,22,,,,30,30,30,,,30,30,30,494,30,,,,,,,,30,30,30,30,,,,494',
'494,,,,30,30,,30,30,30,30,30,,,,494,,494,,494,494,,494,494,,,,,,,,,',
',30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,',
'30,30,,30,,30,,30,,30,30,,30,30,30,30,30,31,30,30,30,,,,31,31,31,,,31',
'31,31,,31,30,495,,30,30,,30,31,30,31,31,,,,,30,,495,495,31,31,,31,31',
'31,31,31,,,,,,,495,,,,495,495,,495,495,,,,,,,,31,31,31,31,31,31,31,31',
'31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,,31,,31,,31,31',
',31,31,31,31,31,,31,,31,,,,,,,,,,,,,,31,,,31,31,,31,,31,32,32,32,,32',
',31,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32',
',,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,32,32,32,,,,,',
',,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,32,,,,,,32,,,,,32,32',
'32,32,,32,32,32,32,,,,,32,32,,,,33,33,33,32,33,32,32,32,33,33,32,32',
',33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,',
'33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33,33,33,,,,,,,,,,,,,,,,',
',,,33,,,33,,,33,33,,,33,,33,,33,,33,,,33,,,,,,33,,,,,33,33,33,33,,33',
'33,33,33,,,,,33,33,,,,34,34,34,33,34,33,33,33,34,34,33,33,,34,,34,34',
'34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34',
'34,34,34,34,34,34,34,34,,34,34,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,',
',34,34,,,34,,34,,34,,34,,,34,,,,,,34,,,,,34,34,34,34,,34,34,34,34,,',
',,34,34,,,,1109,1109,1109,34,1109,34,34,34,1109,1109,34,34,,1109,,1109',
'1109,1109,1109,1109,1109,1109,,,,,,1109,1109,1109,1109,1109,1109,1109',
',,1109,,,,,,,1109,,,1109,1109,1109,1109,1109,1109,1109,1109,,1109,1109',
'1109,,1109,1109,1109,1109,1109,,,,,,,,,,,,,,,,,,,,1109,,,1109,,,1109',
'1109,,,1109,,,,,,1109,,,,,,,,,1109,,,,,1109,1109,1109,1109,,1109,1109',
'1109,1109,,,,,1109,1109,,,,1108,1108,1108,1109,1108,1109,1109,1109,1108',
'1108,1109,1109,,1108,,1108,1108,1108,1108,1108,1108,1108,,,,,,1108,1108',
'1108,1108,1108,1108,1108,,,1108,,,,,,,1108,,,1108,1108,1108,1108,1108',
'1108,1108,1108,,1108,1108,1108,,1108,1108,1108,1108,1108,,,,,,,,,,,',
',,,,,,,,1108,,,1108,,,1108,1108,,,1108,,,,,,1108,,,,,,,,,1108,,,,,1108',
'1108,1108,1108,,1108,1108,1108,1108,,,,,1108,1108,,,,44,44,44,1108,44',
'1108,1108,1108,44,44,1108,1108,,44,,44,44,44,44,44,44,44,,,,,,44,44',
'44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44',
'44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,',
'44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,,,45,45,45,44,45,44,44,44',
'45,45,44,44,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45',
',,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,45,45,45,,,,,,,',
',,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45,,,,,45,45,45,45',
',45,45,45,45,,,,,45,45,,,,47,47,47,45,47,45,45,45,47,47,45,45,,47,,47',
'47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47',
'47,47,47,47,47,,47,47,47,,47,47,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47',
',,47,47,,,47,,,,,,47,,,,,,,,,47,,,,,47,47,47,47,,47,47,47,47,,,,,47',
'47,,,,48,48,48,47,48,47,47,47,48,48,47,47,,48,,48,48,48,48,48,48,48',
',,,,,48,48,48,48,48,48,48,,,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48',
'48,48,,48,48,48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48',
',,,,,,,,48,,,,,48,48,48,48,,48,48,48,48,,,,,48,48,,,,50,50,50,48,50',
'48,48,48,50,50,48,48,,50,,50,50,50,50,50,50,50,,,,,,50,50,50,50,50,50',
'50,,,50,,,,,,,50,,,50,50,50,50,50,50,50,50,,50,50,50,,50,50,50,50,50',
',,,,,,,,,,,,,,,,,,,50,,,50,,,50,50,,,50,,,,,,50,,,,,,,,,50,,,,,50,50',
'50,50,,50,50,50,50,,,,,50,50,,,,,,,50,,50,50,50,64,,50,50,,,,64,64,64',
',,64,64,64,,64,,,,,,,,64,,64,64,64,,,,706,706,706,706,64,64,,64,64,64',
'64,64,,,,,706,706,706,,,,,,,,,,,706,706,,,706,64,64,64,64,64,64,64,64',
'64,64,64,64,64,64,,,64,64,64,,,64,,,64,,,64,64,,64,,64,,64,,64,64,,64',
'64,64,64,64,,64,,64,,706,706,706,706,,706,706,706,706,,,,64,706,706',
'64,64,64,64,,64,706,64,706,706,706,,64,66,66,66,66,66,,,,66,66,,,,66',
',66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,66,66,,66',
'66,66,66,66,66,66,66,66,,66,66,66,,66,66,66,66,66,,,,,,,,,,,,,,,,,,',
',66,,,66,,,66,66,,,66,,66,,,,66,,,,,,,,,66,,,,,66,66,66,66,,66,66,66',
'66,,,,,66,66,,,,67,67,67,66,67,66,66,66,67,67,66,66,,67,,67,67,67,67',
'67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67',
'67,67,67,67,67,67,,67,67,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67',
',,67,,67,,,,67,,,67,,,,,,67,,,,,67,67,67,67,,67,67,67,67,,,,,67,67,',
',,68,68,68,67,68,67,67,67,68,68,67,67,,68,,68,68,68,68,68,68,68,,,,',
',68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,68,68',
'68,68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68',
',,68,,,,,,68,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,,,,71,71,71,68,71',
'68,68,68,71,71,68,68,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71',
'71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,71,71,71',
',,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,,71,,,,,71,71',
'71,71,,71,71,71,71,,,,,71,71,,,,72,72,72,71,72,71,71,71,72,72,71,71',
',72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,',
'72,72,72,72,72,72,72,72,,72,72,72,,72,72,72,72,72,,,,,,,,,,,,,,,,,,',
',72,,,72,,,72,72,,,72,,,,,,72,,,,,,,,,72,,,,,72,72,72,72,,72,72,72,72',
',,,,72,72,,,,75,75,75,72,75,72,72,72,75,75,72,72,,75,,75,75,75,75,75',
'75,75,,,,,,75,75,75,75,75,75,75,,,75,,,,,,,75,,,75,75,75,75,75,75,75',
'75,,75,75,75,,75,75,75,75,75,,,,,,,,,,,,,,,,,,,,75,,,75,,,75,75,,,75',
',,,,,75,,,,,,,,,75,,,,,75,75,75,75,,75,75,75,75,,,,,75,75,75,,,,,75',
'75,,75,75,75,,,75,75,120,120,120,120,120,,,,120,120,,,,120,,120,120',
'120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,120',
'120,120,120,120,120,120,120,120,120,120,120,,120,120,120,,120,120,120',
'120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,120,,,,120,,,',
',,,,,120,,,,,120,120,120,120,,120,120,120,120,,,,,120,120,,,,,,120,120',
',120,120,120,,,120,120,125,125,125,,125,,,,125,125,,,,125,,125,125,125',
'125,125,125,125,,,,,,125,125,125,125,125,125,125,,,125,,,,,,,125,,,125',
'125,125,125,125,125,125,125,,125,125,125,,125,125,125,125,125,,,,,,',
',,,,,,,,,,,,,125,,,125,,,125,125,,,125,,,,,,125,,,,,,,,,125,,,,,125',
'125,125,125,,125,125,125,125,,,,,125,125,,,,126,126,126,125,126,125',
'125,125,126,126,125,125,,126,,126,126,126,126,126,126,126,,,,,,126,126',
'126,126,126,126,126,,,126,,,,,,,126,,,126,126,126,126,126,126,126,126',
',126,126,126,,126,126,126,126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126',
'126,,,126,,,,,,126,,,,,,,,,126,,,,,126,126,126,126,,126,126,126,126',
',,,,126,126,,,,127,127,127,126,127,126,126,126,127,127,126,126,,127',
',127,127,127,127,127,127,127,,,,,,127,127,127,127,127,127,127,,,127',
',,,,,,127,,,127,127,127,127,127,127,127,127,,127,127,127,,127,127,127',
'127,127,,,,,,,,,,,,,,,,,,,,127,,,127,,,127,127,,,127,,,,,,127,,,,,,',
',,127,,,,,127,127,127,127,,127,127,127,127,,,,,127,127,,,,128,128,128',
'127,128,127,127,127,128,128,127,127,,128,,128,128,128,128,128,128,128',
',,,,,128,128,128,128,128,128,128,,,128,,,,,,,128,,,128,128,128,128,128',
'128,128,128,,128,128,128,,128,128,128,128,128,,,,,,,,,,,,,,,,,,,,128',
',,128,,,128,128,,,128,,,,,,128,,,,,,,,,128,,,,,128,128,128,128,,128',
'128,128,128,,,,,128,128,,,,,,,128,,128,128,128,,,128,128,129,129,129',
'129,129,,,,129,129,,,,129,,129,129,129,129,129,129,129,,,,,,129,129',
'129,129,129,129,129,,,129,,,,,,129,129,,129,129,129,129,129,129,129',
'129,129,,129,129,129,,129,129,129,129,129,,,,,,,,,,,,,,,,,,,,129,,,129',
',,129,129,,,129,,129,,,,129,,,,,,,,,129,,,,,129,129,129,129,,129,129',
'129,129,,,,,129,129,,,,215,215,215,129,215,129,129,129,215,215,129,129',
',215,,215,215,215,215,215,215,215,,,,,,215,215,215,215,215,215,215,',
',215,,,,,,,215,,,215,215,215,215,215,215,215,215,,215,215,215,,215,215',
'215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,215,,,,215',
',,,,,,,,215,,,,,215,215,215,215,,215,215,215,215,,,,,215,215,,,,216',
'216,216,215,216,215,215,215,216,216,215,215,,216,,216,216,216,216,216',
'216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216',
'216,216,216,216,216,,216,216,216,,216,216,216,216,216,,,,,,,,,,,,,,',
',,,,,216,,,216,,,216,216,,,216,,216,,,,216,,,,,,,,,216,,,,,216,216,216',
'216,,216,216,216,216,,,,,216,216,,,,218,218,218,216,218,216,216,216',
'218,218,216,216,,218,,218,218,218,218,218,218,218,,,,,,218,218,218,218',
'218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218,,218,218',
'218,,218,218,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218',
',,,,,218,,,,,,,,,218,,,,,218,218,218,218,,218,218,218,218,,,,,218,218',
',,,219,219,219,218,219,218,218,218,219,219,218,218,,219,,219,219,219',
'219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219',
'219,219,219,219,219,219,219,,219,219,219,,219,219,219,219,219,,,,,,',
',,,,,,,,,,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,,219,,,,,219',
'219,219,219,,219,219,219,219,,,,,219,219,,,,221,221,221,219,221,219',
'219,219,221,221,219,219,,221,,221,221,221,221,221,221,221,,,,,,221,221',
'221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221',
',221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221',
'221,,,221,,,,,,221,,,,,,,,,221,,,,,221,221,221,221,,221,221,221,221',
',,,,221,221,,,,222,222,222,221,222,221,221,221,222,222,221,221,,222',
',222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222',
',,,,,,222,,,222,222,222,222,222,222,222,222,222,222,222,222,,222,222',
'222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,222,,222,',
'222,,,222,,,,,,222,,,,,222,222,222,222,,222,222,222,222,,,,,222,222',
',,,227,227,227,222,227,222,222,222,227,227,222,222,,227,,227,227,227',
'227,227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227',
'227,227,227,227,227,227,227,,227,227,227,,227,227,227,227,227,,,,,,',
',,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,,227,,,,,227',
'227,227,227,,227,227,227,227,,,,,227,227,,,,228,228,228,227,228,227',
'227,227,228,228,227,227,,228,,228,228,228,228,228,228,228,,,,,,228,228',
'228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228',
',228,228,228,,228,228,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228',
'228,,,228,,,,,,228,,,,,,,,,228,,,,,228,228,228,228,,228,228,228,228',
',,,,228,228,,,,229,229,229,228,229,228,228,228,229,229,228,228,,229',
',229,229,229,229,229,229,229,,,,,,229,229,229,229,229,229,229,,,229',
',,,,,,229,,,229,229,229,229,229,229,229,229,,229,229,229,,229,229,229',
'229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,,,,229,,,,,,',
',,229,,,,,229,229,229,229,,229,229,229,229,,,,,229,229,229,,,240,240',
'240,229,240,229,229,229,240,240,229,229,,240,,240,240,240,240,240,240',
'240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240',
'240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,,,,,',
',240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240,240',
',240,240,240,240,,,,,240,240,,,,244,244,244,240,244,240,240,240,244',
'244,240,240,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244',
'244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244',
',244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,',
',,,244,,,,,,,,,244,,,,,244,244,244,244,,244,244,244,244,,,,,244,244',
',,,245,245,245,244,245,244,244,244,245,245,244,244,,245,,245,245,245',
'245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245',
'245,245,245,245,245,245,245,,245,245,245,,245,245,245,245,245,,,,,,',
',,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245',
'245,245,245,,245,245,245,245,,,,,245,245,,,,246,246,246,245,246,245',
'245,245,246,246,245,245,,246,,246,246,246,246,246,246,246,,,,,,246,246',
'246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246',
',246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246',
'246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246',
',,,,246,246,,,,247,247,247,246,247,246,246,246,247,247,246,246,,247',
',247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247',
',,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,247',
'247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,',
',,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247,,,,248,248,248',
'247,248,247,247,247,248,248,247,247,,248,,248,248,248,248,248,248,248',
',,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248',
'248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248',
',,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248',
'248,248,248,,,,,248,248,,,,249,249,249,248,249,248,248,248,249,249,248',
'248,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249',
',,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249',
'249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249',
',,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249,,,,250',
'250,250,249,250,249,249,249,250,250,249,249,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,',
',,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250',
'250,,250,250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250',
'251,251,250,250,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251',
'251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251',
'251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251',
',,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,252,252,252,251,252,251,251,251,252,252,251,251,,252,,252,252,252',
'252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252',
'252,252,252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,',
',,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252',
'252,252,252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252',
'252,252,253,253,252,252,,253,,253,253,253,253,253,253,253,,,,,,253,253',
'253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253',
',253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253',
'253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253',
',,,,253,253,,,,254,254,254,253,254,253,253,253,254,254,253,253,,254',
',254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254',
',,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,254',
'254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,',
',,254,,,,,254,254,254,254,,254,254,254,254,,,,,254,254,,,,255,255,255',
'254,255,254,254,254,255,255,254,254,,255,,255,255,255,255,255,255,255',
',,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255',
'255,255,255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255',
',,255,,,255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255',
'255,255,255,,,,,255,255,,,,256,256,256,255,256,255,255,255,256,256,255',
'255,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256',
',,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256',
'256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256',
',,,,,,,,256,,,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,257',
'257,257,256,257,256,256,256,257,257,256,256,,257,,257,257,257,257,257',
'257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257',
'257,257,257,257,257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,',
',,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257',
'257,,257,257,257,257,,,,,257,257,,,,258,258,258,257,258,257,257,257',
'258,258,257,257,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258',
'258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258',
'258,,258,258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258',
',,,,,258,,,,,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258',
',,,259,259,259,258,259,258,258,258,259,259,258,258,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259',
'259,259,259,259,259,259,259,,259,259,259,,259,259,259,259,259,,,,,,',
',,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,,259,,,,,259',
'259,259,259,,259,259,259,259,,,,,259,259,,,,260,260,260,259,260,259',
'259,259,260,260,259,259,,260,,260,260,260,260,260,260,260,,,,,,260,260',
'260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260',
',260,260,260,,260,260,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260',
'260,,,260,,,,,,260,,,,,,,,,260,,,,,260,260,260,260,,260,260,260,260',
',,,,260,260,,,,261,261,261,260,261,260,260,260,261,261,260,260,,261',
',261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261',
',,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,,261,261,261',
'261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,',
',,261,,,,,261,261,261,261,,261,261,261,261,,,,,261,261,,,,262,262,262',
'261,262,261,261,261,262,262,261,261,,262,,262,262,262,262,262,262,262',
',,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262',
'262,262,262,,262,262,262,,262,262,262,262,262,,,,,,,,,,,,,,,,,,,,262',
',,262,,,262,262,,,262,,,,,,262,,,,,,,,,262,,,,,262,262,262,262,,262',
'262,262,262,,,,,262,262,,,,263,263,263,262,263,262,262,262,263,263,262',
'262,,263,,263,263,263,263,263,263,263,,,,,,263,263,263,263,263,263,263',
',,263,,,,,,,263,,,263,263,263,263,263,263,263,263,,263,263,263,,263',
'263,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263',
',,,,,,,,263,,,,,263,263,263,263,,263,263,263,263,,,,,263,263,,,,264',
'264,264,263,264,263,263,263,264,264,263,263,,264,,264,264,264,264,264',
'264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264',
'264,264,264,264,264,,264,264,264,,264,264,264,264,264,,,,,,,,,,,,,,',
',,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,,264,,,,,264,264,264',
'264,,264,264,264,264,,,,,264,264,,,,265,265,265,264,265,264,264,264',
'265,265,264,264,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265',
'265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265,265',
'265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265',
',,,,,265,,,,,,,,,265,,,,,265,265,265,265,,265,265,265,265,,,,,265,265',
',,,270,270,270,265,270,265,265,265,270,270,265,265,,270,,270,270,270',
'270,270,270,270,,,,,,270,270,270,270,270,270,270,,,270,,,,,,,270,,,270',
'270,270,270,270,270,270,270,,270,270,270,,270,270,270,270,270,,,,,,',
',,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,,,,270,,,,,,,,,270,,,,,270',
'270,270,270,,270,270,270,270,,,,,270,270,,,,286,286,286,270,286,270',
'270,270,286,286,270,270,,286,,286,286,286,286,286,286,286,,,,,,286,286',
'286,286,286,286,286,,,286,,,,,,,286,,,286,286,286,286,286,286,286,286',
',286,286,286,,286,286,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286',
'286,,,286,,,,,,286,,,,,,,,,286,,,,,286,286,286,286,,286,286,286,286',
',,,,286,286,,,,293,293,293,286,293,286,286,286,293,293,286,286,,293',
',293,293,293,293,293,293,293,,,,,,293,293,293,293,293,293,293,,,293',
',,,,,,293,,,293,293,293,293,293,293,293,293,293,293,293,293,,293,293',
'293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,,293,,293,,293,',
'293,,,293,,,,,,293,,,,,293,293,293,293,,293,293,293,293,,,,,293,293',
',,,294,294,294,293,294,293,293,293,294,294,293,293,,294,,294,294,294',
'294,294,294,294,,,,,,294,294,294,294,294,294,294,,,294,,,,,,,294,,,294',
'294,294,294,294,294,294,294,294,294,294,294,,294,294,294,294,294,,,',
',,,,,,,,,,,,,,,,294,,,294,,,294,294,,,294,,294,,294,,294,,,294,,,,,',
'294,,,,,294,294,294,294,,294,294,294,294,,,,,294,294,,,,302,302,302',
'294,302,294,294,294,302,302,294,294,,302,,302,302,302,302,302,302,302',
',,,,,302,302,302,302,302,302,302,,,302,,,,,,,302,,,302,302,302,302,302',
'302,302,302,302,302,302,302,,302,302,302,302,302,,,,,,,,,,,,,,,,,,,',
'302,,,302,,,302,302,,,302,,302,,302,,302,,,302,,,,,,302,,,,,302,302',
'302,302,,302,302,302,302,,,,,302,302,302,,,309,309,309,302,309,302,302',
'302,309,309,302,302,,309,,309,309,309,309,309,309,309,,,,,,309,309,309',
'309,309,309,309,,,309,,,,,,,309,,,309,309,309,309,309,309,309,309,,309',
'309,309,,309,309,309,309,309,,,,,,,,,,,,,,,,,,,,309,,,309,,,309,309',
',,309,,,,,,309,,,,,,,,,309,,,,,309,309,309,309,,309,309,309,309,,,,',
'309,309,,,,311,311,311,309,311,309,309,309,311,311,309,309,,311,,311',
'311,311,311,311,311,311,,,,,,311,311,311,311,311,311,311,,,311,,,,,',
',311,,,311,311,311,311,311,311,311,311,,311,311,311,,311,311,311,311',
'311,,,,,,,,,,,,,,,,,,,,311,,,311,,,311,311,,,311,,,,,,311,,,,,,,,,311',
',,,,311,311,311,311,,311,311,311,311,,,,,311,311,,,,314,314,314,311',
'314,311,311,311,314,314,311,311,,314,,314,314,314,314,314,314,314,,',
',,,314,314,314,314,314,314,314,,,314,,,,,,,314,,,314,314,314,314,314',
'314,314,314,,314,314,314,,314,314,314,314,314,,,,,,,,,,,,,,,,,,,,314',
',,314,,,314,314,,,314,,,,,,314,,,,,,,,,314,,,,,314,314,314,314,,314',
'314,314,314,,,,,314,314,,,,315,315,315,314,315,314,314,314,315,315,314',
'314,,315,,315,315,315,315,315,315,315,,,,,,315,315,315,315,315,315,315',
',,315,,,,,,,315,,,315,315,315,315,315,315,315,315,,315,315,315,,315',
'315,315,315,315,,,,,,,,,,,,,,,,,,,,315,,,315,,,315,315,,,315,,,,,,315',
',,,,,,,,315,,,,,315,315,315,315,,315,315,315,315,,,,,315,315,,,,,,,315',
',315,315,315,,,315,315,320,320,320,320,320,,,,320,320,,,,320,,320,320',
'320,320,320,320,320,,,,,,320,320,320,320,320,320,320,,,320,,,,,,320',
'320,,320,320,320,320,320,320,320,320,320,,320,320,320,,320,320,320,320',
'320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320,320,,,320,,320,,,,320,,,,,,,',
',320,,,,,320,320,320,320,,320,320,320,320,,,,,320,320,,,,962,962,962',
'320,962,320,320,320,962,962,320,320,,962,,962,962,962,962,962,962,962',
',,,,,962,962,962,962,962,962,962,,,962,,,,,,,962,,,962,962,962,962,962',
'962,962,962,,962,962,962,,962,962,962,962,962,,,,,,,,,,,,,,,,,,,,962',
',,962,,,962,962,,,962,,,,,,962,,,,,,,,,962,,,,,962,962,962,962,,962',
'962,962,962,,,,,962,962,,,,961,961,961,962,961,962,962,962,961,961,962',
'962,,961,,961,961,961,961,961,961,961,,,,,,961,961,961,961,961,961,961',
',,961,,,,,,,961,,,961,961,961,961,961,961,961,961,961,961,961,961,,961',
'961,961,961,961,,,,,,,,,,,,,,,,,,,,961,,,961,,,961,961,,,961,,,,961',
',961,,,961,,,,,,961,,,,,961,961,961,961,,961,961,961,961,,,,,961,961',
',,,947,947,947,961,947,961,961,961,947,947,961,961,,947,,947,947,947',
'947,947,947,947,,,,,,947,947,947,947,947,947,947,,,947,,,,,,,947,,,947',
'947,947,947,947,947,947,947,,947,947,947,,947,947,947,947,947,,,,,,',
',,,,,,,,,,,,,947,,,947,,,947,947,,,947,,947,,,,947,,,,,,,,,947,,,,,947',
'947,947,947,,947,947,947,947,,,,,947,947,,,,942,942,942,947,942,947',
'947,947,942,942,947,947,,942,,942,942,942,942,942,942,942,,,,,,942,942',
'942,942,942,942,942,,,942,,,,,,,942,,,942,942,942,942,942,942,942,942',
',942,942,942,,942,942,942,942,942,,,,,,,,,,,,,,,,,,,,942,,,942,,,942',
'942,,,942,,,,,,942,,,,,,,,,942,,,,,942,942,942,942,,942,942,942,942',
',,,,942,942,,,,933,933,933,942,933,942,942,942,933,933,942,942,,933',
',933,933,933,933,933,933,933,,,,,,933,933,933,933,933,933,933,,,933',
',,,,,,933,,,933,933,933,933,933,933,933,933,,933,933,933,,933,933,933',
'933,933,,,,,,,,,,,,,,,,,,,,933,,,933,,,933,933,,,933,,,,,,933,,,,,,',
',,933,,,,,933,933,933,933,,933,933,933,933,,,,,933,933,,,,906,906,906',
'933,906,933,933,933,906,906,933,933,,906,,906,906,906,906,906,906,906',
',,,,,906,906,906,906,906,906,906,,,906,,,,,,,906,,,906,906,906,906,906',
'906,906,906,,906,906,906,,906,906,906,906,906,,,,,,,,,,,,,,,,,,,,906',
',,906,,,906,906,,,906,,,,,,906,,,,,,,,,906,,,,,906,906,906,906,,906',
'906,906,906,,,,,906,906,,,,356,356,356,906,356,906,906,906,356,356,906',
'906,,356,,356,356,356,356,356,356,356,,,,,,356,356,356,356,356,356,356',
',,356,,,,,,,356,,,356,356,356,356,356,356,356,356,,356,356,356,,356',
'356,356,356,356,,,,,,,,,,,,,,,,,,,,356,,,356,,,356,356,,,356,,,,,,356',
',,,,,,,,356,,,,,356,356,356,356,,356,356,356,356,,,,,356,356,,,,358',
'358,358,356,358,356,356,356,358,358,356,356,,358,,358,358,358,358,358',
'358,358,,,,,,358,358,358,358,358,358,358,,,358,,,,,,,358,,,358,358,358',
'358,358,358,358,358,,358,358,358,,358,358,358,358,358,,,,,,,,,,,,,,',
',,,,,358,,,358,358,,358,358,,,358,,,,,,358,,,,,,,,,358,,,,,358,358,358',
'358,,358,358,358,358,,,,,358,358,,,,887,887,887,358,887,358,358,358',
'887,887,358,358,,887,,887,887,887,887,887,887,887,,,,,,887,887,887,887',
'887,887,887,,,887,,,,,,,887,,,887,887,887,887,887,887,887,887,,887,887',
'887,,887,887,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887',
',,,,,887,,,,,,,,,887,,,,,887,887,887,887,,887,887,887,887,,,,,887,887',
',,,864,864,864,887,864,887,887,887,864,864,887,887,,864,,864,864,864',
'864,864,864,864,,,,,,864,864,864,864,864,864,864,,,864,,,,,,,864,,,864',
'864,864,864,864,864,864,864,,864,864,864,,864,864,864,864,864,,,,,,',
',,,,,,,,,,,,,864,,,864,,,864,864,,,864,,,,,,864,,,,,,,,,864,,,,,864',
'864,864,864,,864,864,864,864,,,,,864,864,,,,863,863,863,864,863,864',
'864,864,863,863,864,864,,863,,863,863,863,863,863,863,863,,,,,,863,863',
'863,863,863,863,863,,,863,,,,,,,863,,,863,863,863,863,863,863,863,863',
',863,863,863,,863,863,863,863,863,,,,,,,,,,,,,,,,,,,,863,,,863,,,863',
'863,,,863,,,,,,863,,,,,,,,,863,,,,,863,863,863,863,,863,863,863,863',
',,,,863,863,,,,862,862,862,863,862,863,863,863,862,862,863,863,,862',
',862,862,862,862,862,862,862,,,,,,862,862,862,862,862,862,862,,,862',
',,,,,,862,,,862,862,862,862,862,862,862,862,,862,862,862,,862,862,862',
'862,862,,,,,,,,,,,,,,,,,,,,862,,,862,,,862,862,,,862,,,,,,862,,,,,,',
',,862,,,,,862,862,862,862,,862,862,862,862,,,,,862,862,,,,861,861,861',
'862,861,862,862,862,861,861,862,862,,861,,861,861,861,861,861,861,861',
',,,,,861,861,861,861,861,861,861,,,861,,,,,,,861,,,861,861,861,861,861',
'861,861,861,,861,861,861,,861,861,861,861,861,,,,,,,,,,,,,,,,,,,,861',
',,861,,,861,861,,,861,,,,,,861,,,,,,,,,861,,,,,861,861,861,861,,861',
'861,861,861,,,,,861,861,,,,382,382,382,861,382,861,861,861,382,382,861',
'861,,382,,382,382,382,382,382,382,382,,,,,,382,382,382,382,382,382,382',
',,382,,,,,,,382,,,382,382,382,382,382,382,382,382,,382,382,382,,382',
'382,382,382,382,,,,,,,,,,,,,,,,,,,,382,,,382,,,382,382,,,382,,,,,,382',
',,,,,,,,382,,,,,382,382,382,382,,382,382,382,382,,,,,382,382,,,,848',
'848,848,382,848,382,382,382,848,848,382,382,,848,,848,848,848,848,848',
'848,848,,,,,,848,848,848,848,848,848,848,,,848,,,,,,,848,,,848,848,848',
'848,848,848,848,848,,848,848,848,,848,848,848,848,848,,,,,,,,,,,,,,',
',,,,,848,,,848,,,848,848,,,848,,,,,,848,,,,,,,,,848,,,,,848,848,848',
'848,,848,848,848,848,,,,,848,848,,,,840,840,840,848,840,848,848,848',
'840,840,848,848,,840,,840,840,840,840,840,840,840,,,,,,840,840,840,840',
'840,840,840,,,840,,,,,,,840,,,840,840,840,840,840,840,840,840,,840,840',
'840,,840,840,840,840,840,,,,,,,,,,,,,,,,,,,,840,,,840,,,840,840,,,840',
',,,,,840,,,,,,,,,840,,,,,840,840,840,840,,840,840,840,840,,,,,840,840',
',,,822,822,822,840,822,840,840,840,822,822,840,840,,822,,822,822,822',
'822,822,822,822,,,,,,822,822,822,822,822,822,822,,,822,,,,,,,822,,,822',
'822,822,822,822,822,822,822,,822,822,822,,822,822,822,822,822,,,,,,',
',,,,,,,,,,,,,822,,,822,,,822,822,,,822,,,,,,822,,,,,,,,,822,,,,,822',
'822,822,822,,822,822,822,822,,,,,822,822,,,,403,403,403,822,403,822',
'822,822,403,403,822,822,,403,,403,403,403,403,403,403,403,,,,,,403,403',
'403,403,403,403,403,,,403,,,,,,,403,,,403,403,403,403,403,403,403,403',
',403,403,403,,403,403,403,403,403,,,,,,,,,,,,,,,,,,,,403,,,403,,,403',
'403,,,403,,,,,,403,,,,,,,,,403,,,,,403,403,403,403,,403,403,403,403',
',,,,403,403,,,,432,432,432,403,432,403,403,403,432,432,403,403,,432',
',432,432,432,432,432,432,432,,,,,,432,432,432,432,432,432,432,,,432',
',,,,,,432,,,432,432,432,432,432,432,432,432,,432,432,432,,432,432,432',
'432,432,,,,,,,,,,,,,,,,,,,,432,,,432,,,432,432,,,432,,,,,,432,,,,,,',
',,432,,,,,432,432,432,432,,432,432,432,432,,,,,432,432,,,,776,776,776',
'432,776,432,432,432,776,776,432,432,,776,,776,776,776,776,776,776,776',
',,,,,776,776,776,776,776,776,776,,,776,,,,,,,776,,,776,776,776,776,776',
'776,776,776,,776,776,776,,776,776,776,776,776,,,,,,,,,,,,,,,,,,,,776',
',,776,,,776,776,,,776,,,,,,776,,,,,,,,,776,,,,,776,776,776,776,,776',
'776,776,776,,,,,776,776,,,,762,762,762,776,762,776,776,776,762,762,776',
'776,,762,,762,762,762,762,762,762,762,,,,,,762,762,762,762,762,762,762',
',,762,,,,,,,762,,,762,762,762,762,762,762,762,762,,762,762,762,,762',
'762,762,762,762,,,,,,,,,,,,,,,,,,,,762,,,762,,,762,762,,,762,,762,,',
',762,,,,,,,,,762,,,,,762,762,762,762,,762,762,762,762,,,,,762,762,,',
',,,,762,,762,762,762,460,,762,762,,,,460,460,460,,,460,460,460,,460',
',,,,,,,460,460,460,460,,,,,,,,,460,460,,460,460,460,460,460,,,,,,,,',
',,,,,,,,,,,,,,460,460,460,460,460,460,460,460,460,460,460,460,460,460',
',,460,460,460,,,460,,460,460,,,460,460,,460,,460,,460,,460,460,,460',
'460,460,460,460,,460,460,460,1021,,1021,1021,1021,1021,1021,,,,,,,460',
',1021,460,460,469,460,,460,,,,469,469,469,460,,469,469,469,,469,,,1021',
',,,,469,469,469,469,469,,1021,1021,,,,1021,469,469,,469,469,469,469',
'469,,,,,,,,,,,,,,,,,,,,,,,469,469,469,469,469,469,469,469,469,469,469',
'469,469,469,,,469,469,469,,,469,,,469,,,469,469,,469,,469,,469,,469',
'469,,469,469,469,469,469,,469,469,469,,,,,,,,,,,,,,469,,,469,469,469',
'469,,469,470,469,,,,,469,470,470,470,,,470,470,470,,470,,,,,,,,470,470',
'470,470,470,,,,880,880,880,880,470,470,,470,470,470,470,470,,,,,880',
'880,880,,,,,,,,,,,880,880,,,880,470,470,470,470,470,470,470,470,470',
'470,470,470,470,470,,,470,470,470,,,470,,,470,,,470,470,,470,,470,,470',
',470,470,,470,470,470,470,470,,470,470,470,,880,880,880,880,,880,880',
'880,880,,,,470,880,880,470,470,470,470,,470,880,470,880,880,880,,470',
'5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5',
'5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5',
',,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,,479,479,479,5',
'479,5,5,5,479,479,5,5,,479,,479,479,479,479,479,479,479,,,,,,479,479',
'479,479,479,479,479,,,479,,,,,,,479,,,479,479,479,479,479,479,479,479',
'479,479,479,479,,479,479,479,479,479,,,,,,,,,,,,,,,,,,,,479,,,479,,',
'479,479,,,479,,479,,479,,479,,,479,,,,,,479,,,,,479,479,479,479,,479',
'479,479,479,,,,,479,479,,,,481,481,481,479,481,479,479,479,481,481,479',
'479,,481,,481,481,481,481,481,481,481,,,,,,481,481,481,481,481,481,481',
',,481,,,,,,,481,,,481,481,481,481,481,481,481,481,,481,481,481,,481',
'481,481,481,481,,,,,,,,,,,,,,,,,,,,481,,,481,,,481,481,,,481,,,,,,481',
',,,,,,,,481,,,,,481,481,481,481,,481,481,481,481,,,,,481,481,,,,482',
'482,482,481,482,481,481,481,482,482,481,481,,482,,482,482,482,482,482',
'482,482,,,,,,482,482,482,482,482,482,482,,,482,,,,,,,482,,,482,482,482',
'482,482,482,482,482,,482,482,482,,482,482,482,482,482,,,,,,,,,,,,,,',
',,,,,482,,,482,,,482,482,,,482,,,,,,482,,,,,,,,,482,,,,,482,482,482',
'482,,482,482,482,482,,,,,482,482,,,,483,483,483,482,483,482,482,482',
'483,483,482,482,,483,,483,483,483,483,483,483,483,,,,,,483,483,483,483',
'483,483,483,,,483,,,,,,,483,,,483,483,483,483,483,483,483,483,,483,483',
'483,,483,483,483,483,483,,,,,,,,,,,,,,,,,,,,483,,,483,,,483,483,,,483',
',,,,,483,,,,,,,,,483,,,,,483,483,483,483,,483,483,483,483,,,,,483,483',
',,,742,742,742,483,742,483,483,483,742,742,483,483,,742,,742,742,742',
'742,742,742,742,,,,,,742,742,742,742,742,742,742,,,742,,,,,,,742,,,742',
'742,742,742,742,742,742,742,,742,742,742,,742,742,742,742,742,,,,,,',
',,,,,,,,,,,,,742,,,742,,,742,742,,,742,,,,,,742,,,,,,,,,742,,,,,742',
'742,742,742,,742,742,742,742,,,,,742,742,,,,739,739,739,742,739,742',
'742,742,739,739,742,742,,739,,739,739,739,739,739,739,739,,,,,,739,739',
'739,739,739,739,739,,,739,,,,,,,739,,,739,739,739,739,739,739,739,739',
',739,739,739,,739,739,739,739,739,,,,,,,,,,,,,,,,,,,,739,,,739,,,739',
'739,,,739,,,,,,739,,,,,,,,,739,,,,,739,739,739,739,,739,739,739,739',
',,,,739,739,,,,684,684,684,739,684,739,739,739,684,684,739,739,,684',
',684,684,684,684,684,684,684,,,,,,684,684,684,684,684,684,684,,,684',
',,,,,,684,,,684,684,684,684,684,684,684,684,,684,684,684,,684,684,684',
'684,684,,,,,,,,,,,,,,,,,,,,684,,,684,,,684,684,,,684,,,,,,684,,,,,,',
',,684,,,,,684,684,684,684,,684,684,684,684,,,,,684,684,,,,683,683,683',
'684,683,684,684,684,683,683,684,684,,683,,683,683,683,683,683,683,683',
',,,,,683,683,683,683,683,683,683,,,683,,,,,,,683,,,683,683,683,683,683',
'683,683,683,,683,683,683,,683,683,683,683,683,,,,,,,,,,,,,,,,,,,,683',
',,683,,,683,683,,,683,,,,,,683,,,,,,,,,683,,,,,683,683,683,683,,683',
'683,683,683,,,,,683,683,,,,679,679,679,683,679,683,683,683,679,679,683',
'683,,679,,679,679,679,679,679,679,679,,,,,,679,679,679,679,679,679,679',
',,679,,,,,,,679,,,679,679,679,679,679,679,679,679,,679,679,679,,679',
'679,679,679,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679,679,,,679,,,,,,679',
',,,,,,,,679,,,,,679,679,679,679,,679,679,679,679,,,,,679,679,,,,678',
'678,678,679,678,679,679,679,678,678,679,679,,678,,678,678,678,678,678',
'678,678,,,,,,678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678',
'678,678,678,678,678,,678,678,678,,678,678,678,678,678,,,,,,,,,,,,,,',
',,,,,678,,,678,,,678,678,,,678,,,,,,678,,,,,,,,,678,,,,,678,678,678',
'678,,678,678,678,678,,,,,678,678,,,,677,677,677,678,677,678,678,678',
'677,677,678,678,,677,,677,677,677,677,677,677,677,,,,,,677,677,677,677',
'677,677,677,,,677,,,,,,,677,,,677,677,677,677,677,677,677,677,677,677',
'677,677,,677,677,677,677,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677',
',,677,,,,677,,677,,,677,,,,,,677,,,,,677,677,677,677,,677,677,677,677',
',,,,677,677,,,,676,676,676,677,676,677,677,677,676,676,677,677,,676',
',676,676,676,676,676,676,676,,,,,,676,676,676,676,676,676,676,,,676',
',,,,,,676,,,676,676,676,676,676,676,676,676,676,676,676,676,,676,676',
'676,676,676,,,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,676,,676,',
'676,,,676,,,,,,676,,,,,676,676,676,676,,676,676,676,676,,,,,676,676',
',,,673,673,673,676,673,676,676,676,673,673,676,676,,673,,673,673,673',
'673,673,673,673,,,,,,673,673,673,673,673,673,673,,,673,,,,,,,673,,,673',
'673,673,673,673,673,673,673,,673,673,673,,673,673,673,673,673,,,,,,',
',,,,,,,,,,,,,673,,,673,,,673,673,,,673,,,,,,673,,,,,,,,,673,,,,,673',
'673,673,673,,673,673,673,673,,,,,673,673,,,,,,,673,,673,673,673,,,673',
'673,672,672,672,672,672,,,,672,672,,,,672,,672,672,672,672,672,672,672',
',,,,,672,672,672,672,672,672,672,,,672,,,,,,672,672,,672,672,672,672',
'672,672,672,672,672,,672,672,672,,672,672,672,672,672,,,,,,,,,,,,,,',
',,,,,672,,,672,,,672,672,,,672,,672,,,,672,,,,,,,,,672,,,,,672,672,672',
'672,,672,672,672,672,,,,,672,672,,,,669,669,669,672,669,672,672,672',
'669,669,672,672,,669,,669,669,669,669,669,669,669,,,,,,669,669,669,669',
'669,669,669,,,669,,,,,,,669,,,669,669,669,669,669,669,669,669,669,669',
'669,669,,669,669,669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669,,,669,669',
',,669,,669,,669,,669,,,669,,,,,,669,,,,,669,669,669,669,,669,669,669',
'669,,,,,669,669,,,,,,,669,,669,669,669,511,,669,669,,,,511,511,511,',
',511,511,511,896,511,896,896,896,896,896,,,511,511,511,,,,896,,,,,,511',
'511,,511,511,511,511,511,,,,,,,,,896,,377,,377,377,377,377,377,896,896',
'896,896,,,,896,377,,,,,,,,511,,,,,,,511,,,,,511,511,377,377,,896,,,',
',,377,377,377,377,,,,377,,,,,511,511,,,,,,,,,,,,,,511,,,511,,516,516',
'516,511,516,,,,516,516,511,,,516,,516,516,516,516,516,516,516,,,,,,516',
'516,516,516,516,516,516,,,516,,,,,,,516,,,516,516,516,516,516,516,516',
'516,,516,516,516,,516,516,516,516,516,,,,,,,,,,,,,,,,,,,,516,,,516,',
',516,516,,,516,,,,,,516,,,,,,,,,516,,,,,516,516,516,516,,516,516,516',
'516,,,,,516,516,,,,668,668,668,516,668,516,516,516,668,668,516,516,',
'668,,668,668,668,668,668,668,668,,,,,,668,668,668,668,668,668,668,,',
'668,,,,,,,668,,,668,668,668,668,668,668,668,668,,668,668,668,,668,668',
'668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,,,,,668,,',
',,,,,,668,,,,,668,668,668,668,,668,668,668,668,,,,,668,668,,,,667,667',
'667,668,667,668,668,668,667,667,668,668,,667,,667,667,667,667,667,667',
'667,,,,,,667,667,667,667,667,667,667,,,667,,,,,,,667,,,667,667,667,667',
'667,667,667,667,,667,667,667,,667,667,667,667,667,,,,,,,,,,,,,,,,,,',
',667,,,667,,,667,667,,,667,,667,,,,667,,,,,,,,,667,,,,,667,667,667,667',
',667,667,667,667,,,,,667,667,,,,,,,667,,667,667,667,,,667,667,665,665',
'665,665,665,,,,665,665,,,,665,,665,665,665,665,665,665,665,,,,,,665',
'665,665,665,665,665,665,,,665,,,,,,665,665,,665,665,665,665,665,665',
'665,665,665,,665,665,665,,665,665,665,665,665,,,,,,,,,,,,,,,,,,,,665',
',,665,,,665,665,,,665,,665,,,,665,,,,,,,,,665,,,,,665,665,665,665,,665',
'665,665,665,,,,,665,665,,,,525,525,525,665,525,665,665,665,525,525,665',
'665,,525,,525,525,525,525,525,525,525,,,,,,525,525,525,525,525,525,525',
',,525,,,,,,,525,,,525,525,525,525,525,525,525,525,525,525,525,525,,525',
'525,525,525,525,,,,,,,,,,,,,,,,,,,,525,,,525,,,525,525,,,525,,525,,525',
',525,,,525,,,,,,525,,,,,525,525,525,525,,525,525,525,525,,,,,525,525',
',,,527,527,527,525,527,525,525,525,527,527,525,525,,527,,527,527,527',
'527,527,527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527,,,527',
'527,527,527,527,527,527,527,527,527,527,527,,527,527,527,527,527,,,',
',,,,,,,,,,,,,,,,527,,,527,,,527,527,,,527,,,,527,,527,,,527,,,,,,527',
',,,,527,527,527,527,,527,527,527,527,,,,,527,527,,,,529,529,529,527',
'529,527,527,527,529,529,527,527,,529,,529,529,529,529,529,529,529,,',
',,,529,529,529,529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529',
'529,529,529,,529,529,529,,529,529,529,529,529,,,,,,,,,,,,,,,,,,,,529',
',,529,,,529,529,,,529,,,,,,529,,,,,,,,,529,,,,,529,529,529,529,,529',
'529,529,529,,,,,529,529,,,,,,,529,,529,529,529,,,529,529,535,535,535',
'535,535,,,,535,535,,,,535,,535,535,535,535,535,535,535,,,,,,535,535',
'535,535,535,535,535,,,535,,,,,,535,535,535,535,535,535,535,535,535,535',
'535,535,,535,535,535,,535,535,535,535,535,,,,,,,,,,,,,,,,,,,,535,,,535',
',,535,535,,,535,,535,,,,535,,,,,,,,,535,,,,,535,535,535,535,,535,535',
'535,535,,,,,535,535,,,,,,535,535,,535,535,535,,,535,535,545,545,545',
',545,,,,545,545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545,545',
'545,545,545,545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,545',
'545,545,545,,545,545,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545',
'545,,,545,,545,,545,,545,,,545,,,,,,545,,,,,545,545,545,545,,545,545',
'545,545,,,,,545,545,,,,637,637,637,545,637,545,545,545,637,637,545,545',
',637,,637,637,637,637,637,637,637,,,,,,637,637,637,637,637,637,637,',
',637,,,,,,,637,,,637,637,637,637,637,637,637,637,637,637,637,637,,637',
'637,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,637,,637',
',637,,,637,,,,,,637,,,,,637,637,637,637,,637,637,637,637,,,,,637,637',
',,,555,555,555,637,555,637,637,637,555,555,637,637,,555,,555,555,555',
'555,555,555,555,,,,,,555,555,555,555,555,555,555,,,555,,,,,,,555,,,555',
'555,555,555,555,555,555,555,,555,555,555,,555,555,555,555,555,,,,,,',
',,,,,,,,,,,,,555,,,555,,,555,555,,,555,,,,,,555,,,,,,,,,555,,,,,555',
'555,555,555,,555,555,555,555,,,,,555,555,,,,558,558,558,555,558,555',
'555,555,558,558,555,555,,558,,558,558,558,558,558,558,558,,,,,,558,558',
'558,558,558,558,558,,,558,,,,,,,558,,,558,558,558,558,558,558,558,558',
',558,558,558,,558,558,558,558,558,,,,,,,,,,,,,,,,,,,,558,,,558,,,558',
'558,,,558,,,,,,558,,,,,,,,,558,,,,,558,558,558,558,,558,558,558,558',
',,,,558,558,,,,561,561,561,558,561,558,558,558,561,561,558,558,,561',
',561,561,561,561,561,561,561,,,,,,561,561,561,561,561,561,561,,,561',
',,,,,,561,,,561,561,561,561,561,561,561,561,,561,561,561,,561,561,561',
'561,561,,,,,,,,,,,,,,,,,,,,561,,,561,,,561,561,,,561,,,,,,561,,,,,,',
',,561,,,,,561,561,561,561,,561,561,561,561,,,,,561,561,,,,562,562,562',
'561,562,561,561,561,562,562,561,561,,562,,562,562,562,562,562,562,562',
',,,,,562,562,562,562,562,562,562,,,562,,,,,,,562,,,562,562,562,562,562',
'562,562,562,,562,562,562,,562,562,562,562,562,,,,,,,,,,,,,,,,,,,,562',
',,562,,,562,562,,,562,,,,,,562,,,,,,,,,562,,,,,562,562,562,562,,562',
'562,562,562,,,,,562,562,,,,217,217,217,562,217,562,562,562,217,217,562',
'562,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217',
',,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,,217',
'217,,,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,217,,,,,,,,',
',,,,,,,,,217,217,217,217,,217,217,217,217,,,,,217,217,,,,543,543,543',
'217,543,217,217,217,543,543,,,,543,,543,543,543,543,543,543,543,,,,',
',543,543,543,543,543,543,543,,,543,,,,,,,543,,,543,543,543,543,543,543',
'543,543,,543,543,543,,543,543,,,543,,,,,,,,,,,,,,,,,,,,543,,,543,,,543',
'543,,,543,,,,,,,,,,,,,,,,,,,,543,543,543,543,,543,543,543,543,,,,,543',
'543,,,,745,745,745,543,745,543,543,543,745,745,,,,745,,745,745,745,745',
'745,745,745,,,,,,745,745,745,745,745,745,745,,,745,,,,,,,745,,,745,745',
'745,745,745,745,745,745,,745,745,745,,745,745,,,745,,,,,,,,,,,,,,,,',
',,,745,,,745,,,745,745,,,745,,,,,,,,,,,,,,,,,,,,745,745,745,745,,745',
'745,745,745,,,,,745,745,,,,552,552,552,745,552,745,745,745,552,552,',
',,552,,552,552,552,552,552,552,552,,,,,,552,552,552,552,552,552,552',
',,552,,,,,,,552,,,552,552,552,552,552,552,552,552,,552,552,552,,552',
'552,,,552,,,,,,,,,,,,,,,,,,,,552,,,552,,,552,552,,,552,,,,,,,,,,,,,',
',,,,,,552,552,552,552,,552,552,552,552,,,,,552,552,,,,1016,1016,1016',
'552,1016,552,552,552,1016,1016,,,,1016,,1016,1016,1016,1016,1016,1016',
'1016,,,,,,1016,1016,1016,1016,1016,1016,1016,,,1016,,,,,,,1016,,,1016',
'1016,1016,1016,1016,1016,1016,1016,,1016,1016,1016,,1016,1016,,,1016',
',,,,,,,,,,,,,,,,,,,1016,,,1016,,,1016,1016,,,1016,,,,,,,,,,,,,,,,,,',
',1016,1016,1016,1016,,1016,1016,1016,1016,,,,,1016,1016,,,,756,756,756',
'1016,756,1016,1016,1016,756,756,,,,756,,756,756,756,756,756,756,756',
',,,,,756,756,756,756,756,756,756,,,756,,,,,,,756,,,756,756,756,756,756',
'756,756,756,,756,756,756,,756,756,,,756,,,,,,,,,,,,,,,,,,,,756,,,756',
',,756,756,,,756,,,,,,,,,,,,,,,,,,,,756,756,756,756,,756,756,756,756',
',,,,756,756,,,,38,38,38,756,38,756,756,756,38,38,,,,38,,38,38,38,38',
'38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38',
'38,38,,38,38,38,,38,38,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38',
',,1023,,1023,1023,1023,1023,1023,,,,,,,,,1023,,38,38,38,38,,38,38,38',
'38,,,,,38,38,,,,38,,1023,38,,38,38,38,76,76,76,,76,1023,1023,,76,76',
'1023,,,76,,76,76,76,76,76,76,76,,,,,,76,76,76,76,76,76,76,,,76,,,,,',
',76,,,76,76,76,76,76,76,76,76,,76,76,76,,76,76,,,76,,,,,,,,,,,,,,,,',
',,,76,,,76,,,76,76,,,76,,76,,,,,,,,,,,,,,,,,,76,76,76,76,,76,76,76,76',
',,,,76,76,,,,78,78,78,76,78,76,76,76,78,78,,,,78,,78,78,78,78,78,78',
'78,,,,,,78,78,78,78,78,78,78,,,78,,,,,,,78,,,78,78,78,78,78,78,78,78',
',78,78,78,,78,78,,,78,,,,,,,,,,,,,,,,,,,,78,,,78,,,78,78,,,78,,,,,,',
',,,,,,,,,,,,,78,78,78,78,,78,78,78,78,,,,,78,78,,,,220,220,220,78,220',
'78,78,78,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220',
'220,220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220',
'220,220,,220,220,,,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220',
',220,,,,,,,,,,,,,,,,,,220,220,220,220,,220,220,220,220,,,,,220,220,',
',,77,77,77,220,77,220,220,220,77,77,,,,77,,77,77,77,77,77,77,77,,,,',
',77,77,77,77,77,77,77,,,77,,,,,,,77,,,77,77,77,77,77,77,77,77,,77,77',
'77,,77,77,,,77,,,,,,,,,,,,,,,,,77,,,77,,,77,,,77,77,,,77,,,,,,,,,,,',
',,,,,,,,77,77,77,77,,77,77,77,77,,,,,77,77,,,,1083,1083,1083,77,1083',
'77,77,77,1083,1083,,,,1083,,1083,1083,1083,1083,1083,1083,1083,,,,,',
'1083,1083,1083,1083,1083,1083,1083,,,1083,,,,,,,1083,,,1083,1083,1083',
'1083,1083,1083,1083,1083,,1083,1083,1083,,1083,1083,,,1083,,,,,,,,,',
',,,,,,,,,,1083,,,1083,,,1083,1083,,,1083,,,,,,,,,,,,,,,,,,,,1083,1083',
'1083,1083,,1083,1083,1083,1083,,,,,1083,1083,,,,347,347,347,1083,347',
'1083,1083,1083,347,347,,,,347,,347,347,347,347,347,347,347,,,,,,347',
'347,347,347,347,347,347,,,347,,,,,,,347,,,347,347,347,347,347,347,347',
'347,,347,347,347,,347,347,,,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347',
',,347,,,,,,,,,,,,,,,,,,,,347,347,347,347,,347,347,347,347,,,,,347,347',
',,,37,37,37,347,37,347,347,347,37,37,,,,37,,37,37,37,37,37,37,37,,,',
',,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37',
'37,,37,37,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,',
',,,,,,,,37,37,37,37,,37,37,37,37,,,,,37,37,,,,328,328,328,37,328,37',
'37,37,328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328',
'328,328,328,,,328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328,328',
'328,,328,328,,,328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,,1025',
',1025,1025,1025,1025,1025,,,,,,,,,1025,,328,328,328,328,,328,328,328',
'328,,,,,328,328,,,,328,,1025,328,,328,328,328,1006,1006,1006,,1006,1025',
'1025,,1006,1006,1025,,,1006,,1006,1006,1006,1006,1006,1006,1006,,,,',
',1006,1006,1006,1006,1006,1006,1006,,,1006,,,,,,,1006,,,1006,1006,1006',
'1006,1006,1006,1006,1006,,1006,1006,1006,,1006,1006,,,1006,,,,,,,,,',
',,,,,,,,,,1006,,,1006,,,1006,1006,,,1006,,,,,,,,,,,,,,,,,,,,1006,1006',
'1006,1006,,1006,1006,1006,1006,,,,,1006,1006,,,,,,,1006,,1006,1006,1006',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8',
'8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8',
'8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9',
',,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9',
'9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,663',
'663,663,663,663,663,663,663,663,663,663,663,663,663,663,663,663,663',
'663,663,663,663,663,663,,,,663,663,663,663,663,663,663,663,663,663,',
',,,,663,663,663,663,663,663,663,663,663,,,663,,,,,,,,663,663,,663,663',
'663,663,663,663,663,,,663,663,,,,663,663,663,663,,,,,,,,,,,,,,663,663',
',663,663,663,663,663,663,663,663,663,663,663,663,,,663,663,,,,,,,,,',
',,,,663,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423',
'423,423,423,423,423,423,423,423,423,,,,423,423,423,423,423,423,423,423',
'423,423,,,,,,423,423,423,423,423,423,423,423,423,,,423,,,,,,,,423,423',
',423,423,423,423,423,423,423,,,423,423,,,,423,423,423,423,,,,,,,,,,',
',,,423,423,,423,423,423,423,423,423,423,423,423,423,423,423,,,423,423',
'873,873,873,873,,,,,,,,,,423,,,873,873,873,873,,,1019,873,1019,1019',
'1019,1019,1019,873,873,,,873,,,,1019,,,,,,,,,,,,,,,,873,,,873,,,1019',
'873,,,873,,873,,,1019,1019,1019,1019,,,,1019,,,,873,,,,873,873,873,873',
',873,873,873,873,,,,,873,873,,,,,,,873,,873,873,873,,,873,873,723,723',
'723,723,723,723,723,723,723,723,723,723,723,723,723,723,723,723,723',
'723,723,723,723,723,,,,723,723,723,723,723,723,723,723,723,723,,,,,',
'723,723,723,723,723,723,723,723,723,,,723,,,,,,,,723,723,,723,723,723',
'723,723,723,723,,,723,723,,,,723,723,723,723,,,,,,,,,,,,,,723,723,,723',
'723,723,723,723,723,723,723,723,723,723,723,,,723,878,878,878,878,,',
',,,,,,,,,,878,878,878,878,,,362,878,362,362,362,362,362,878,878,,,878',
',,,362,,,,,,,,,,,,,,,,878,,,878,,,362,878,,,878,,,,,362,362,362,362',
',,,362,,,,878,,,,878,878,878,878,,878,878,878,878,,,,,878,878,871,871',
'871,871,,,878,,878,878,878,,,878,878,,871,871,871,871,,,,871,871,,,',
',871,871,,,871,871,,,,,,,,,,,,,,,,,,,871,,,871,,,,871,,,871,,871,,,',
',,,871,,,,,,,871,,,,871,871,871,871,,871,871,871,871,,,,,871,871,870',
'870,870,870,,,871,,871,871,871,,,871,871,,870,870,870,870,,,,870,870',
',,,,870,870,,,870,870,,,,,,,,,,,,,,,,,,,870,,,870,,,,870,,,870,,870',
',,,,,,870,,,,,,,870,,,,870,870,870,870,,870,870,870,870,,,,,870,870',
'867,867,867,867,,,870,,870,870,870,,,870,870,,867,867,867,867,,,770',
'867,770,770,770,770,770,867,867,,,867,,,,770,,,,,,,,,,,,,,,,867,,,867',
',,770,867,,,867,,,,,770,770,770,770,,,,770,,,,867,,,,867,867,867,867',
',867,867,867,867,,,,,867,867,1157,1157,1157,1157,,,867,,867,867,867',
',,867,867,,1157,1157,1157,1157,,,772,1157,772,772,772,772,772,1157,1157',
',,1157,,,,772,,,,,,,,,,,,,,,,1157,,,1157,,,772,1157,,,1157,,,,,772,772',
'772,772,,,,772,,,,1157,,,,1157,1157,1157,1157,,1157,1157,1157,1157,',
',,,1157,1157,1160,1160,1160,1160,,,1157,,1157,1157,1157,,,1157,1157',
',1160,1160,1160,1160,,,774,1160,774,774,774,774,774,1160,1160,,,1160',
',,,774,,,,,,,,,,,,,,,,1160,,,1160,,,774,1160,,,1160,,,,,,,774,774,,',
',774,,,,1160,,,,1160,1160,1160,1160,,1160,1160,1160,1160,,,,,1160,1160',
'1110,1110,1110,1110,,,1160,,1160,1160,1160,,,1160,1160,,1110,1110,1110',
'1110,,,1075,1110,1075,1075,1075,1075,1075,1110,1110,,,1110,,,,1075,',
',,,,,,,,,,,,,,1110,,,1110,,,1075,1110,,,1110,,1110,,,1075,1075,1075',
'1075,,,,1075,,,,1110,,,,1110,1110,1110,1110,,1110,1110,1110,1110,,,',
',1110,1110,,,,,,,1110,,1110,1110,1110,,,1110,1110,24,24,24,24,24,24',
'24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,,,,24,24,24,24',
'24,24,24,24,24,24,,,,,,24,24,24,24,24,24,24,24,24,24,24,24,,24,,,,,',
'24,24,,24,24,24,24,24,24,24,,,24,24,,,,24,24,24,24,,,,,,24,,,,,,,,24',
'24,,24,24,24,24,24,24,24,24,24,24,24,24,,,24,1117,1117,1117,1117,,,',
',,,,,,,,,1117,1117,1117,1117,,,1077,1117,1077,1077,1077,1077,1077,1117',
'1117,,,1117,,,,1077,,,,,,,,,,,,,,,,1117,,,1117,,,1077,1117,,,1117,,',
',,1077,1077,1077,1077,,,,1077,,,,1117,,,,1117,1117,1117,1117,,1117,1117',
'1117,1117,,,,,1117,1117,1118,1118,1118,1118,,,1117,,1117,1117,1117,',
',1117,1117,,1118,1118,1118,1118,,,1079,1118,1079,1079,1079,1079,1079',
'1118,1118,,,1118,,,,1079,,,,,,,,,,,,,,,,1118,,,1118,,,1079,1118,,,1118',
',,,,,,1079,1079,,,,1079,,,,1118,,,,1118,1118,1118,1118,,1118,1118,1118',
'1118,,,,,1118,1118,1059,1059,1059,1059,,,1118,,1118,1118,1118,,,1118',
'1118,,1059,1059,1059,1059,,,1194,1059,1194,1194,1194,1194,1194,1059',
'1059,,,1059,,,,1194,,,,,,,,,,,,,,,,1059,,,1059,,,1194,1059,,,1059,,',
',,,,1194,1194,,,,1194,,,,1059,,,,1059,1059,1059,1059,,1059,1059,1059',
'1059,,,,,1059,1059,484,484,484,484,,,1059,,1059,1059,1059,,,1059,1059',
',484,484,484,484,,,1142,484,1142,1142,1142,1142,1142,484,484,,,484,',
',,1142,,,,,,,,,,,,,,,,484,,,484,,,1142,484,,,484,,,,,,,1142,1142,,,',
'1142,,,,484,,,,484,484,484,484,,484,484,484,484,,,,,484,484,977,977',
'977,977,,,484,,484,484,484,,,484,484,,977,977,977,977,,,615,977,615',
'615,615,615,615,977,977,,,977,,,,615,,,,,,,,,,,,,,,,977,,,977,,,615',
'977,,,977,,,,,615,615,615,615,,,,615,,,,977,,,,977,977,977,977,,977',
'977,977,977,,,,,977,977,970,970,970,970,,,977,,977,977,977,,,977,977',
',970,970,970,970,,,1162,970,1162,1162,1162,1162,1162,970,970,,,970,',
',,1162,,,,,,,,,,,,,,,,970,,,970,,,1162,970,,,970,,970,,,1162,1162,1162',
'1162,,,,1162,,,,970,,,,970,970,970,970,,970,970,970,970,,,,,970,970',
'946,946,946,946,,,970,,970,970,970,,,970,970,,946,946,946,946,,,,946',
'946,,,,,946,946,,,946,946,,,,,,,707,707,707,707,,,,,,,,,946,,,946,707',
'707,707,946,,,946,,946,,,,,707,707,946,,707,,,,,946,,,,946,946,946,946',
',946,946,946,946,,,,,946,946,,,,,,,946,,946,946,946,,,946,946,1164,',
'1164,1164,1164,1164,1164,,,,,707,707,707,707,1164,707,707,707,707,,',
',,707,707,224,224,,,224,,707,,707,707,707,1164,224,224,,224,224,224',
'224,224,224,224,1164,1164,224,224,,1164,,224,224,224,224,,,,,,224,,',
',,,,,224,224,,224,224,224,224,224,224,224,224,224,224,224,224,223,223',
'224,,223,,,,,,,,223,223,,223,223,223,223,223,223,223,,,223,223,,,,223',
'223,223,223,,,,,,223,,,,,,,,223,223,,223,223,223,223,223,223,223,223',
'223,223,223,223,289,289,223,,289,,,,,,,,289,289,,289,289,289,289,289',
'289,289,,,289,289,,,,289,289,289,289,,,,,,,,,,,,,,289,289,,289,289,289',
'289,289,289,289,289,289,289,289,289,477,477,289,,477,,,,,,,,477,477',
',477,477,477,477,477,477,477,,,477,477,,,,477,477,477,477,,,,,,477,',
',,,,,,477,477,,477,477,477,477,477,477,477,477,477,477,477,477,478,478',
'477,,478,,,,,,,,478,478,,478,478,478,478,478,478,478,,,478,478,,,,478',
'478,478,478,,,,,,478,,,,,,,,478,478,,478,478,478,478,478,478,478,478',
'478,478,478,478,546,546,478,,546,,,,,,,,546,546,,546,546,546,546,546',
'546,546,,,546,546,,,,546,546,546,546,,,,,,546,,,,,,,,546,546,,546,546',
'546,546,546,546,546,546,546,546,546,546,547,547,546,,547,,,,,,,,547',
'547,,547,547,547,547,547,547,547,,,547,547,,,,547,547,547,547,,,,,,547',
',,,,,,,547,547,,547,547,547,547,547,547,547,547,547,547,547,547,556',
'556,547,,556,,,,,,,,556,556,,556,556,556,556,556,556,556,,,556,556,',
',,556,556,556,556,,,,,,556,,,,,,,,556,556,,556,556,556,556,556,556,556',
'556,556,556,556,556,557,557,556,,557,,,,,,,,557,557,,557,557,557,557',
'557,557,557,,,557,557,,,,557,557,557,557,,,,,,557,,,,,,,,557,557,,557',
'557,557,557,557,557,557,557,557,557,557,557,628,628,557,,628,,,,,,,',
'628,628,,628,628,628,628,628,628,628,,,628,628,,,,628,628,628,628,,',
',,,628,,,,,,,,628,628,,628,628,628,628,628,628,628,628,628,628,628,628',
'629,629,628,,629,,,,,,,,629,629,,629,629,629,629,629,629,629,,,629,629',
',,,629,629,629,629,,,,,,629,,,,,,,,629,629,,629,629,629,629,629,629',
'629,629,629,629,629,629,635,635,629,,635,,,,,,,,635,635,,635,635,635',
'635,635,635,635,,,635,635,,,,635,635,635,635,,,,,,635,,,,,,,,635,635',
',635,635,635,635,635,635,635,635,635,635,635,635,636,636,635,,636,,',
',,,,,636,636,,636,636,636,636,636,636,636,,,636,636,,,,636,636,636,636',
',,,,,636,,,,,,,,636,636,,636,636,636,636,636,636,636,636,636,636,636',
'636,670,670,636,,670,,,,,,,,670,670,,670,670,670,670,670,670,670,,,670',
'670,,,,670,670,670,670,,,,,,670,,,,,,,,670,670,,670,670,670,670,670',
'670,670,670,670,670,670,670,671,671,670,,671,,,,,,,,671,671,,671,671',
'671,671,671,671,671,,,671,671,,,,671,671,671,671,,,,,,671,,,,,,,,671',
'671,,671,671,671,671,671,671,671,671,671,671,671,671,1135,1135,671,',
'1135,,,,,,,,1135,1135,,1135,1135,1135,1135,1135,1135,1135,,,1135,1135',
',,,1135,1135,1135,1135,,,,,,1135,,,,,,,,1135,1135,,1135,1135,1135,1135',
'1135,1135,1135,1135,1135,1135,1135,1135,1139,1139,1135,,1139,,,,,,,',
'1139,1139,,1139,1139,1139,1139,1139,1139,1139,,,1139,1139,,,,1139,1139',
'1139,1139,,,,,,1139,,,,,,,,1139,1139,,1139,1139,1139,1139,1139,1139',
'1139,1139,1139,1139,1139,1139,1140,1140,1139,,1140,,,,,,,,1140,1140',
',1140,1140,1140,1140,1140,1140,1140,,,1140,1140,,,,1140,1140,1140,1140',
',,,,,1140,,,,,,,,1140,1140,,1140,1140,1140,1140,1140,1140,1140,1140',
'1140,1140,1140,1140,,1166,1140,1166,1166,1166,1166,1166,1168,,1168,1168',
'1168,1168,1168,,1166,,,,,,,1168,,,,,,,,,,,,,,,1166,,,,,,,1168,,,,1166',
'1166,,,,1166,,1168,1168,,,,1168' ]
        racc_action_check = arr = ::Array.new(27889, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2446,   942,   nil,   396,   nil, 18224,   991,   883, 24462, 24590,
   875,   nil,   830,   815,   871,   413,   863,   839,   409,   254,
   nil,   -71,  6086,  2446, 25887,   857,   nil,   171,   nil,   122,
  6227,  6337,  6471,  6602,  6733,   nil,  2734, 24053, 23128,   nil,
   747,   356,   594,   803,  7126,  7257,    19,  7388,  7519,   522,
  7650,   715,   753,   752,   694,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  7791,   nil,  7932,  8063,  8194,   -23,
   nil,  8325,  8456,   nil,   nil,  8587, 23267, 23660, 23398,   nil,
   nil,   nil,   nil,   nil,   734,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   861,   nil,   nil,   112,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   826,   nil,
  8730,   nil,   nil,   nil,   nil,  8873,  9004,  9135,  9266,  9409,
   nil,  3310,   nil,   507,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   686,   nil,  3454,  9540,  9671, 22342,  9802,  9933,
 23529, 10064, 10195, 26739, 26678,   nil,   nil, 10326, 10457, 10588,
   nil,   nil,  1133,   360,   107,   724,   121,   628,   686,   nil,
 10719,  2014,   671,   nil, 10850, 10981, 11112, 11243, 11374, 11505,
 11636, 11767, 11898, 12029, 12160, 12291, 12422, 12553, 12684, 12815,
 12946, 13077, 13208, 13339, 13470, 13601,   nil,   nil,   nil,   nil,
 13732,   nil,   nil,   231,   299,   420,   444,   504,   526,   556,
   557,   561,   595,   nil,   nil,   nil, 13863,   nil,   nil, 26800,
   nil,   nil,   645, 13994, 14125,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 14256,   nil,  3310,   nil,   607,   600,   nil, 14387,
   639, 14518,   nil,   nil, 14649, 14780,   nil,   nil,  -100,   nil,
 14923,   712,   562,   450,  1006,   437,   439,   366, 24184,  4894,
   799,   872,   989,   435,   999,   nil,   306,   168,     6,   190,
   181,   nil,   nil,   nil,   114,   250,   -77, 23922,   nil,   280,
   627,  4462,  4606,  1370,   nil,  1365, 15840,   nil, 15971,  1283,
  3022,   248, 25159,  1279,  2878,  1438,  1135,  1291,   nil,   481,
   123,  1314,  1294,    71,  1313,   nil,   nil, 20345,   386,  2302,
    34,    35, 16757,  1294,  1150,   440,  1372,  1252,   551,   479,
  1166,  1329,  1143,  1357,   nil,   nil,  1573,  1717,   357,   nil,
   628,   nil,  1265, 17281,   nil,   nil,   351,   357,   331,   295,
   392,   -38,   -35,   398,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1254, 24846,   nil,   nil,   nil,   nil,  1250,   nil,
  1317,  1217, 17412,  1203,   nil,   nil,  1185,   nil,  1277,   150,
  1264,   nil,   nil,  2590,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  2878,  1173,   nil,  1154,  1151,   623,   144,
 17815,   nil,   nil,   nil,   471,   583,  1180,   nil,   nil, 17947,
 18083,   nil,   nil,   nil,   -33,   nil,  1174, 26861, 26922, 18355,
    -1, 18486, 18617, 18748, 26264,  5955,  5169,   432,   741,  1180,
  1178,  1174,  1156,  6086,  6176,  6289,  5693,  4750,  5824,  4174,
  5431,  5300,  1300,   679,  5038,  4894,  4030,  4318,   nil,   -31,
   nil, 20342,   nil,   nil,   nil,   nil, 20472,  1013,  1010,   nil,
   nil,   nil,  1006,   nil,   nil, 21008,   nil, 21139,   nil, 21270,
   nil,   156,   nil,   nil,   nil, 21413,  1279,   nil,  1000,   992,
   nil,   nil,   986, 22473,   988, 21556, 26983, 27044,   555,  1028,
   nil,   nil, 22735,   971,   nil, 21818, 27105, 27166, 21949,  5562,
  3598, 22080, 22211,  1093,  1087,   nil,   nil,   955,   954,   944,
   942,   nil,   929,   885,   872,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   859,  1136,   nil,   nil,  5824,   nil,
   nil,   nil,     1,   nil,   nil,   nil,   962,   nil,   nil,   964,
   330,  5693,  1011,  1010,   912,   958,   nil,  5562,   nil,   nil,
  5431,   nil,   nil,   nil,   nil, 26365,   nil,  4462,  1066,   nil,
  3166,    96,  1078,  1084,   394,  1086,  5300,  5169, 27227, 27288,
   624,   nil,   nil,   763,   nil, 27349, 27410, 21687,   nil,   nil,
   139,  1726,   nil,   nil,   nil,   859,   nil,   nil,   nil,  1001,
   nil,   nil,   282,   nil,   290,   nil,   nil,   998,   nil,   999,
   nil,   nil,   nil, 24718,   nil, 20877,  1005, 20734, 20603, 20201,
 27471, 27532, 20070, 19927,   198,  1063, 19796, 19665, 19534, 19403,
  1062,   nil,   nil, 19272, 19141,  1063,   nil,   nil,   nil,   127,
   281,   722,     0,  1032,  1076,   nil,  1077,   nil,   nil,   516,
   202,    44,   nil,   207,   nil,   nil,  7791, 26599,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1141,
   464,   nil,  1074, 25073,   nil,  1210,   nil,  1194,     4,   nil,
   nil,   nil,  1115,  1120,  1222,   nil,  1104,   nil,  1152, 19010,
   nil,   nil, 18879,   nil,   -80, 22604,  1115,   nil,  1119,  1141,
  2005,  1168,  1861,   831,  1172,  1129, 22997,   nil,  1197,    13,
  3022,  1260, 17674,   nil,   nil,   nil,   676,   nil,   nil,   564,
 25453,   nil, 25551,   nil, 25649,   nil, 17543,   nil,  1280,   nil,
  1144,  1147,  1057,  1152,   nil,   nil,   nil,   nil,   nil,   nil,
  2734,   nil,   nil,   nil,   nil,   485,   -27,  1161,   215,   nil,
  1278,   nil,   nil,   nil,   nil,   nil,  1292,  1293,   nil,   nil,
   138,  1176,  2149,  1285,  1429,  1287,  4030,   997,   443,   nil,
  1235,  3886, 17150,   nil,  1364,   nil,   nil,   nil,   nil,   nil,
  4318,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1242,
 17019,  1253,   220,   164,   361,   251,   nil,  3166, 16888,   nil,
  1266,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 16626, 16495, 16364, 16233,   308,  1350, 25450,   -70,    79,
 25352, 25254,   354, 24930,   nil,   571,   nil,  1300, 25156,   861,
 18083,   nil,   nil,   nil,   nil,   nil,   nil, 16102,   nil,   nil,
  1316,   nil,   nil,  1313,   nil,   nil, 20306,  3742,   nil,   nil,
   nil,   nil,  1302,   475,   nil,   nil, 15709,  1437,   nil,  4174,
  1313,  1360,   nil,   nil,  1317,   nil,  1400,   nil,   nil,  1319,
  1329,   nil,  1330,  1331,   nil,  1332,   nil,   nil,  1336,   992,
  1454,   nil,   nil, 15578,   nil,   nil,   nil,   nil,  1339,  1390,
    23,   nil, 15447,   151,   nil,   nil, 26558, 15316,  4606,   690,
   307,   nil,   330,   -73,  4750,   nil,   335,   340,   138,   nil,
   nil, 15185, 15054,   nil,   nil,   nil,   nil,   -70,   379,   395,
 26460,   nil,   400,   -32,   456,   nil,   nil, 26362,   nil,   nil,
     0,   nil,   nil,   501,   506,   nil,   517,   541,   nil,   nil,
   -66,   nil,   nil,  3886,  1582,   nil,   544,   545,   nil,   549,
   573,   574,   nil,   610,   593,   579, 24323,   nil,   nil,   nil,
  3454,   nil,  1870,   nil,   nil,    36, 22866,   nil,   nil, 24933,
   nil, 17878,   nil, 23175,   nil, 24231,   nil,   nil,   nil,   nil,
   610,   611,  3742,  2158,  2302,  1339,   nil,   nil,    11,   nil,
    26,   340,   -72,   nil,   nil,   nil,   686,   nil,   nil,   nil,
   777,   nil,   nil,   nil,   723,   678,   -41,   nil,   681, 26166,
   747,   730,   137,   nil,   nil,   nil,   nil,   nil,   nil,   247,
   nil,   nil,   782,   nil,   nil, 25747,   nil, 25973,   nil, 26071,
   nil,   nil,   712, 23791,   995,   782,   nil,  5038,    32,    92,
  1022,   791,    33,   nil,   727,   732,   733,   738,  1492,  1424,
   765,   870,   -75,   nil,   nil,   nil,  3598,   nil,  6995,  6864,
 25744,   nil,   nil,   nil,   nil,   nil,   757, 25970, 26068,   758,
   nil,   nil,   nil,   nil,   766,   nil,   nil,   773,   774,   781,
   786,   nil,   788,   nil,  1139, 27593,   nil,   939,  5955, 27654,
 27715,   105, 26267,   nil,   nil,   nil,   nil,   820,   nil,   nil,
   nil,  1201,   629,  2590,   nil,   nil,   nil, 25548,   829,   838,
 25646,   nil, 26463,   nil, 26652,   nil, 27777,   nil, 27784,   nil,
   nil,   891,   896,   nil,   856,   102,    42,   103,   111,   869,
   nil,   nil,   286,   969,   nil,   972,   980,  1014,  1015,    -1,
   nil,   nil,   nil,   nil, 26169,   nil,   nil,   nil,   nil,   819,
   nil ]

racc_action_default = [
    -3,  -719,    -1,  -704,    -4,  -719,    -7,  -719,  -719,  -719,
  -719,   -30,  -719,  -719,   -35,   -36,  -719,  -719,  -719,  -306,
   -52,  -706,  -719,   -59,  -719,   -67,   -68,   -69,   -73,  -283,
  -283,  -283,  -319,  -346,  -347,   -85,   -12,   -89,   -97,   -99,
  -719,  -604,  -605,  -719,  -719,  -719,  -719,  -719,  -719,  -237,
  -719,  -706,  -616,  -616,  -255,  -297,  -298,  -299,  -300,  -301,
  -302,  -303,  -304,  -305,  -692,  -308,  -312,  -718,  -682,  -327,
  -407,  -719,  -719,   -61,   -61,  -704,  -719,  -719,  -719,  -348,
  -349,  -351,  -544,  -545,  -546,  -547,  -568,  -550,  -551,  -570,
  -572,  -555,  -560,  -564,  -566,  -582,  -583,  -584,  -568,  -586,
  -588,  -589,  -590,  -591,  -690,  -593,  -594,  -691,  -596,  -597,
  -598,  -599,  -600,  -601,  -602,  -603,  -608,  -609,  -719,    -2,
  -705,  -714,  -715,  -716,    -6,  -719,  -719,  -719,  -719,  -719,
    -8,    -3,   -18,  -719,  -128,  -129,  -130,  -131,  -132,  -133,
  -134,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,
  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,
  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,
  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,  -206,
  -207,  -208,   -23,  -135,   -12,  -719,  -719,  -719,  -719,  -719,
  -719,  -719,  -273,  -719,  -719,  -702,  -703,  -719,  -719,  -706,
  -707,   -56,  -719,  -604,  -605,  -719,  -306,  -719,  -719,  -243,
  -719,   -12,  -719,   -57,  -220,  -221,  -719,  -719,  -719,  -719,
  -719,  -719,  -719,  -719,  -719,  -719,  -719,  -719,  -719,  -719,
  -719,  -719,  -719,  -719,  -719,  -719,  -256,  -257,  -258,  -259,
  -719,   -63,   -64,  -719,  -128,  -129,  -168,  -169,  -170,  -186,
  -191,  -198,  -201,  -604,  -605,  -680,  -719,  -416,  -418,  -719,
  -700,  -701,   -74,  -273,  -719,  -326,  -422,  -431,  -433,   -80,
  -428,   -81,  -706,   -82,  -262,  -278,  -287,  -287,  -282,  -719,
  -288,  -719,  -568,  -684,  -719,  -719,   -83,   -84,  -704,   -13,
  -719,   -16,  -719,   -87,   -12,  -706,  -719,   -90,   -93,   -12,
  -105,  -106,  -719,  -719,  -113,  -319,  -322,  -706,  -719,  -616,
  -616,  -346,  -347,  -350,  -429,  -719,   -95,  -719,  -101,  -316,
  -719,  -222,  -223,  -587,  -231,  -232,  -719,  -244,  -719,  -615,
   -12,  -638,  -638,  -615,   -12,   -12,  -310,  -706,  -263,  -711,
  -711,  -719,  -719,  -711,  -719,  -328,  -329,  -638,   -60,   -59,
  -719,  -719,  -719,   -12,   -12,  -704,  -719,  -705,  -114,  -115,
  -719,  -719,  -122,  -719,  -361,  -362,  -123,  -124,  -719,  -126,
  -719,  -306,  -612,  -719,  -342,  -548,  -719,  -719,  -719,  -719,
  -719,  -719,  -719,  -719,  1201,    -5,  -717,   -24,   -25,   -26,
   -27,   -28,  -719,  -719,   -20,   -21,   -22,  -136,  -719,   -31,
   -34,  -293,  -719,  -719,  -292,   -32,  -719,   -41,  -719,  -306,
   -49,   -51,  -209,  -267,  -288,   -39,   -40,   -53,   -54,   -37,
   -38,   -42,  -210,  -267,  -706,  -274,  -287,  -287,  -693,  -694,
  -283,  -426,  -695,  -696,  -694,  -693,  -283,  -425,  -427,  -695,
  -696,   -48,  -217,   -55,  -706,  -325,  -719,  -719,  -719,  -273,
  -316,  -719,  -719,  -719,  -719,  -218,  -219,  -224,  -225,  -226,
  -227,  -228,  -229,  -233,  -234,  -235,  -236,  -238,  -239,  -240,
  -241,  -242,  -245,  -246,  -247,  -248,  -706,  -260,   -65,  -706,
  -437,  -283,  -693,  -694,   -71,   -75,  -639,  -706,  -706,  -284,
  -435,  -437,  -706,  -321,  -279,  -719,  -280,  -719,  -285,  -719,
  -289,  -719,  -687,  -689,   -11,  -705,   -15,   -17,  -706,   -86,
  -314,  -102,   -91,  -719,  -706,  -273,  -719,  -719,  -112,  -719,
  -615,  -587,  -719,   -98,  -103,  -719,  -719,  -719,  -719,  -261,
  -249,  -719,  -719,  -536,  -719,  -374,  -375,  -706,  -706,  -679,
  -679,  -621,  -623,  -623,  -623,  -637,  -639,  -640,  -641,  -642,
  -643,  -644,  -645,  -646,  -647,  -719,  -649,  -651,  -653,  -658,
  -660,  -661,  -664,  -669,  -671,  -672,  -674,  -675,  -676,  -719,
  -719,  -719,  -719,  -719,  -706,  -719,  -264,  -713,  -712,  -266,
  -713,  -317,  -318,  -683,  -408,  -638,  -411,   -12,  -352,  -353,
   -12,  -719,  -719,  -719,  -719,  -719,  -719,  -273,  -719,  -719,
  -121,   -61,  -123,  -124,  -125,  -719,  -719,  -273,  -338,  -610,
  -719,   -12,  -549,  -569,  -574,  -719,  -576,  -552,  -571,  -719,
  -573,  -554,  -719,  -557,  -719,  -559,  -562,  -719,  -563,  -719,
  -585,    -9,   -19,  -719,   -29,  -719,  -296,  -719,  -719,  -273,
  -719,  -719,  -719,  -719,  -430,  -719,  -275,  -277,  -719,  -719,
   -76,  -272,  -423,  -719,  -719,   -78,  -424,  -324,  -708,  -693,
  -694,  -693,  -694,  -706,   -58,  -456,  -458,  -460,  -463,  -517,
  -470,  -473,  -476,  -510,  -515,  -516,  -719,  -719,  -520,  -521,
  -522,  -523,  -524,  -525,  -526,  -527,  -528,  -407,  -530,  -719,
  -719,  -534,  -719,  -719,  -681,  -719,  -438,   -70,  -419,  -435,
  -269,  -270,  -719,  -397,  -719,  -320,  -287,  -286,  -290,  -719,
  -685,  -686,  -719,   -14,   -88,  -719,   -94,  -100,  -706,  -108,
  -110,  -271,  -109,  -111,  -719,   -96,  -719,  -216,  -230,  -706,
  -251,  -718,  -718,  -344,  -613,  -614,  -719,  -619,  -620,  -719,
  -719,  -630,  -719,  -633,  -719,  -635,  -719,  -363,  -719,  -365,
  -367,  -370,  -373,  -706,  -652,  -662,  -663,  -673,  -677,  -617,
  -253,  -345,  -309,  -311,  -313,  -711,  -719,  -706,  -718,  -354,
  -718,   -62,  -355,  -356,  -332,  -333,  -719,  -719,  -443,  -335,
  -719,  -706,  -117,  -119,  -118,  -120,   -12,  -123,  -124,  -127,
  -706,   -12,  -719,  -340,  -719,  -575,  -578,  -579,  -580,  -581,
   -12,  -553,  -556,  -558,  -561,  -565,  -567,  -137,   -33,  -294,
  -719,  -706,  -693,  -694,  -694,  -693,   -50,  -268,  -719,  -709,
  -287,   -44,  -212,   -45,  -213,   -77,   -46,  -215,   -47,  -214,
   -79,  -719,  -719,  -719,  -719,  -430,  -719,  -719,  -461,  -462,
  -719,  -719,  -719,  -719,  -472,  -719,  -475,  -719,  -719,  -513,
  -514,  -518,  -519,  -529,  -531,  -124,  -532,  -719,   -66,  -417,
  -397,  -421,  -420,  -719,  -432,  -398,  -706,   -12,  -434,  -281,
  -291,  -688,   -92,  -107,  -104,  -323,  -719,  -718,  -359,   -12,
  -537,  -718,  -538,  -539,  -679,  -659,  -664,  -678,  -622,  -623,
  -623,  -650,  -623,  -623,  -670,  -623,  -647,  -665,  -706,  -719,
  -719,  -372,  -648,  -719,  -265,  -409,  -412,  -414,  -401,  -719,
  -719,  -357,  -719,  -719,  -334,  -336,  -719,  -719,   -12,  -116,
  -719,  -430,  -719,  -719,   -12,  -343,  -719,  -295,  -430,   -43,
  -211,  -276,  -719,  -457,  -459,  -466,  -469,  -478,  -706,  -706,
  -479,  -485,  -719,  -490,  -496,  -498,  -499,  -502,  -503,  -568,
  -506,  -508,  -509,  -706,  -706,  -533,  -706,  -706,  -568,  -710,
  -706,  -511,  -512,  -250,   -12,   -72,  -679,  -679,  -379,  -381,
  -381,  -381,  -396,  -719,  -706,  -647,  -655,  -656,  -667,  -436,
  -252,   -10,   -12,  -543,  -360,  -719,  -719,  -541,  -618,  -719,
  -626,  -719,  -628,  -719,  -631,  -719,  -634,  -636,  -364,  -366,
  -368,  -371,  -254,   -12,   -12,  -719,  -410,  -330,  -719,  -331,
  -719,  -448,  -451,  -454,  -455,  -290,  -718,  -337,  -339,  -611,
  -719,  -577,  -464,  -465,  -494,  -480,  -483,  -486,  -488,  -719,
  -497,  -501,  -719,  -505,  -507,  -467,  -468,  -471,  -474,  -719,
  -477,  -439,  -719,  -377,  -378,  -387,  -389,  -719,  -392,  -719,
  -394,  -399,  -719,  -719,  -654,  -719,  -542,   -12,  -604,  -605,
  -719,  -719,  -306,  -540,  -623,  -623,  -623,  -623,  -719,  -719,
  -719,  -719,  -706,  -403,  -405,  -406,   -12,  -444,  -719,  -719,
  -452,  -440,  -441,  -442,  -341,  -487,  -481,  -719,  -719,  -491,
  -492,  -495,  -500,  -504,  -679,  -657,  -380,  -381,  -381,  -381,
  -381,  -668,  -381,  -400,  -666,  -719,  -316,  -536,  -273,  -719,
  -719,  -316,  -719,  -624,  -627,  -629,  -632,  -369,  -413,  -415,
  -402,  -719,  -718,   -12,  -449,  -450,  -453,  -719,  -484,  -489,
  -719,  -376,  -719,  -384,  -719,  -386,  -719,  -390,  -719,  -393,
  -395,  -315,  -697,  -535,  -706,  -693,  -694,  -697,  -315,  -623,
  -404,  -358,  -718,  -482,  -493,  -381,  -381,  -381,  -381,  -430,
  -625,  -445,  -446,  -447,  -719,  -382,  -385,  -388,  -391,  -381,
  -383 ]

clist = [
'42,368,271,378,378,42,406,378,288,454,272,761,296,300,807,940,327,223',
'413,376,306,306,306,526,284,346,290,434,435,326,130,305,305,305,383',
'384,42,331,331,375,137,137,625,606,609,353,634,613,515,460,466,740,674',
'767,768,369,137,378,378,378,378,914,617,620,120,916,42,783,325,907,921',
'132,213,140,140,364,389,284,284,939,517,897,1000,924,876,323,380,381',
'777,1029,385,289,395,732,584,584,292,299,301,41,737,441,737,1031,41',
'1131,441,123,943,2,584,124,441,231,564,511,119,1015,602,603,42,1055',
'1011,283,743,694,881,882,1105,42,1103,42,518,451,740,41,330,330,725',
'471,417,418,419,420,402,404,307,307,307,734,447,448,567,600,359,363',
'339,339,652,654,473,474,212,968,983,41,986,430,616,980,980,575,575,526',
'980,388,283,283,1003,123,423,370,373,484,801,553,273,575,386,723,1131',
'303,316,317,729,339,339,339,663,1119,568,740,356,433,433,371,461,428',
'343,343,1120,969,984,728,42,285,987,389,509,41,389,305,6,372,340,340',
'415,6,41,393,41,477,531,446,326,638,450,365,994,604,422,42,367,821,1105',
'980,1180,343,343,343,954,737,737,641,1030,1002,470,1158,1159,1029,928',
'1127,1004,340,340,340,693,1102,1120,1120,614,1147,290,935,771,773,775',
'796,1033,1034,806,777,306,819,510,931,1082,1044,366,520,306,865,305',
'305,521,890,1111,1183,874,991,992,305,893,460,466,1040,429,440,1120',
'1191,946,1184,440,41,378,542,388,326,440,388,42,296,326,1153,42,921',
'554,300,331,42,924,546,748,1041,1043,640,339,508,963,339,41,964,6,870',
'551,537,903,331,584,556,871,421,873,6,1112,875,538,878,1121,980,42,544',
'364,1122,42,42,911,1124,886,1181,1068,916,751,323,1,921,622,623,323',
'535,405,746,751,42,42,407,408,409,343,628,755,343,410,411,412,824,825',
'621,1018,648,650,653,653,1156,340,830,797,340,307,949,822,919,915,1125',
'811,,307,,951,41,,,123,41,820,575,,330,41,23,,534,777,777,23,,855,670',
',958,,860,,681,,,330,339,,686,,239,899,519,751,137,841,,,41,461,522',
'751,41,41,23,339,966,921,934,,,,351,352,,354,355,305,357,1073,1074,41',
'41,716,740,662,,140,123,1192,,948,759,681,23,460,466,624,343,379,379',
',584,379,584,,,,,470,967,967,,967,340,,,343,990,985,,554,,,,,680,,461',
',554,,685,340,42,737,,,461,,,536,331,305,,,,,23,,,331,441,379,379,379',
'379,23,,23,,,441,441,,899,228,441,441,,,1193,,912,952,,,727,470,452',
'1065,1066,902,1067,1173,472,1042,,470,851,853,816,,,856,858,358,,,,777',
'777,,,,,,1161,,798,461,,800,810,,,42,1061,461,42,1020,1022,,1024,1026',
'305,1027,,1005,,,,,41,920,305,922,,736,,42,330,23,833,443,833,379,379',
',453,330,,461,,,453,379,379,,,470,339,,,42,883,470,305,239,23,339,42',
'485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501',
'502,503,504,505,506,137,913,1087,892,507,,271,1113,470,789,,716,716',
'1050,888,891,,,,343,379,41,,,41,1106,795,1107,343,554,802,837,,140,',
'340,,,441,681,904,,686,,340,41,,,,823,331,,,1071,23,433,967,584,23,378',
'137,331,,23,440,959,1001,,,41,,,,,440,440,41,1189,,440,440,,,,,,,,,',
'559,,560,1101,23,850,,1006,23,23,,1143,1144,1145,1146,,,,,,,,,1005,950',
'1005,379,23,23,,,42,,,,,42,,956,,,,,,,42,,379,,,,917,953,,917,472,1013',
'452,,330,1017,,,,,,,,,,330,,,,,,,,,339,,,716,,,716,716,,716,378,339',
',,716,716,716,1190,997,549,1094,,,838,,,1009,,,,846,1005,,42,,1062,',
',1014,,,,,,1069,42,453,453,453,605,757,41,343,,,,41,,,,,1174,,343,,41',
',,340,,,,,,,440,1128,1046,1129,340,,352,716,32,42,,,,32,,42,,,1038,',
',,,,,23,751,998,,1006,32,716,1006,,1006,,1006,,716,,32,32,32,,32,453',
',,758,,,379,760,,,42,,41,,,,675,,,,,1086,284,,41,,,,42,32,,,1089,,32',
'32,,,32,,,,1100,1185,,,790,,,42,42,,,852,854,,378,378,857,859,,,23,41',
',23,,,722,41,,,,1049,1006,716,1006,997,1006,997,1006,997,,32,,,23,,32',
'32,32,32,32,,32,,1137,,,284,,,,42,,1139,1006,,,41,23,,,453,,1152,712',
'23,847,,,283,42,453,453,,716,41,453,453,,1088,,716,716,,,,461,1154,1155',
'339,,,,,,,41,41,,339,,305,,,,,917,,,998,1182,998,997,998,997,,997,42',
'997,,,716,,,716,32,32,32,,32,32,470,32,32,,,470,,32,32,32,343,,,997',
',283,,,,41,343,32,17,,,,340,17,,,,,,,,339,340,,41,,960,,,,1076,1078',
'1080,,708,,,,,852,854,859,857,,17,,,,,,475,998,32,998,,998,,998,675',
'32,32,,,,23,675,877,,32,23,379,41,,343,17,,,,23,,,,,998,,,32,,,340,32',
',,,,32,453,,,,,,,,,,,,,453,453,453,453,675,,,,,,,,,,523,,,32,,17,,32',
'32,,,,993,,17,,17,960,712,712,,,23,539,,32,32,32,,,,1010,,,23,1163,1165',
'1167,1169,938,1170,,,,,,32,,,,,,,675,,,,,1032,,,,675,,,,,379,,,,,,23',
',,,,,23,,,,675,,,,453,,,,,,1195,1196,1197,1198,,,17,,17,,,,,17,1200',
',,,675,17,,,,,,,23,,,32,,,,17,,,,,,,708,708,,,23,938,,,,,,,,,,,,,,,',
',,,,23,23,,,,,,,,,,,,,687,,,,,,32,712,,,712,712,,712,,710,32,,712,712',
'712,,,,,,,,,,,,32,17,,724,,17,,,23,,17,730,731,,,,735,,,,,675,675,,675',
'877,,23,,379,379,,744,,,,,,747,,,17,938,,,17,17,,,,,,,,712,,32,,,32',
',764,765,,17,17,32,,,,,,,,23,,32,,712,,32,,,,,712,,,,,708,,,708,708',
',708,,793,,,708,708,708,32,,,32,32,,18,32,,,,18,,32,32,,,,32,32,,,,',
'310,310,310,,232,,,,,,,,1150,,232,232,232,,18,332,332,,,,,,,,,,,,,,',
'310,374,,,712,,708,,,923,,925,,18,,,,,232,232,,,232,390,400,400,,,,',
'708,,,,,,,708,,,,,710,710,,,,,,675,,,,17,,712,,,,,,,712,712,,,,18,,',
',,232,232,232,232,18,,18,,,,,,,,,,,,905,,32,,,,,32,32,,,,712,,,712,32',
',,,,,,,932,,,,,708,,,,,32,,,,,,,,,999,,17,,,17,,,,,,,,,,431,444,,,,',
',310,,,,17,,18,232,438,390,232,232,390,438,232,708,,,32,438,232,232',
'708,708,,,,,17,,32,17,,18,,17,,,,,,17,17,,965,,17,17,710,,,710,710,',
'710,,,,,710,710,710,708,32,,708,,,,32,,310,310,,,32,,,232,,310,,,,,232',
'232,528,,530,,,532,533,232,,,,,,,1095,,1096,1028,1097,,,,,,,18,,,32',
'18,,,,332,18,,,,,,710,,,,,,32,,,,,,332,,,,,1052,1053,,,,,,710,18,,32',
'32,18,18,710,1130,,1132,,,,,1070,,,,,,,,232,18,18,,,17,,,,,17,,,,,,',
',,17,,232,,,,,,,,,,,,,32,,666,17,,,,,,,,,,,,,1179,,,32,,32,32,,,,,,',
',,,710,,,,1186,,1187,,1188,,,,,,,,,310,,32,17,,,,,,,,,,,232,17,,32,',
'1199,,,,,,13,,,,,13,,,,710,,,,,,,710,710,,,,738,,374,,741,715,,,17,',
',,,,17,13,,,,,310,,,,18,,,,,,,,332,,232,710,,,710,,,332,,,,13,,,,,232',
',,,17,394,29,,,,,29,,784,,,,,,,,,17,,,,,,29,,,,738,,,374,,,29,29,29',
',29,17,17,,,,,13,,444,310,,,,18,,13,18,13,,310,,,,232,,,,,,29,714,,',
'232,29,29,,18,29,,,,,,,,,,,839,,310,,,17,,,,738,374,,18,,,438,232,,',
'18,,,,,17,438,438,,,,438,438,,,29,,,,,29,29,29,29,29,,29,,,,,,13,,436',
'445,,,449,436,,,,,,436,,,,,,,17,900,,,901,,,13,,,,,,,715,715,,,,,,332',
',,910,,,,,,,,332,,,,,,927,,,,,,,,,,,,,,,,,,,29,29,29,,29,29,,29,29,',
',,,29,29,29,,,,,,,,,,,,29,,13,,,,13,,18,,,13,,18,232,,,,957,,,,18,,',
',,,,,,,,,,,,,,,438,,13,,,29,13,13,714,714,,,29,29,,,,,,,,29,,,,13,13',
',,,,,,,,,,,,29,,,,29,,,,,29,18,,715,,,715,715,,715,,,,18,715,715,715',
',,,,,,,,,,,,,,29,,,,29,29,1045,,,,,,,,713,232,,,,,374,18,29,29,29,,',
'18,,,,,,,19,,,,,19,,,,29,,,,,,,711,715,,,,,,,,,,,,,,,,18,,,19,334,334',
',,715,,,,1084,,,715,,,18,,,709,1090,714,,,714,714,,714,,13,,19,714,714',
'714,,,18,18,,,392,401,401,,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',19,,1134,,,,18,,,19,715,19,,,,714,,,,,,29,,,,18,13,232,232,13,,29,',
',,,,,,714,,,,310,,,714,29,,,13,,,,,,,232,,,,715,,,,,,,715,715,,,18,',
'13,,,436,,,,13,713,713,,,,436,436,,,,436,436,19,,439,392,,,392,439,',
'29,,,29,439,715,,,715,,29,,,,,711,711,,19,,29,,,,29,714,,,,,,,,,,,,',
',,,,,,,,,,29,,,29,29,709,709,29,,,,,,29,29,,,,29,29,,,,,,,,,714,,,,',
',,714,714,,,,,,,,,,,,,19,,,,19,,,,334,19,,,,,,,,,,,,,,,,13,714,334,',
'714,13,,,,,,,,,13,19,,,713,19,19,713,713,,713,,,,,713,713,713,436,,',
',,,19,19,,,,,,,,,,,,,,,711,,,711,711,,711,,,,,711,711,711,,,,,,,,,,29',
',,,13,29,29,,,,,,,,29,709,13,,709,709,713,709,,,,,709,709,709,,,,29',
',,,,,,,,,,,713,,,,,,,713,,,,13,711,,,,,13,,,,,,,,,,,,,,,,,,,711,29,',
',,,,711,,,,,,29,709,,,,,,,13,,,,,,,,,,,,19,,,,,709,13,,334,,1093,,709',
'29,,,,334,,29,713,,,,,29,,13,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,711,,,,,',
',,,29,,,,,,713,,,,,,,713,713,,13,19,29,,19,,,,,,,,,709,,,,,,13,,,,29',
'29,19,711,,,829,,,,711,711,,,713,,,713,,,,,,,,,19,,,439,,,,19,,,,,,439',
'439,709,,13,439,439,,,709,709,711,,,711,29,,,,,,,,,,,,,,,,,,,29,,29',
'29,,,,,,,,,,,,709,,,709,,,,,,,,,,,,,,29,334,,,,,,,,,,,334,,,29,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,19,,,,,,,',
',19,,,,,,,,,,,,,,,,,,439,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,19,,,,,,,,,,,,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,',
'19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,,,,,401,,,,,,19',
',,,1092,,,,,,,,,,,,,,,,,19,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,401,,,,19,,,,,,,,,,,,,,,,,,,19,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,19' ]
        racc_goto_table = arr = ::Array.new(3733, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'70,84,44,26,26,70,188,26,149,32,42,11,88,88,110,108,66,34,188,106,85',
'85,85,91,70,67,34,23,23,10,8,50,50,50,40,40,70,70,70,104,73,73,109,86',
'86,78,71,86,55,53,53,226,33,131,131,85,73,26,26,26,26,127,107,107,6',
'190,70,123,63,12,218,16,16,75,75,114,70,70,70,140,32,138,136,222,177',
'62,18,18,122,121,18,48,20,56,217,217,54,54,54,69,92,19,92,124,69,223',
'19,113,12,2,217,5,19,21,9,53,4,195,9,9,70,182,13,69,15,38,192,192,143',
'70,142,70,89,29,226,69,69,69,152,29,18,18,18,18,72,72,87,87,87,152,26',
'26,148,148,80,80,45,45,202,202,26,26,17,166,166,69,166,24,148,190,190',
'212,212,91,190,69,69,69,140,113,27,87,87,39,41,68,47,212,4,49,223,61',
'61,61,58,45,45,45,76,183,89,226,82,85,85,83,88,10,81,81,182,168,168',
'90,70,102,168,70,26,69,70,50,7,103,46,46,5,7,69,111,69,34,188,20,10',
'112,20,115,138,116,2,70,117,118,143,190,142,81,81,81,119,92,92,120,125',
'129,73,183,183,121,123,136,134,46,46,46,32,141,182,182,144,124,34,145',
'215,215,215,147,150,151,109,122,85,71,153,122,140,168,7,155,85,33,50',
'50,156,159,160,183,33,192,192,50,56,53,53,161,21,21,182,162,163,182',
'21,69,26,67,69,10,21,69,70,88,10,164,70,218,66,88,70,70,222,34,32,165',
'167,26,45,48,170,45,69,172,7,173,78,8,33,70,217,34,174,7,178,7,12,179',
'63,180,185,190,70,63,114,186,70,70,194,127,71,108,177,190,53,62,1,218',
'10,10,62,6,198,68,53,70,70,199,200,201,81,34,68,81,204,205,206,9,207',
'18,131,203,203,203,203,166,46,208,148,46,87,33,211,216,220,221,32,,87',
',33,69,,,113,69,32,212,,69,69,37,,4,122,122,37,,55,34,,33,,55,,88,,',
'69,45,,88,,37,91,61,53,73,32,,,69,88,61,53,69,69,37,45,33,218,86,,,',
'37,37,,37,37,50,37,131,131,69,69,70,226,16,,75,113,12,,107,26,88,37',
'53,53,4,81,37,37,,217,37,217,,,,,73,38,38,,38,46,,,81,38,71,,66,,,,',
'54,,88,,66,,54,46,70,92,,,88,,,7,70,50,,,,,37,,,70,19,37,37,37,37,37',
',37,,,19,19,,91,36,19,19,,,110,,23,9,,,54,73,77,33,33,68,33,11,77,38',
',73,29,29,40,,,29,29,36,,,,122,122,,,,,,131,,10,88,,10,85,,,70,38,88',
'70,215,215,,215,215,50,215,,217,,,,,69,137,50,137,,87,,70,69,37,203',
'37,203,37,37,,37,69,,88,,,37,37,37,,,73,45,,,70,106,73,50,37,37,45,70',
'37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,73',
'84,107,104,37,,44,109,73,113,,70,70,9,42,149,,,,81,37,69,,,69,107,87',
'107,81,66,113,16,,75,,46,,,19,88,66,,88,,46,69,,,,113,70,,,9,37,85,38',
'217,37,26,73,70,,37,21,29,137,,,69,,,,,21,21,69,33,,21,21,,,,,,,,,,37',
',37,9,37,87,,219,37,37,,215,215,215,215,,,,,,,,,217,10,217,37,37,37',
',,70,,,,,70,,10,,,,,,,70,,37,,,,132,18,,132,77,84,77,,69,84,,,,,,,,',
',69,,,,,,,,,45,,,70,,,70,70,,70,26,45,,,70,70,70,215,126,36,137,,,7',
',,10,,,,7,217,,70,,188,,,10,,,,,,188,70,37,37,37,36,77,69,81,,,,69,',
',,,32,,81,,69,,,46,,,,,,,21,137,10,137,46,,37,70,60,70,,,,60,,70,,,18',
',,,,,,37,53,132,,219,60,70,219,,219,,219,,70,,60,60,60,,60,37,,,37,',
',37,37,,,70,,69,,,,36,,,,,10,70,,69,,,,70,60,,,70,,60,60,,,60,,,,10',
'137,,,37,,,70,70,,,77,77,,26,26,77,77,,,37,69,,37,,,36,69,,,,113,219',
'70,219,126,219,126,219,126,,60,,,37,,60,60,60,60,60,,60,,10,,,70,,,',
'70,,34,219,,,69,37,,,37,,10,98,37,37,,,69,70,37,37,,70,69,37,37,,69',
',70,70,,,,88,18,18,45,,,,,,,69,69,,45,,50,,,,,132,,,132,10,132,126,132',
'126,,126,70,126,,,70,,,70,60,60,60,,60,60,73,60,60,,,73,,60,60,60,81',
',,126,,69,,,,69,81,60,30,,,,46,30,,,,,,,,45,46,,69,,77,,,,133,133,133',
',94,,,,,77,77,77,77,,30,,,,,,64,132,60,132,,132,,132,36,60,60,,,,37',
'36,36,,60,37,37,69,,81,30,,,,37,,,,,132,,,60,,,46,60,,,,,60,37,,,,,',
',,,,,,,37,37,37,37,36,,,,,,,,,,64,,,60,,30,,60,60,,,,37,,30,,30,77,98',
'98,,,37,64,,60,60,60,,,,37,,,37,133,133,133,133,36,133,,,,,,60,,,,,',
',36,,,,,37,,,,36,,,,,37,,,,,,37,,,,,,37,,,,36,,,,37,,,,,,133,133,133',
'133,,,30,,30,,,,,30,133,,,,36,30,,,,,,,37,,,60,,,,30,,,,,,,94,94,,,37',
'36,,,,,,,,,,,,,,,,,,,,37,37,,,,,,,,,,,,,64,,,,,,60,98,,,98,98,,98,,96',
'60,,98,98,98,,,,,,,,,,,,60,30,,64,,30,,,37,,30,64,64,,,,64,,,,,36,36',
',36,36,,37,,37,37,,64,,,,,,64,,,30,36,,,30,30,,,,,,,,98,,60,,,60,,64',
'64,,30,30,60,,,,,,,,37,,60,,98,,60,,,,,98,,,,,94,,,94,94,,94,,64,,,94',
'94,94,60,,,60,60,,31,60,,,,31,,60,60,,,,60,60,,,,,28,28,28,,31,,,,,',
',,36,,31,31,31,,31,31,31,,,,,,,,,,,,,,,28,28,,,98,,94,,,135,,135,,31',
',,,,31,31,,,31,31,31,31,,,,,94,,,,,,,94,,,,,96,96,,,,,,36,,,,30,,98',
',,,,,,98,98,,,,31,,,,,31,31,31,31,31,,31,,,,,,,,,,,,64,,60,,,,,60,60',
',,,98,,,98,60,,,,,,,,64,,,,,94,,,,,60,,,,,,,,,135,,30,,,30,,,,,,,,,',
'28,28,,,,,,28,,,,30,,31,31,31,31,31,31,31,31,31,94,,,60,31,31,31,94',
'94,,,,,30,,60,30,,31,,30,,,,,,30,30,,64,,30,30,96,,,96,96,,96,,,,,96',
'96,96,94,60,,94,,,,60,,28,28,,,60,,,31,,28,,,,,31,31,28,,28,,,28,28',
'31,,,,,,,135,,135,64,135,,,,,,,31,,,60,31,,,,31,31,,,,,,96,,,,,,60,',
',,,,31,,,,,64,64,,,,,,96,31,,60,60,31,31,96,135,,135,,,,,64,,,,,,,,31',
'31,31,,,30,,,,,30,,,,,,,,,30,,31,,,,,,,,,,,,,60,,28,30,,,,,,,,,,,,,135',
',,60,,60,60,,,,,,,,,,96,,,,135,,135,,135,,,,,,,,,28,,60,30,,,,,,,,,',
',31,30,,60,,135,,,,,,22,,,,,22,,,,96,,,,,,,96,96,,,,28,,28,,28,101,',
',30,,,,,,30,22,,,,,28,,,,31,,,,,,,,31,,31,96,,,96,,,31,,,,22,,,,,31',
',,,30,22,57,,,,,57,,28,,,,,,,,,30,,,,,,57,,,,28,,,28,,,57,57,57,,57',
'30,30,,,,,22,,28,28,,,,31,,22,31,22,,28,,,,31,,,,,,57,100,,,31,57,57',
',31,57,,,,,,,,,,,28,,28,,,30,,,,28,28,,31,,,31,31,,,31,,,,,30,31,31',
',,,31,31,,,57,,,,,57,57,57,57,57,,57,,,,,,22,,22,22,,,22,22,,,,,,22',
',,,,,,30,28,,,28,,,22,,,,,,,101,101,,,,,,31,,,28,,,,,,,,31,,,,,,28,',
',,,,,,,,,,,,,,,,,57,57,57,,57,57,,57,57,,,,,57,57,57,,,,,,,,,,,,57,',
'22,,,,22,,31,,,22,,31,31,,,,28,,,,31,,,,,,,,,,,,,,,,,,31,,22,,,57,22',
'22,100,100,,,57,57,,,,,,,,57,,,,22,22,,,,,,,,,,,,,57,,,,57,,,,,57,31',
',101,,,101,101,,101,,,,31,101,101,101,,,,,,,,,,,,,,,57,,,,57,57,28,',
',,,,,,99,31,,,,,28,31,57,57,57,,,31,,,,,,,35,,,,,35,,,,57,,,,,,,97,101',
',,,,,,,,,,,,,,,31,,,35,35,35,,,101,,,,31,,,101,,,31,,,95,31,100,,,100',
'100,,100,,22,,35,100,100,100,,,31,31,,,35,35,35,,,,,,,57,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,35,,31,,,,31,,,35,101,35,,,,100,,,,,,57,,,,31',
'22,31,31,22,,57,,,,,,,,100,,,,28,,,100,57,,,22,,,,,,,31,,,,101,,,,,',
',101,101,,,31,,22,,,22,,,,22,99,99,,,,22,22,,,,22,22,35,,35,35,,,35',
'35,,57,,,57,35,101,,,101,,57,,,,,97,97,,35,,57,,,,57,100,,,,,,,,,,,',
',,,,,,,,,,,57,,,57,57,95,95,57,,,,,,57,57,,,,57,57,,,,,,,,,100,,,,,',
',100,100,,,,,,,,,,,,,35,,,,35,,,,35,35,,,,,,,,,,,,,,,,22,100,35,,100',
'22,,,,,,,,,22,35,,,99,35,35,99,99,,99,,,,,99,99,99,22,,,,,,35,35,,,',
',,,,,,,,,,,97,,,97,97,,97,,,,,97,97,97,,,,,,,,,,57,,,,22,57,57,,,,,',
',,57,95,22,,95,95,99,95,,,,,95,95,95,,,,57,,,,,,,,,,,,99,,,,,,,99,,',
',22,97,,,,,22,,,,,,,,,,,,,,,,,,,97,57,,,,,,97,,,,,,57,95,,,,,,,22,,',
',,,,,,,,,35,,,,,95,22,,35,,22,,95,57,,,,35,,57,99,,,,,57,,22,22,,,,',
',,,,,,,,,,,,,,,,,,,,,,,97,,,,,,,,,57,,,,,,99,,,,,,,99,99,,22,35,57,',
'35,,,,,,,,,95,,,,,,22,,,,57,57,35,97,,,35,,,,97,97,,,99,,,99,,,,,,,',
',35,,,35,,,,35,,,,,,35,35,95,,22,35,35,,,95,95,97,,,97,57,,,,,,,,,,',
',,,,,,,,57,,57,57,,,,,,,,,,,,95,,,95,,,,,,,,,,,,,,57,35,,,,,,,,,,,35',
',,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,',
'35,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',35,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,35',
',,,,,35,,,,35,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,35,,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3733, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   374,   109,   nil,   113,   106,    61,   222,    23,  -246,
    -7,  -552,  -692,  -785,   nil,  -411,    63,   153,    15,  -115,
    16,    91,  2108,  -188,   -48,   nil,   -68,    48,  1604,   -88,
  1189,  1618,  -213,  -402,    -1,  2579,   546,   429,  -359,   -60,
   -39,  -437,   -14,   nil,   -22,   119,   187,   162,    64,  -319,
    -1,   nil,   nil,  -174,    67,  -244,  -427,  2185,  -320,   nil,
   947,   159,    49,    32,  1002,   nil,   -21,   -13,  -162,    99,
     0,  -352,    67,    32,   nil,    65,  -229,   359,    -1,   nil,
   102,   171,   153,   138,   -66,   -12,  -326,   114,   -17,  -161,
  -298,  -284,  -425,   nil,   731,  2149,  1007,  2111,   616,  2075,
  1768,  1650,   191,   155,   -30,   nil,   -51,  -318,  -783,  -344,
  -610,   153,  -167,   104,    22,   172,  -127,   176,  -395,  -573,
  -151,  -840,  -497,  -518,  -827,  -675,   -14,  -705,   nil,  -641,
   nil,  -516,    70,   212,  -634,   908,  -814,  -135,  -652,   nil,
  -718,  -768,  -905,  -907,  -107,  -523,   nil,  -337,  -209,   -17,
  -658,  -658,  -372,    -3,   nil,    -8,    -4,   nil,   nil,  -431,
  -750,  -641,  -873,  -498,  -784,  -613,  -707,  -612,  -659,   nil,
  -528,   nil,  -526,  -356,  -349,   nil,   nil,  -617,  -348,  -346,
  -345,   nil,  -849,  -860,   nil,  -702,  -697,   nil,   -80,   nil,
  -701,   nil,  -580,   nil,  -396,  -794,   nil,   nil,   296,   296,
   296,   296,  -251,    -8,   300,   300,   300,  -249,  -241,   nil,
   nil,  -229,  -190,   nil,   nil,  -298,  -359,  -267,  -700,  -104,
  -354,  -659,  -689,  -972,   nil,   nil,  -476 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   387,   321,   nil,   nil,
   563,   nil,   941,   nil,   318,   319,   nil,   nil,   nil,    11,
    12,    20,   237,   nil,   nil,    14,    15,   nil,    16,   437,
   238,   350,   nil,   nil,   636,   236,   476,   304,  1054,   nil,
   nil,   nil,   nil,   382,   139,    52,    53,   nil,   nil,   nil,
    25,    26,    27,   754,   nil,   nil,   nil,   338,   nil,    28,
   335,   455,    35,   nil,   nil,    37,    40,    39,   nil,   233,
   234,   399,   nil,   463,   138,    83,   nil,   442,    99,    49,
   550,    54,   270,   nil,   908,   456,   nil,   457,   468,   nil,
   682,   524,   308,   294,    55,    56,    57,    58,    59,    60,
    61,    62,    63,   nil,   295,    69,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   618,   360,   nil,   nil,   nil,   nil,   nil,
   nil,   779,   583,   nil,   780,   781,   570,   565,   566,  1126,
   996,   nil,   571,   nil,   nil,   572,   nil,   574,   nil,   895,
   nil,   nil,   nil,   581,   nil,   nil,   377,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   467,   nil,   nil,   733,   726,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   971,   nil,   695,
   704,   696,   697,   nil,   nil,   698,   699,   nil,   nil,   nil,
   nil,   970,   972,   nil,   974,   975,   976,   977,   nil,   981,
   592,   982,   703,   705,   nil,   nil,    82,    84,    85,   nil,
   nil,   nil,   nil,   643,   nil,   nil,   nil,   nil,   nil,    95,
    96,   nil,   918,   362,   569,   nil,   573,   926,   586,   588,
   589,  1007,   593,  1008,   596,   599,   313 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 148, :_reduce_none,
  2, 149, :_reduce_2,
  0, 150, :_reduce_3,
  1, 150, :_reduce_4,
  3, 150, :_reduce_5,
  2, 150, :_reduce_6,
  1, 152, :_reduce_none,
  2, 152, :_reduce_8,
  3, 155, :_reduce_9,
  4, 156, :_reduce_10,
  2, 157, :_reduce_11,
  0, 161, :_reduce_12,
  1, 161, :_reduce_13,
  3, 161, :_reduce_14,
  2, 161, :_reduce_15,
  1, 162, :_reduce_none,
  2, 162, :_reduce_17,
  0, 174, :_reduce_18,
  4, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  3, 154, :_reduce_22,
  2, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  3, 154, :_reduce_28,
  4, 154, :_reduce_29,
  1, 154, :_reduce_none,
  3, 154, :_reduce_31,
  3, 154, :_reduce_32,
  5, 154, :_reduce_33,
  3, 154, :_reduce_34,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  3, 172, :_reduce_37,
  3, 172, :_reduce_38,
  3, 172, :_reduce_39,
  3, 172, :_reduce_40,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  6, 166, :_reduce_43,
  5, 166, :_reduce_44,
  5, 166, :_reduce_45,
  5, 166, :_reduce_46,
  5, 166, :_reduce_47,
  3, 166, :_reduce_48,
  1, 176, :_reduce_none,
  3, 176, :_reduce_50,
  1, 176, :_reduce_none,
  1, 173, :_reduce_none,
  3, 173, :_reduce_53,
  3, 173, :_reduce_54,
  3, 173, :_reduce_55,
  2, 173, :_reduce_56,
  0, 186, :_reduce_57,
  4, 173, :_reduce_58,
  1, 173, :_reduce_none,
  1, 165, :_reduce_none,
  0, 190, :_reduce_61,
  3, 187, :_reduce_62,
  1, 189, :_reduce_63,
  2, 192, :_reduce_64,
  0, 196, :_reduce_65,
  5, 193, :_reduce_66,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 198, :_reduce_none,
  4, 198, :_reduce_70,
  0, 205, :_reduce_71,
  4, 202, :_reduce_72,
  1, 204, :_reduce_none,
  2, 197, :_reduce_74,
  3, 197, :_reduce_75,
  4, 197, :_reduce_76,
  5, 197, :_reduce_77,
  4, 197, :_reduce_78,
  5, 197, :_reduce_79,
  2, 197, :_reduce_80,
  2, 197, :_reduce_81,
  2, 197, :_reduce_82,
  2, 197, :_reduce_83,
  2, 197, :_reduce_84,
  1, 167, :_reduce_85,
  3, 167, :_reduce_86,
  1, 210, :_reduce_87,
  3, 210, :_reduce_88,
  1, 209, :_reduce_none,
  2, 209, :_reduce_90,
  3, 209, :_reduce_91,
  5, 209, :_reduce_92,
  2, 209, :_reduce_93,
  4, 209, :_reduce_94,
  2, 209, :_reduce_95,
  4, 209, :_reduce_96,
  1, 209, :_reduce_97,
  3, 209, :_reduce_98,
  1, 213, :_reduce_none,
  3, 213, :_reduce_100,
  2, 212, :_reduce_101,
  3, 212, :_reduce_102,
  1, 215, :_reduce_103,
  3, 215, :_reduce_104,
  1, 214, :_reduce_105,
  1, 214, :_reduce_106,
  4, 214, :_reduce_107,
  3, 214, :_reduce_108,
  3, 214, :_reduce_109,
  3, 214, :_reduce_110,
  3, 214, :_reduce_111,
  2, 214, :_reduce_112,
  1, 214, :_reduce_113,
  1, 169, :_reduce_114,
  1, 169, :_reduce_115,
  4, 169, :_reduce_116,
  3, 169, :_reduce_117,
  3, 169, :_reduce_118,
  3, 169, :_reduce_119,
  3, 169, :_reduce_120,
  2, 169, :_reduce_121,
  1, 169, :_reduce_122,
  1, 218, :_reduce_123,
  1, 218, :_reduce_none,
  2, 219, :_reduce_125,
  1, 219, :_reduce_126,
  3, 219, :_reduce_127,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 163, :_reduce_133,
  1, 163, :_reduce_none,
  1, 164, :_reduce_135,
  0, 223, :_reduce_136,
  4, 164, :_reduce_137,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  3, 184, :_reduce_209,
  3, 184, :_reduce_210,
  6, 184, :_reduce_211,
  5, 184, :_reduce_212,
  5, 184, :_reduce_213,
  5, 184, :_reduce_214,
  5, 184, :_reduce_215,
  4, 184, :_reduce_216,
  3, 184, :_reduce_217,
  3, 184, :_reduce_218,
  3, 184, :_reduce_219,
  2, 184, :_reduce_220,
  2, 184, :_reduce_221,
  2, 184, :_reduce_222,
  2, 184, :_reduce_223,
  3, 184, :_reduce_224,
  3, 184, :_reduce_225,
  3, 184, :_reduce_226,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  4, 184, :_reduce_230,
  2, 184, :_reduce_231,
  2, 184, :_reduce_232,
  3, 184, :_reduce_233,
  3, 184, :_reduce_234,
  3, 184, :_reduce_235,
  3, 184, :_reduce_236,
  1, 184, :_reduce_none,
  3, 184, :_reduce_238,
  3, 184, :_reduce_239,
  3, 184, :_reduce_240,
  3, 184, :_reduce_241,
  3, 184, :_reduce_242,
  2, 184, :_reduce_243,
  2, 184, :_reduce_244,
  3, 184, :_reduce_245,
  3, 184, :_reduce_246,
  3, 184, :_reduce_247,
  3, 184, :_reduce_248,
  3, 184, :_reduce_249,
  6, 184, :_reduce_250,
  4, 184, :_reduce_251,
  6, 184, :_reduce_252,
  4, 184, :_reduce_253,
  6, 184, :_reduce_254,
  1, 184, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  3, 226, :_reduce_260,
  3, 226, :_reduce_261,
  1, 175, :_reduce_none,
  1, 230, :_reduce_none,
  2, 230, :_reduce_none,
  4, 230, :_reduce_265,
  2, 230, :_reduce_266,
  1, 224, :_reduce_none,
  3, 224, :_reduce_268,
  3, 235, :_reduce_269,
  3, 235, :_reduce_270,
  0, 237, :_reduce_271,
  1, 237, :_reduce_none,
  0, 179, :_reduce_273,
  1, 179, :_reduce_none,
  2, 179, :_reduce_none,
  4, 179, :_reduce_276,
  2, 179, :_reduce_277,
  1, 208, :_reduce_278,
  2, 208, :_reduce_279,
  2, 208, :_reduce_280,
  4, 208, :_reduce_281,
  1, 208, :_reduce_282,
  0, 240, :_reduce_283,
  2, 201, :_reduce_284,
  2, 239, :_reduce_285,
  2, 238, :_reduce_286,
  0, 238, :_reduce_287,
  1, 232, :_reduce_288,
  2, 232, :_reduce_289,
  3, 232, :_reduce_290,
  4, 232, :_reduce_291,
  1, 171, :_reduce_292,
  1, 171, :_reduce_none,
  3, 170, :_reduce_294,
  4, 170, :_reduce_295,
  2, 170, :_reduce_296,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_307,
  0, 262, :_reduce_308,
  4, 228, :_reduce_309,
  0, 263, :_reduce_310,
  4, 228, :_reduce_311,
  0, 264, :_reduce_312,
  4, 228, :_reduce_313,
  3, 228, :_reduce_314,
  3, 228, :_reduce_315,
  2, 228, :_reduce_316,
  3, 228, :_reduce_317,
  3, 228, :_reduce_318,
  1, 228, :_reduce_319,
  4, 228, :_reduce_320,
  3, 228, :_reduce_321,
  1, 228, :_reduce_322,
  5, 228, :_reduce_323,
  4, 228, :_reduce_324,
  3, 228, :_reduce_325,
  2, 228, :_reduce_326,
  1, 228, :_reduce_none,
  2, 228, :_reduce_328,
  2, 228, :_reduce_329,
  6, 228, :_reduce_330,
  6, 228, :_reduce_331,
  4, 228, :_reduce_332,
  4, 228, :_reduce_333,
  5, 228, :_reduce_334,
  4, 228, :_reduce_335,
  5, 228, :_reduce_336,
  6, 228, :_reduce_337,
  0, 265, :_reduce_338,
  6, 228, :_reduce_339,
  0, 266, :_reduce_340,
  7, 228, :_reduce_341,
  0, 267, :_reduce_342,
  5, 228, :_reduce_343,
  4, 228, :_reduce_344,
  4, 228, :_reduce_345,
  1, 228, :_reduce_346,
  1, 228, :_reduce_347,
  1, 228, :_reduce_348,
  1, 228, :_reduce_349,
  1, 178, :_reduce_none,
  1, 207, :_reduce_351,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  2, 254, :_reduce_354,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 255, :_reduce_none,
  5, 255, :_reduce_358,
  1, 159, :_reduce_none,
  2, 159, :_reduce_360,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 268, :_reduce_363,
  3, 268, :_reduce_364,
  1, 271, :_reduce_365,
  3, 271, :_reduce_366,
  1, 270, :_reduce_none,
  3, 270, :_reduce_368,
  5, 270, :_reduce_369,
  1, 270, :_reduce_370,
  3, 270, :_reduce_371,
  2, 272, :_reduce_372,
  1, 272, :_reduce_373,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  4, 276, :_reduce_376,
  2, 276, :_reduce_377,
  2, 276, :_reduce_378,
  1, 276, :_reduce_379,
  2, 280, :_reduce_380,
  0, 280, :_reduce_381,
  6, 281, :_reduce_382,
  8, 281, :_reduce_383,
  4, 281, :_reduce_384,
  6, 281, :_reduce_385,
  4, 281, :_reduce_386,
  2, 281, :_reduce_none,
  6, 281, :_reduce_388,
  2, 281, :_reduce_389,
  4, 281, :_reduce_390,
  6, 281, :_reduce_391,
  2, 281, :_reduce_392,
  4, 281, :_reduce_393,
  2, 281, :_reduce_394,
  4, 281, :_reduce_395,
  1, 281, :_reduce_none,
  0, 285, :_reduce_397,
  1, 285, :_reduce_398,
  3, 286, :_reduce_399,
  4, 286, :_reduce_400,
  1, 287, :_reduce_401,
  4, 287, :_reduce_402,
  1, 288, :_reduce_403,
  3, 288, :_reduce_404,
  1, 289, :_reduce_405,
  1, 289, :_reduce_none,
  0, 293, :_reduce_407,
  0, 294, :_reduce_408,
  4, 253, :_reduce_409,
  4, 291, :_reduce_410,
  1, 291, :_reduce_411,
  0, 297, :_reduce_412,
  4, 292, :_reduce_413,
  0, 298, :_reduce_414,
  4, 292, :_reduce_415,
  0, 300, :_reduce_416,
  4, 296, :_reduce_417,
  2, 199, :_reduce_418,
  4, 199, :_reduce_419,
  5, 199, :_reduce_420,
  5, 199, :_reduce_421,
  2, 252, :_reduce_422,
  4, 252, :_reduce_423,
  4, 252, :_reduce_424,
  3, 252, :_reduce_425,
  3, 252, :_reduce_426,
  3, 252, :_reduce_427,
  2, 252, :_reduce_428,
  1, 252, :_reduce_429,
  4, 252, :_reduce_430,
  0, 302, :_reduce_431,
  4, 251, :_reduce_432,
  0, 303, :_reduce_433,
  4, 251, :_reduce_434,
  0, 304, :_reduce_435,
  3, 203, :_reduce_436,
  0, 305, :_reduce_437,
  0, 306, :_reduce_438,
  4, 299, :_reduce_439,
  5, 256, :_reduce_440,
  1, 307, :_reduce_441,
  1, 307, :_reduce_none,
  0, 310, :_reduce_443,
  0, 311, :_reduce_444,
  7, 257, :_reduce_445,
  1, 309, :_reduce_446,
  1, 309, :_reduce_none,
  1, 308, :_reduce_448,
  3, 308, :_reduce_449,
  3, 308, :_reduce_450,
  1, 312, :_reduce_none,
  2, 312, :_reduce_452,
  3, 312, :_reduce_453,
  1, 312, :_reduce_454,
  1, 312, :_reduce_455,
  1, 185, :_reduce_none,
  3, 316, :_reduce_457,
  1, 316, :_reduce_none,
  3, 318, :_reduce_459,
  1, 318, :_reduce_none,
  1, 320, :_reduce_461,
  1, 321, :_reduce_462,
  1, 319, :_reduce_none,
  4, 319, :_reduce_464,
  4, 319, :_reduce_465,
  3, 319, :_reduce_466,
  4, 319, :_reduce_467,
  4, 319, :_reduce_468,
  3, 319, :_reduce_469,
  0, 325, :_reduce_470,
  4, 319, :_reduce_471,
  2, 319, :_reduce_472,
  0, 326, :_reduce_473,
  4, 319, :_reduce_474,
  2, 319, :_reduce_475,
  0, 327, :_reduce_476,
  4, 319, :_reduce_477,
  1, 313, :_reduce_478,
  1, 313, :_reduce_479,
  2, 313, :_reduce_480,
  3, 313, :_reduce_481,
  5, 313, :_reduce_482,
  2, 313, :_reduce_483,
  4, 313, :_reduce_484,
  1, 313, :_reduce_none,
  2, 328, :_reduce_486,
  3, 328, :_reduce_487,
  2, 314, :_reduce_488,
  4, 314, :_reduce_489,
  1, 314, :_reduce_490,
  3, 314, :_reduce_491,
  1, 330, :_reduce_492,
  3, 330, :_reduce_493,
  1, 329, :_reduce_none,
  3, 315, :_reduce_495,
  1, 315, :_reduce_496,
  2, 315, :_reduce_497,
  1, 315, :_reduce_498,
  1, 331, :_reduce_499,
  3, 331, :_reduce_500,
  2, 333, :_reduce_501,
  1, 333, :_reduce_502,
  1, 334, :_reduce_503,
  3, 334, :_reduce_504,
  2, 336, :_reduce_505,
  1, 336, :_reduce_506,
  2, 338, :_reduce_507,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  1, 322, :_reduce_none,
  3, 322, :_reduce_511,
  3, 322, :_reduce_512,
  2, 322, :_reduce_513,
  2, 322, :_reduce_514,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  2, 322, :_reduce_518,
  2, 322, :_reduce_519,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  1, 339, :_reduce_528,
  2, 339, :_reduce_529,
  1, 317, :_reduce_530,
  2, 340, :_reduce_531,
  2, 323, :_reduce_532,
  3, 323, :_reduce_533,
  1, 323, :_reduce_534,
  6, 158, :_reduce_535,
  0, 158, :_reduce_536,
  1, 341, :_reduce_537,
  1, 341, :_reduce_none,
  1, 341, :_reduce_none,
  2, 342, :_reduce_540,
  1, 342, :_reduce_none,
  2, 160, :_reduce_542,
  1, 160, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 242, :_reduce_546,
  1, 344, :_reduce_547,
  2, 344, :_reduce_548,
  3, 345, :_reduce_549,
  1, 345, :_reduce_550,
  1, 345, :_reduce_551,
  3, 243, :_reduce_552,
  4, 244, :_reduce_553,
  3, 245, :_reduce_554,
  0, 348, :_reduce_555,
  3, 348, :_reduce_556,
  1, 349, :_reduce_557,
  2, 349, :_reduce_558,
  3, 247, :_reduce_559,
  0, 351, :_reduce_560,
  3, 351, :_reduce_561,
  3, 246, :_reduce_562,
  3, 248, :_reduce_563,
  0, 352, :_reduce_564,
  3, 352, :_reduce_565,
  0, 353, :_reduce_566,
  3, 353, :_reduce_567,
  0, 335, :_reduce_568,
  2, 335, :_reduce_569,
  0, 346, :_reduce_570,
  2, 346, :_reduce_571,
  0, 347, :_reduce_572,
  2, 347, :_reduce_573,
  1, 350, :_reduce_574,
  2, 350, :_reduce_575,
  0, 355, :_reduce_576,
  4, 350, :_reduce_577,
  1, 354, :_reduce_578,
  1, 354, :_reduce_579,
  1, 354, :_reduce_580,
  1, 354, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 356, :_reduce_584,
  3, 357, :_reduce_585,
  1, 343, :_reduce_586,
  2, 343, :_reduce_587,
  1, 225, :_reduce_588,
  1, 225, :_reduce_589,
  1, 225, :_reduce_590,
  1, 225, :_reduce_591,
  1, 216, :_reduce_592,
  1, 216, :_reduce_593,
  1, 216, :_reduce_594,
  1, 216, :_reduce_595,
  1, 216, :_reduce_596,
  1, 217, :_reduce_597,
  1, 217, :_reduce_598,
  1, 217, :_reduce_599,
  1, 217, :_reduce_600,
  1, 217, :_reduce_601,
  1, 217, :_reduce_602,
  1, 217, :_reduce_603,
  1, 249, :_reduce_604,
  1, 249, :_reduce_605,
  1, 177, :_reduce_606,
  1, 177, :_reduce_607,
  1, 182, :_reduce_608,
  1, 182, :_reduce_609,
  0, 358, :_reduce_610,
  4, 259, :_reduce_611,
  0, 259, :_reduce_612,
  3, 227, :_reduce_613,
  3, 227, :_reduce_614,
  1, 261, :_reduce_none,
  0, 360, :_reduce_616,
  3, 261, :_reduce_617,
  4, 359, :_reduce_618,
  2, 359, :_reduce_619,
  2, 359, :_reduce_620,
  1, 359, :_reduce_621,
  2, 362, :_reduce_622,
  0, 362, :_reduce_623,
  6, 295, :_reduce_624,
  8, 295, :_reduce_625,
  4, 295, :_reduce_626,
  6, 295, :_reduce_627,
  4, 295, :_reduce_628,
  6, 295, :_reduce_629,
  2, 295, :_reduce_630,
  4, 295, :_reduce_631,
  6, 295, :_reduce_632,
  2, 295, :_reduce_633,
  4, 295, :_reduce_634,
  2, 295, :_reduce_635,
  4, 295, :_reduce_636,
  1, 295, :_reduce_637,
  0, 295, :_reduce_638,
  1, 236, :_reduce_639,
  1, 290, :_reduce_640,
  1, 290, :_reduce_641,
  1, 290, :_reduce_642,
  1, 290, :_reduce_643,
  1, 269, :_reduce_none,
  1, 269, :_reduce_645,
  1, 364, :_reduce_646,
  1, 365, :_reduce_647,
  3, 365, :_reduce_648,
  1, 282, :_reduce_649,
  3, 282, :_reduce_650,
  1, 366, :_reduce_651,
  2, 367, :_reduce_652,
  1, 367, :_reduce_653,
  2, 368, :_reduce_654,
  1, 368, :_reduce_655,
  1, 277, :_reduce_656,
  3, 277, :_reduce_657,
  1, 361, :_reduce_658,
  3, 361, :_reduce_659,
  1, 337, :_reduce_none,
  1, 337, :_reduce_none,
  2, 275, :_reduce_662,
  2, 274, :_reduce_663,
  1, 274, :_reduce_664,
  3, 369, :_reduce_665,
  3, 370, :_reduce_666,
  1, 283, :_reduce_667,
  3, 283, :_reduce_668,
  1, 363, :_reduce_669,
  3, 363, :_reduce_670,
  1, 371, :_reduce_none,
  1, 371, :_reduce_none,
  2, 284, :_reduce_673,
  1, 284, :_reduce_674,
  1, 372, :_reduce_none,
  1, 372, :_reduce_none,
  2, 279, :_reduce_677,
  2, 278, :_reduce_678,
  0, 278, :_reduce_679,
  1, 194, :_reduce_none,
  3, 194, :_reduce_681,
  0, 250, :_reduce_682,
  2, 250, :_reduce_none,
  1, 234, :_reduce_684,
  3, 234, :_reduce_685,
  3, 373, :_reduce_686,
  2, 373, :_reduce_687,
  4, 373, :_reduce_688,
  2, 373, :_reduce_689,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 181, :_reduce_702,
  1, 181, :_reduce_703,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 211, :_reduce_708,
  2, 180, :_reduce_709,
  2, 324, :_reduce_710,
  0, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 260, :_reduce_714,
  1, 260, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_none,
  0, 231, :_reduce_718 ]

racc_reduce_n = 719

racc_shift_n = 1201

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tEQL => 145,
  :tLOWEST => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "rassign",
  "expr",
  "@1",
  "arg_value",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "p_expr",
  "@2",
  "expr_value_do",
  "do",
  "def_name",
  "@3",
  "fname",
  "defn_head",
  "defs_head",
  "singleton",
  "dot_or_colon",
  "@4",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@5",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "op",
  "reswords",
  "symbol",
  "@6",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "f_paren_args",
  "primary",
  "relop",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "f_any_kwrest",
  "f_kwrest",
  "f_no_kwarg",
  "block_args_tail",
  "f_block_kwarg",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@14",
  "@15",
  "f_args",
  "do_block",
  "@16",
  "@17",
  "do_body",
  "@18",
  "operation3",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "cases",
  "p_top_expr",
  "p_cases",
  "@24",
  "@25",
  "p_top_expr_body",
  "p_args",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "rbrace",
  "@26",
  "@27",
  "@28",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_kwarg",
  "p_any_kwrest",
  "p_kw",
  "p_kw_label",
  "string_contents",
  "p_kwrest",
  "kwrest_mark",
  "p_kwnorest",
  "p_primitive",
  "p_var_ref",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@29",
  "ssym",
  "dsym",
  "@30",
  "args_tail",
  "@31",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 35 omitted

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = @builder.rassign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.multi_rassign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.rassign(val[0], val[1], val[2])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.multi_rassign(val[0], val[1], val[2])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_44(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_46(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_48(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_54(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_55(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_57(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_58(val, _values, result)
                      @lexer.in_kwarg = val[2]
                      result = @builder.in_match(val[0], val[1], val[3])
                    
    result
end

# reduce 59 omitted

# reduce 60 omitted

def _reduce_61(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_62(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

def _reduce_63(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @current_arg_stack.push(nil)

                      result = val[0]
                    
    result
end

def _reduce_64(val, _values, result)
                      @context.push(:def)

                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_65(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_66(val, _values, result)
                      @context.push(:defs)

                      result = [ val[0], val[1], val[2], val[4] ]
                    
    result
end

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 73 omitted

def _reduce_74(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_75(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_79(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 89 omitted

def _reduce_90(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_96(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_97(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 99 omitted

def _reduce_100(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_103(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_104(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_108(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_110(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_112(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_113(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_117(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_118(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_119(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_120(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_121(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_122(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_123(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_126(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_127(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

def _reduce_133(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 134 omitted

def _reduce_135(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_136(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_137(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

def _reduce_209(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_215(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_216(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 237 omitted

def _reduce_238(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_242(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_244(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_246(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_247(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_249(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_250(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

def _reduce_251(val, _values, result)
                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_252(val, _values, result)
                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_253(val, _values, result)
                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_254(val, _values, result)
                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

# reduce 255 omitted

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

def _reduce_260(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

def _reduce_265(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_266(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 267 omitted

def _reduce_268(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = val
                    
    result
end

def _reduce_270(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[1]
                      end

                      result = [val[0], [@builder.forwarded_args(val[1])], val[2]]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 272 omitted

def _reduce_273(val, _values, result)
                      result = []
                    
    result
end

# reduce 274 omitted

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_277(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_278(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_281(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_282(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_283(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_284(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = []
                    
    result
end

def _reduce_288(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_291(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 293 omitted

def _reduce_294(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_295(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

def _reduce_307(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_308(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_309(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_312(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_313(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_315(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_326(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 327 omitted

def _reduce_328(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_329(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_330(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_331(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_333(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_334(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_335(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_336(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_337(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_338(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_339(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_340(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_341(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_342(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_343(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_344(val, _values, result)
                      result = @builder.def_method(*val[0], val[1],
                                  val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_345(val, _values, result)
                      result = @builder.def_singleton(*val[0], val[1],
                                  val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_346(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_347(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 352 omitted

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      result = val
                    
    result
end

# reduce 361 omitted

# reduce 362 omitted

def _reduce_363(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 367 omitted

def _reduce_368(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_371(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

# reduce 374 omitted

# reduce 375 omitted

def _reduce_376(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_381(val, _values, result)
                      result = []
                    
    result
end

def _reduce_382(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 387 omitted

def _reduce_388(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_389(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_390(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_391(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_392(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_393(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_394(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_395(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_398(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_399(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_400(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = []
                    
    result
end

def _reduce_402(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_404(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_405(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 406 omitted

def _reduce_407(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                      @context.push(:lambda)
                    
    result
end

def _reduce_408(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_409(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_410(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_411(val, _values, result)
                      if val[0].any?
                        @max_numparam_stack.has_ordinary_params!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_412(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_413(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_414(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_416(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_418(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_419(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_420(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_421(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_422(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_423(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_424(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_426(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_427(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_428(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_429(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_431(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_432(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_433(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_434(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_435(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_436(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[2] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_437(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_438(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_439(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_440(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push
                      @pattern_hash_keys.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_444(val, _values, result)
                      @lexer.in_kwarg = val[1]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_453(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 456 omitted

def _reduce_457(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 458 omitted

def _reduce_459(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_465(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_466(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_467(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_468(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_469(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_470(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_471(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.array_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_473(val, _values, result)
                      @pattern_hash_keys.push
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = false
                    
    result
end

def _reduce_474(val, _values, result)
                      @pattern_hash_keys.pop
                      @lexer.in_kwarg = val[1]
                      result = @builder.hash_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_477(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_479(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_480(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_481(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest ]
                    
    result
end

def _reduce_482(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest, *val[4] ]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]) ]
                    
    result
end

def _reduce_484(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]), *val[3] ]
                    
    result
end

# reduce 485 omitted

def _reduce_486(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = [ item ]
                    
    result
end

def _reduce_487(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1], val[2])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_488(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest ]
                    
    result
end

def _reduce_489(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest, *val[3] ]
                    
    result
end

def _reduce_490(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest ]
                    
    result
end

def _reduce_491(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest, *val[2] ]
                    
    result
end

def _reduce_492(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_493(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_496(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_498(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_500(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @builder.match_pair(*val[0], val[1])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @builder.match_label(*val[0])
                    
    result
end

def _reduce_503(val, _values, result)
                    check_kwarg_name(val[0])
                    result = [:label, val[0]]
                  
    result
end

def _reduce_504(val, _values, result)
                    result = [:quoted, [val[0], val[1], val[2]]]
                  
    result
end

def _reduce_505(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_506(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

def _reduce_507(val, _values, result)
                      result = [ @builder.match_nil_pattern(val[0], val[1]) ]
                    
    result
end

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

def _reduce_511(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_514(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

def _reduce_518(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

def _reduce_528(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_529(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_530(val, _values, result)
                      result = @builder.match_var(val[0])
                    
    result
end

def _reduce_531(val, _values, result)
                      name = val[1][0]
                      unless static_env.declared?(name)
                        diagnostic :error, :undefined_lvar, { :name => name }, val[1]
                      end

                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_532(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_533(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_534(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_535(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = []
                    
    result
end

def _reduce_537(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 538 omitted

# reduce 539 omitted

def _reduce_540(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 541 omitted

def _reduce_542(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 543 omitted

# reduce 544 omitted

# reduce 545 omitted

def _reduce_546(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_547(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_548(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_549(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_550(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_551(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_552(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_553(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_554(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_555(val, _values, result)
                      result = []
                    
    result
end

def _reduce_556(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_557(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_560(val, _values, result)
                      result = []
                    
    result
end

def _reduce_561(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_562(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_563(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_564(val, _values, result)
                      result = []
                    
    result
end

def _reduce_565(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_566(val, _values, result)
                      result = []
                    
    result
end

def _reduce_567(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_568(val, _values, result)
                      result = []
                    
    result
end

def _reduce_569(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_570(val, _values, result)
                      result = []
                    
    result
end

def _reduce_571(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_572(val, _values, result)
                      result = []
                    
    result
end

def _reduce_573(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_574(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_576(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_577(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_579(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_580(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_585(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_587(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_588(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_589(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_590(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_591(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_592(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_593(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_600(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_601(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_602(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_603(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_604(val, _values, result)
                      if (node = val[0]) && node.type == :ident
                        name = node.children[0]

                        if name =~ /\A_[1-9]\z/ && !static_env.declared?(name) && context.in_dynamic_block?
                          # definitely an implicit param
                          location = node.loc.expression

                          if max_numparam_stack.has_ordinary_params?
                            diagnostic :error, :ordinary_param_defined, nil, [nil, location]
                          end

                          raw_context = context.stack.dup
                          raw_max_numparam_stack = max_numparam_stack.stack.dup

                          # ignore current block scope
                          raw_context.pop
                          raw_max_numparam_stack.pop

                          raw_context.reverse_each do |outer_scope|
                            if outer_scope == :block || outer_scope == :lambda
                              outer_scope_has_numparams = raw_max_numparam_stack.pop > 0

                              if outer_scope_has_numparams
                                diagnostic :error, :numparam_used_in_outer_scope, nil, [nil, location]
                              else
                                # for now it's ok, but an outer scope can also be a block
                                # with numparams, so we need to continue
                              end
                            else
                              # found an outer scope that can't have numparams
                              # like def/class/etc
                              break
                            end
                          end

                          static_env.declare(name)
                          max_numparam_stack.register(name[1].to_i)
                        end
                      end

                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_605(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_606(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_607(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_608(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_609(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_610(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_611(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_612(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_613(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_614(val, _values, result)
                      result = @builder.forward_args(val[0], val[1], val[2])
                      @static_env.declare_forward_args

                      @lexer.state = :expr_value
                    
    result
end

# reduce 615 omitted

def _reduce_616(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_617(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_618(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_619(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_620(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_621(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_622(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_623(val, _values, result)
                      result = []
                    
    result
end

def _reduce_624(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_625(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_626(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_627(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_628(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_629(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_630(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_631(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_632(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_633(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_634(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_635(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_636(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_637(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_638(val, _values, result)
                      result = []
                    
    result
end

def _reduce_639(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_640(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_641(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_642(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_643(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 644 omitted

def _reduce_645(val, _values, result)
                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      result = val[0]
                    
    result
end

def _reduce_646(val, _values, result)
                      @current_arg_stack.set(val[0][0])
                      result = val[0]
                    
    result
end

def _reduce_647(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_648(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_649(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_650(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_651(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      @current_arg_stack.set(val[0][0])

                      result = val[0]
                    
    result
end

def _reduce_652(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_653(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_654(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_655(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_656(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_657(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_658(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_659(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 660 omitted

# reduce 661 omitted

def _reduce_662(val, _values, result)
                      result = [ @builder.kwnilarg(val[0], val[1]) ]
                    
    result
end

def _reduce_663(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_664(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_665(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_666(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_667(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_668(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_669(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_670(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 671 omitted

# reduce 672 omitted

def _reduce_673(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_674(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 675 omitted

# reduce 676 omitted

def _reduce_677(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_678(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_679(val, _values, result)
                      result = []
                    
    result
end

# reduce 680 omitted

def _reduce_681(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_682(val, _values, result)
                      result = []
                    
    result
end

# reduce 683 omitted

def _reduce_684(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_685(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_686(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_687(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_688(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_689(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 690 omitted

# reduce 691 omitted

# reduce 692 omitted

# reduce 693 omitted

# reduce 694 omitted

# reduce 695 omitted

# reduce 696 omitted

# reduce 697 omitted

# reduce 698 omitted

# reduce 699 omitted

# reduce 700 omitted

# reduce 701 omitted

def _reduce_702(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_703(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 704 omitted

# reduce 705 omitted

# reduce 706 omitted

# reduce 707 omitted

def _reduce_708(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_709(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_710(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 711 omitted

# reduce 712 omitted

# reduce 713 omitted

def _reduce_714(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 715 omitted

# reduce 716 omitted

# reduce 717 omitted

def _reduce_718(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby28
  end   # module Parser
